
16_systick_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080016c8  080016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001778  08001778  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001778  08001778  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001778  08001778  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001778  08001778  00011778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800177c  0800177c  0001177c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080017e4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080017e4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013e2  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c9  00000000  00000000  00021474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00021c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002130  00000000  00000000  00021fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000282d  00000000  00000000  00024108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8e18  00000000  00000000  00026935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e2c  00000000  00000000  000cf7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	080016b0 	.word	0x080016b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	080016b0 	.word	0x080016b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <set_pin_mode>:
 *      Author: st
 */
#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b089      	sub	sp, #36	; 0x24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b10 = 0x2
	 * 2 << 16 ==> bit16 = 0, bit17 = 1
	 * */

	MODIFY_REG(GPIOx->MODER, (0x3<<(POSITION_VAL(Pin)*2U)), (Mode<<(POSITION_VAL(Pin)*2U)));
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	fa92 f2a2 	rbit	r2, r2
 80002fa:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002fc:	693a      	ldr	r2, [r7, #16]
 80002fe:	fab2 f282 	clz	r2, r2
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	2103      	movs	r1, #3
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	43d2      	mvns	r2, r2
 800030e:	401a      	ands	r2, r3
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	fa93 f3a3 	rbit	r3, r3
 800031a:	61bb      	str	r3, [r7, #24]
  return result;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fab3 f383 	clz	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	431a      	orrs	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	3724      	adds	r7, #36	; 0x24
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <main>:


static void systick_callback(void);


int main(void){
 800033e:	b580      	push	{r7, lr}
 8000340:	af00      	add	r7, sp, #0
  uart3_tx_init();
 8000342:	f000 f907 	bl	8000554 <uart3_tx_init>
  systick_1hz_interrupt();
 8000346:	f000 f8d9 	bl	80004fc <systick_1hz_interrupt>

  while(1){
 800034a:	e7fe      	b.n	800034a <main+0xc>

0800034c <systick_callback>:

  }
}


static void systick_callback(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  printf("A second just passed \n\r");
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <systick_callback+0x10>)
 8000352:	f000 fa1f 	bl	8000794 <iprintf>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	080016c8 	.word	0x080016c8

08000360 <SysTick_Handler>:

void SysTick_Handler(void){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  // Do something
  systick_callback();
 8000364:	f7ff fff2 	bl	800034c <systick_callback>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <set_ahb1_periph_clock>:
 *      Author: st
 */
#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <set_ahb1_periph_clock+0x20>)
 8000376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000378:	4904      	ldr	r1, [pc, #16]	; (800038c <set_ahb1_periph_clock+0x20>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4313      	orrs	r3, r2
 800037e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40023800 	.word	0x40023800

08000390 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <set_apb1_periph_clock+0x20>)
 800039a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <set_apb1_periph_clock+0x20>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40023800 	.word	0x40023800

080003b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	e00a      	b.n	80003dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003c6:	f3af 8000 	nop.w
 80003ca:	4601      	mov	r1, r0
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	1c5a      	adds	r2, r3, #1
 80003d0:	60ba      	str	r2, [r7, #8]
 80003d2:	b2ca      	uxtb	r2, r1
 80003d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	3301      	adds	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbf0      	blt.n	80003c6 <_read+0x12>
  }

  return len;
 80003e4:	687b      	ldr	r3, [r7, #4]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b086      	sub	sp, #24
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	e009      	b.n	8000414 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	60ba      	str	r2, [r7, #8]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f891 	bl	8000530 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3301      	adds	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	697a      	ldr	r2, [r7, #20]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	429a      	cmp	r2, r3
 800041a:	dbf1      	blt.n	8000400 <_write+0x12>
  }
  return len;
 800041c:	687b      	ldr	r3, [r7, #4]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <_close>:

int _close(int file)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800042e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800044e:	605a      	str	r2, [r3, #4]
  return 0;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_isatty>:

int _isatty(int file)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000466:	2301      	movs	r3, #1
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
	...

08000490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <_sbrk+0x5c>)
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <_sbrk+0x60>)
 800049c:	1ad3      	subs	r3, r2, r3
 800049e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <_sbrk+0x64>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d102      	bne.n	80004b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_sbrk+0x64>)
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <_sbrk+0x68>)
 80004b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	693a      	ldr	r2, [r7, #16]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d207      	bcs.n	80004d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c0:	f000 f936 	bl	8000730 <__errno>
 80004c4:	4603      	mov	r3, r0
 80004c6:	220c      	movs	r2, #12
 80004c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ce:	e009      	b.n	80004e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <_sbrk+0x64>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <_sbrk+0x64>)
 80004e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e2:	68fb      	ldr	r3, [r7, #12]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20080000 	.word	0x20080000
 80004f0:	00000400 	.word	0x00000400
 80004f4:	20000080 	.word	0x20000080
 80004f8:	20000098 	.word	0x20000098

080004fc <systick_1hz_interrupt>:
  }
  SysTick->CTRL = 0;
}


void systick_1hz_interrupt(void){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  // Reload the number of clocks per millisecond
  SysTick->LOAD = ONE_SEC_LOAD -1;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <systick_1hz_interrupt+0x2c>)
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <systick_1hz_interrupt+0x30>)
 8000504:	605a      	str	r2, [r3, #4]

  // Clear the Current Value register
  SysTick->VAL = 0;
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <systick_1hz_interrupt+0x2c>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]

  // Select clock source and enable systick
  SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <systick_1hz_interrupt+0x2c>)
 800050e:	2205      	movs	r2, #5
 8000510:	601a      	str	r2, [r3, #0]

  // Enable Systick interrupt
  SysTick->CTRL |= CTRL_TICKINT;
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <systick_1hz_interrupt+0x2c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <systick_1hz_interrupt+0x2c>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	6013      	str	r3, [r2, #0]
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	e000e010 	.word	0xe000e010
 800052c:	00f423ff 	.word	0x00f423ff

08000530 <__io_putchar>:
static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection);

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits);

int __io_putchar(int ch)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  uart_write(USART3, ch);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	4804      	ldr	r0, [pc, #16]	; (8000550 <__io_putchar+0x20>)
 8000540:	f000 f84a 	bl	80005d8 <uart_write>
  return ch;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40004800 	.word	0x40004800

08000554 <uart3_tx_init>:


void uart3_tx_init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	// 1.Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 8000558:	2008      	movs	r0, #8
 800055a:	f7ff ff07 	bl	800036c <set_ahb1_periph_clock>

	// 2.Set PD8 to mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 800055e:	2202      	movs	r2, #2
 8000560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000564:	4819      	ldr	r0, [pc, #100]	; (80005cc <uart3_tx_init+0x78>)
 8000566:	f7ff febb 	bl	80002e0 <set_pin_mode>

	// 3. Set alternate function to USART
	GPIOD->AFR[1] |= (1U<<0);
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <uart3_tx_init+0x78>)
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	4a17      	ldr	r2, [pc, #92]	; (80005cc <uart3_tx_init+0x78>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 8000576:	4b15      	ldr	r3, [pc, #84]	; (80005cc <uart3_tx_init+0x78>)
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <uart3_tx_init+0x78>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <uart3_tx_init+0x78>)
 8000584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000586:	4a11      	ldr	r2, [pc, #68]	; (80005cc <uart3_tx_init+0x78>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ (1U<<3);
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <uart3_tx_init+0x78>)
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <uart3_tx_init+0x78>)
 8000594:	f023 0308 	bic.w	r3, r3, #8
 8000598:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable clock to the USART3 module
	set_apb1_periph_clock(USART3EN);
 800059a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800059e:	f7ff fef7 	bl	8000390 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80005a2:	2300      	movs	r3, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	2100      	movs	r1, #0
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <uart3_tx_init+0x7c>)
 80005aa:	f000 f861 	bl	8000670 <config_uart_parameters>
  set_uart_transfer_direction(USART3, USART_CR1_TE);
 80005ae:	2108      	movs	r1, #8
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <uart3_tx_init+0x7c>)
 80005b2:	f000 f837 	bl	8000624 <set_uart_transfer_direction>

	// Set baudrate
  uart_set_baudrate(USART3, 16000000, 115200);
 80005b6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ba:	4906      	ldr	r1, [pc, #24]	; (80005d4 <uart3_tx_init+0x80>)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <uart3_tx_init+0x7c>)
 80005be:	f000 f844 	bl	800064a <uart_set_baudrate>

	// Enable USART
  /*USART3->CR1 |= USART_CR1_UE;*/
  // SET_BIT(USART3->CR1, USART_CR1_UE);
  uart_enable(USART3);
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <uart3_tx_init+0x7c>)
 80005c4:	f000 f81e 	bl	8000604 <uart_enable>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	40004800 	.word	0x40004800
 80005d4:	00f42400 	.word	0x00f42400

080005d8 <uart_write>:
  while (!(USARTx->ISR & USART_ISR_RXNE)){}
  return (READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
}

void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	70fb      	strb	r3, [r7, #3]
  // Make sure transmit data register is empty
  while (!((USARTx->ISR & USART_ISR_TXE) == USART_ISR_TXE)){}
 80005e4:	bf00      	nop
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	2b80      	cmp	r3, #128	; 0x80
 80005f0:	d1f9      	bne.n	80005e6 <uart_write+0xe>
  /*while (!(USARTx->ISR & USART_ISR_TXE)){}*/

  // Write value into transmit data register
  USARTx->TDR = value;
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <uart_enable>:


static void uart_enable(USART_TypeDef *USARTx)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f043 0201 	orr.w	r2, r3, #1
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	601a      	str	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 020c 	bic.w	r2, r3, #12
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	431a      	orrs	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	601a      	str	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
  USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 8000656:	6879      	ldr	r1, [r7, #4]
 8000658:	68b8      	ldr	r0, [r7, #8]
 800065a:	f000 f82b 	bl	80006b4 <compute_uart_div>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	60da      	str	r2, [r3, #12]
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <config_uart_parameters+0x40>)
 8000684:	4013      	ands	r3, r2
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	430a      	orrs	r2, r1
 800068c:	431a      	orrs	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	601a      	str	r2, [r3, #0]

	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	431a      	orrs	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	605a      	str	r2, [r3, #4]
}
 80006a2:	bf00      	nop
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	efffe9ff 	.word	0xefffe9ff

080006b4 <compute_uart_div>:


uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
  return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	085a      	lsrs	r2, r3, #1
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	441a      	add	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006cc:	b29b      	uxth	r3, r3
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
	...

080006dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	; (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	; (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070a:	f000 f817 	bl	800073c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff fe16 	bl	800033e <main>

08000712 <LoopForever>:

LoopForever:
  b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000720:	08001780 	.word	0x08001780
  ldr r2, =_sbss
 8000724:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000728:	20000094 	.word	0x20000094

0800072c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC_IRQHandler>
	...

08000730 <__errno>:
 8000730:	4b01      	ldr	r3, [pc, #4]	; (8000738 <__errno+0x8>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000

0800073c <__libc_init_array>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4d0d      	ldr	r5, [pc, #52]	; (8000774 <__libc_init_array+0x38>)
 8000740:	4c0d      	ldr	r4, [pc, #52]	; (8000778 <__libc_init_array+0x3c>)
 8000742:	1b64      	subs	r4, r4, r5
 8000744:	10a4      	asrs	r4, r4, #2
 8000746:	2600      	movs	r6, #0
 8000748:	42a6      	cmp	r6, r4
 800074a:	d109      	bne.n	8000760 <__libc_init_array+0x24>
 800074c:	4d0b      	ldr	r5, [pc, #44]	; (800077c <__libc_init_array+0x40>)
 800074e:	4c0c      	ldr	r4, [pc, #48]	; (8000780 <__libc_init_array+0x44>)
 8000750:	f000 ffae 	bl	80016b0 <_init>
 8000754:	1b64      	subs	r4, r4, r5
 8000756:	10a4      	asrs	r4, r4, #2
 8000758:	2600      	movs	r6, #0
 800075a:	42a6      	cmp	r6, r4
 800075c:	d105      	bne.n	800076a <__libc_init_array+0x2e>
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f855 3b04 	ldr.w	r3, [r5], #4
 8000764:	4798      	blx	r3
 8000766:	3601      	adds	r6, #1
 8000768:	e7ee      	b.n	8000748 <__libc_init_array+0xc>
 800076a:	f855 3b04 	ldr.w	r3, [r5], #4
 800076e:	4798      	blx	r3
 8000770:	3601      	adds	r6, #1
 8000772:	e7f2      	b.n	800075a <__libc_init_array+0x1e>
 8000774:	08001778 	.word	0x08001778
 8000778:	08001778 	.word	0x08001778
 800077c:	08001778 	.word	0x08001778
 8000780:	0800177c 	.word	0x0800177c

08000784 <memset>:
 8000784:	4402      	add	r2, r0
 8000786:	4603      	mov	r3, r0
 8000788:	4293      	cmp	r3, r2
 800078a:	d100      	bne.n	800078e <memset+0xa>
 800078c:	4770      	bx	lr
 800078e:	f803 1b01 	strb.w	r1, [r3], #1
 8000792:	e7f9      	b.n	8000788 <memset+0x4>

08000794 <iprintf>:
 8000794:	b40f      	push	{r0, r1, r2, r3}
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <iprintf+0x2c>)
 8000798:	b513      	push	{r0, r1, r4, lr}
 800079a:	681c      	ldr	r4, [r3, #0]
 800079c:	b124      	cbz	r4, 80007a8 <iprintf+0x14>
 800079e:	69a3      	ldr	r3, [r4, #24]
 80007a0:	b913      	cbnz	r3, 80007a8 <iprintf+0x14>
 80007a2:	4620      	mov	r0, r4
 80007a4:	f000 f866 	bl	8000874 <__sinit>
 80007a8:	ab05      	add	r3, sp, #20
 80007aa:	9a04      	ldr	r2, [sp, #16]
 80007ac:	68a1      	ldr	r1, [r4, #8]
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	4620      	mov	r0, r4
 80007b2:	f000 f9bd 	bl	8000b30 <_vfiprintf_r>
 80007b6:	b002      	add	sp, #8
 80007b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007bc:	b004      	add	sp, #16
 80007be:	4770      	bx	lr
 80007c0:	20000000 	.word	0x20000000

080007c4 <std>:
 80007c4:	2300      	movs	r3, #0
 80007c6:	b510      	push	{r4, lr}
 80007c8:	4604      	mov	r4, r0
 80007ca:	e9c0 3300 	strd	r3, r3, [r0]
 80007ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007d2:	6083      	str	r3, [r0, #8]
 80007d4:	8181      	strh	r1, [r0, #12]
 80007d6:	6643      	str	r3, [r0, #100]	; 0x64
 80007d8:	81c2      	strh	r2, [r0, #14]
 80007da:	6183      	str	r3, [r0, #24]
 80007dc:	4619      	mov	r1, r3
 80007de:	2208      	movs	r2, #8
 80007e0:	305c      	adds	r0, #92	; 0x5c
 80007e2:	f7ff ffcf 	bl	8000784 <memset>
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <std+0x38>)
 80007e8:	6263      	str	r3, [r4, #36]	; 0x24
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <std+0x3c>)
 80007ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <std+0x40>)
 80007f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <std+0x44>)
 80007f4:	6224      	str	r4, [r4, #32]
 80007f6:	6323      	str	r3, [r4, #48]	; 0x30
 80007f8:	bd10      	pop	{r4, pc}
 80007fa:	bf00      	nop
 80007fc:	080010d9 	.word	0x080010d9
 8000800:	080010fb 	.word	0x080010fb
 8000804:	08001133 	.word	0x08001133
 8000808:	08001157 	.word	0x08001157

0800080c <_cleanup_r>:
 800080c:	4901      	ldr	r1, [pc, #4]	; (8000814 <_cleanup_r+0x8>)
 800080e:	f000 b8af 	b.w	8000970 <_fwalk_reent>
 8000812:	bf00      	nop
 8000814:	08001431 	.word	0x08001431

08000818 <__sfmoreglue>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	2268      	movs	r2, #104	; 0x68
 800081c:	1e4d      	subs	r5, r1, #1
 800081e:	4355      	muls	r5, r2
 8000820:	460e      	mov	r6, r1
 8000822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000826:	f000 f8e5 	bl	80009f4 <_malloc_r>
 800082a:	4604      	mov	r4, r0
 800082c:	b140      	cbz	r0, 8000840 <__sfmoreglue+0x28>
 800082e:	2100      	movs	r1, #0
 8000830:	e9c0 1600 	strd	r1, r6, [r0]
 8000834:	300c      	adds	r0, #12
 8000836:	60a0      	str	r0, [r4, #8]
 8000838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800083c:	f7ff ffa2 	bl	8000784 <memset>
 8000840:	4620      	mov	r0, r4
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__sfp_lock_acquire>:
 8000844:	4801      	ldr	r0, [pc, #4]	; (800084c <__sfp_lock_acquire+0x8>)
 8000846:	f000 b8b3 	b.w	80009b0 <__retarget_lock_acquire_recursive>
 800084a:	bf00      	nop
 800084c:	20000085 	.word	0x20000085

08000850 <__sfp_lock_release>:
 8000850:	4801      	ldr	r0, [pc, #4]	; (8000858 <__sfp_lock_release+0x8>)
 8000852:	f000 b8ae 	b.w	80009b2 <__retarget_lock_release_recursive>
 8000856:	bf00      	nop
 8000858:	20000085 	.word	0x20000085

0800085c <__sinit_lock_acquire>:
 800085c:	4801      	ldr	r0, [pc, #4]	; (8000864 <__sinit_lock_acquire+0x8>)
 800085e:	f000 b8a7 	b.w	80009b0 <__retarget_lock_acquire_recursive>
 8000862:	bf00      	nop
 8000864:	20000086 	.word	0x20000086

08000868 <__sinit_lock_release>:
 8000868:	4801      	ldr	r0, [pc, #4]	; (8000870 <__sinit_lock_release+0x8>)
 800086a:	f000 b8a2 	b.w	80009b2 <__retarget_lock_release_recursive>
 800086e:	bf00      	nop
 8000870:	20000086 	.word	0x20000086

08000874 <__sinit>:
 8000874:	b510      	push	{r4, lr}
 8000876:	4604      	mov	r4, r0
 8000878:	f7ff fff0 	bl	800085c <__sinit_lock_acquire>
 800087c:	69a3      	ldr	r3, [r4, #24]
 800087e:	b11b      	cbz	r3, 8000888 <__sinit+0x14>
 8000880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000884:	f7ff bff0 	b.w	8000868 <__sinit_lock_release>
 8000888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800088c:	6523      	str	r3, [r4, #80]	; 0x50
 800088e:	4b13      	ldr	r3, [pc, #76]	; (80008dc <__sinit+0x68>)
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <__sinit+0x6c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	62a2      	str	r2, [r4, #40]	; 0x28
 8000896:	42a3      	cmp	r3, r4
 8000898:	bf04      	itt	eq
 800089a:	2301      	moveq	r3, #1
 800089c:	61a3      	streq	r3, [r4, #24]
 800089e:	4620      	mov	r0, r4
 80008a0:	f000 f820 	bl	80008e4 <__sfp>
 80008a4:	6060      	str	r0, [r4, #4]
 80008a6:	4620      	mov	r0, r4
 80008a8:	f000 f81c 	bl	80008e4 <__sfp>
 80008ac:	60a0      	str	r0, [r4, #8]
 80008ae:	4620      	mov	r0, r4
 80008b0:	f000 f818 	bl	80008e4 <__sfp>
 80008b4:	2200      	movs	r2, #0
 80008b6:	60e0      	str	r0, [r4, #12]
 80008b8:	2104      	movs	r1, #4
 80008ba:	6860      	ldr	r0, [r4, #4]
 80008bc:	f7ff ff82 	bl	80007c4 <std>
 80008c0:	68a0      	ldr	r0, [r4, #8]
 80008c2:	2201      	movs	r2, #1
 80008c4:	2109      	movs	r1, #9
 80008c6:	f7ff ff7d 	bl	80007c4 <std>
 80008ca:	68e0      	ldr	r0, [r4, #12]
 80008cc:	2202      	movs	r2, #2
 80008ce:	2112      	movs	r1, #18
 80008d0:	f7ff ff78 	bl	80007c4 <std>
 80008d4:	2301      	movs	r3, #1
 80008d6:	61a3      	str	r3, [r4, #24]
 80008d8:	e7d2      	b.n	8000880 <__sinit+0xc>
 80008da:	bf00      	nop
 80008dc:	080016e0 	.word	0x080016e0
 80008e0:	0800080d 	.word	0x0800080d

080008e4 <__sfp>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	4607      	mov	r7, r0
 80008e8:	f7ff ffac 	bl	8000844 <__sfp_lock_acquire>
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <__sfp+0x84>)
 80008ee:	681e      	ldr	r6, [r3, #0]
 80008f0:	69b3      	ldr	r3, [r6, #24]
 80008f2:	b913      	cbnz	r3, 80008fa <__sfp+0x16>
 80008f4:	4630      	mov	r0, r6
 80008f6:	f7ff ffbd 	bl	8000874 <__sinit>
 80008fa:	3648      	adds	r6, #72	; 0x48
 80008fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000900:	3b01      	subs	r3, #1
 8000902:	d503      	bpl.n	800090c <__sfp+0x28>
 8000904:	6833      	ldr	r3, [r6, #0]
 8000906:	b30b      	cbz	r3, 800094c <__sfp+0x68>
 8000908:	6836      	ldr	r6, [r6, #0]
 800090a:	e7f7      	b.n	80008fc <__sfp+0x18>
 800090c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000910:	b9d5      	cbnz	r5, 8000948 <__sfp+0x64>
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <__sfp+0x88>)
 8000914:	60e3      	str	r3, [r4, #12]
 8000916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800091a:	6665      	str	r5, [r4, #100]	; 0x64
 800091c:	f000 f847 	bl	80009ae <__retarget_lock_init_recursive>
 8000920:	f7ff ff96 	bl	8000850 <__sfp_lock_release>
 8000924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800092c:	6025      	str	r5, [r4, #0]
 800092e:	61a5      	str	r5, [r4, #24]
 8000930:	2208      	movs	r2, #8
 8000932:	4629      	mov	r1, r5
 8000934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000938:	f7ff ff24 	bl	8000784 <memset>
 800093c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000944:	4620      	mov	r0, r4
 8000946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000948:	3468      	adds	r4, #104	; 0x68
 800094a:	e7d9      	b.n	8000900 <__sfp+0x1c>
 800094c:	2104      	movs	r1, #4
 800094e:	4638      	mov	r0, r7
 8000950:	f7ff ff62 	bl	8000818 <__sfmoreglue>
 8000954:	4604      	mov	r4, r0
 8000956:	6030      	str	r0, [r6, #0]
 8000958:	2800      	cmp	r0, #0
 800095a:	d1d5      	bne.n	8000908 <__sfp+0x24>
 800095c:	f7ff ff78 	bl	8000850 <__sfp_lock_release>
 8000960:	230c      	movs	r3, #12
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	e7ee      	b.n	8000944 <__sfp+0x60>
 8000966:	bf00      	nop
 8000968:	080016e0 	.word	0x080016e0
 800096c:	ffff0001 	.word	0xffff0001

08000970 <_fwalk_reent>:
 8000970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000974:	4606      	mov	r6, r0
 8000976:	4688      	mov	r8, r1
 8000978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800097c:	2700      	movs	r7, #0
 800097e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000982:	f1b9 0901 	subs.w	r9, r9, #1
 8000986:	d505      	bpl.n	8000994 <_fwalk_reent+0x24>
 8000988:	6824      	ldr	r4, [r4, #0]
 800098a:	2c00      	cmp	r4, #0
 800098c:	d1f7      	bne.n	800097e <_fwalk_reent+0xe>
 800098e:	4638      	mov	r0, r7
 8000990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000994:	89ab      	ldrh	r3, [r5, #12]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d907      	bls.n	80009aa <_fwalk_reent+0x3a>
 800099a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800099e:	3301      	adds	r3, #1
 80009a0:	d003      	beq.n	80009aa <_fwalk_reent+0x3a>
 80009a2:	4629      	mov	r1, r5
 80009a4:	4630      	mov	r0, r6
 80009a6:	47c0      	blx	r8
 80009a8:	4307      	orrs	r7, r0
 80009aa:	3568      	adds	r5, #104	; 0x68
 80009ac:	e7e9      	b.n	8000982 <_fwalk_reent+0x12>

080009ae <__retarget_lock_init_recursive>:
 80009ae:	4770      	bx	lr

080009b0 <__retarget_lock_acquire_recursive>:
 80009b0:	4770      	bx	lr

080009b2 <__retarget_lock_release_recursive>:
 80009b2:	4770      	bx	lr

080009b4 <sbrk_aligned>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	4e0e      	ldr	r6, [pc, #56]	; (80009f0 <sbrk_aligned+0x3c>)
 80009b8:	460c      	mov	r4, r1
 80009ba:	6831      	ldr	r1, [r6, #0]
 80009bc:	4605      	mov	r5, r0
 80009be:	b911      	cbnz	r1, 80009c6 <sbrk_aligned+0x12>
 80009c0:	f000 fb7a 	bl	80010b8 <_sbrk_r>
 80009c4:	6030      	str	r0, [r6, #0]
 80009c6:	4621      	mov	r1, r4
 80009c8:	4628      	mov	r0, r5
 80009ca:	f000 fb75 	bl	80010b8 <_sbrk_r>
 80009ce:	1c43      	adds	r3, r0, #1
 80009d0:	d00a      	beq.n	80009e8 <sbrk_aligned+0x34>
 80009d2:	1cc4      	adds	r4, r0, #3
 80009d4:	f024 0403 	bic.w	r4, r4, #3
 80009d8:	42a0      	cmp	r0, r4
 80009da:	d007      	beq.n	80009ec <sbrk_aligned+0x38>
 80009dc:	1a21      	subs	r1, r4, r0
 80009de:	4628      	mov	r0, r5
 80009e0:	f000 fb6a 	bl	80010b8 <_sbrk_r>
 80009e4:	3001      	adds	r0, #1
 80009e6:	d101      	bne.n	80009ec <sbrk_aligned+0x38>
 80009e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80009ec:	4620      	mov	r0, r4
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	2000008c 	.word	0x2000008c

080009f4 <_malloc_r>:
 80009f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009f8:	1ccd      	adds	r5, r1, #3
 80009fa:	f025 0503 	bic.w	r5, r5, #3
 80009fe:	3508      	adds	r5, #8
 8000a00:	2d0c      	cmp	r5, #12
 8000a02:	bf38      	it	cc
 8000a04:	250c      	movcc	r5, #12
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	4607      	mov	r7, r0
 8000a0a:	db01      	blt.n	8000a10 <_malloc_r+0x1c>
 8000a0c:	42a9      	cmp	r1, r5
 8000a0e:	d905      	bls.n	8000a1c <_malloc_r+0x28>
 8000a10:	230c      	movs	r3, #12
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	2600      	movs	r6, #0
 8000a16:	4630      	mov	r0, r6
 8000a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a1c:	4e2e      	ldr	r6, [pc, #184]	; (8000ad8 <_malloc_r+0xe4>)
 8000a1e:	f000 fdbb 	bl	8001598 <__malloc_lock>
 8000a22:	6833      	ldr	r3, [r6, #0]
 8000a24:	461c      	mov	r4, r3
 8000a26:	bb34      	cbnz	r4, 8000a76 <_malloc_r+0x82>
 8000a28:	4629      	mov	r1, r5
 8000a2a:	4638      	mov	r0, r7
 8000a2c:	f7ff ffc2 	bl	80009b4 <sbrk_aligned>
 8000a30:	1c43      	adds	r3, r0, #1
 8000a32:	4604      	mov	r4, r0
 8000a34:	d14d      	bne.n	8000ad2 <_malloc_r+0xde>
 8000a36:	6834      	ldr	r4, [r6, #0]
 8000a38:	4626      	mov	r6, r4
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	d140      	bne.n	8000ac0 <_malloc_r+0xcc>
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	4631      	mov	r1, r6
 8000a42:	4638      	mov	r0, r7
 8000a44:	eb04 0803 	add.w	r8, r4, r3
 8000a48:	f000 fb36 	bl	80010b8 <_sbrk_r>
 8000a4c:	4580      	cmp	r8, r0
 8000a4e:	d13a      	bne.n	8000ac6 <_malloc_r+0xd2>
 8000a50:	6821      	ldr	r1, [r4, #0]
 8000a52:	3503      	adds	r5, #3
 8000a54:	1a6d      	subs	r5, r5, r1
 8000a56:	f025 0503 	bic.w	r5, r5, #3
 8000a5a:	3508      	adds	r5, #8
 8000a5c:	2d0c      	cmp	r5, #12
 8000a5e:	bf38      	it	cc
 8000a60:	250c      	movcc	r5, #12
 8000a62:	4629      	mov	r1, r5
 8000a64:	4638      	mov	r0, r7
 8000a66:	f7ff ffa5 	bl	80009b4 <sbrk_aligned>
 8000a6a:	3001      	adds	r0, #1
 8000a6c:	d02b      	beq.n	8000ac6 <_malloc_r+0xd2>
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	442b      	add	r3, r5
 8000a72:	6023      	str	r3, [r4, #0]
 8000a74:	e00e      	b.n	8000a94 <_malloc_r+0xa0>
 8000a76:	6822      	ldr	r2, [r4, #0]
 8000a78:	1b52      	subs	r2, r2, r5
 8000a7a:	d41e      	bmi.n	8000aba <_malloc_r+0xc6>
 8000a7c:	2a0b      	cmp	r2, #11
 8000a7e:	d916      	bls.n	8000aae <_malloc_r+0xba>
 8000a80:	1961      	adds	r1, r4, r5
 8000a82:	42a3      	cmp	r3, r4
 8000a84:	6025      	str	r5, [r4, #0]
 8000a86:	bf18      	it	ne
 8000a88:	6059      	strne	r1, [r3, #4]
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	bf08      	it	eq
 8000a8e:	6031      	streq	r1, [r6, #0]
 8000a90:	5162      	str	r2, [r4, r5]
 8000a92:	604b      	str	r3, [r1, #4]
 8000a94:	4638      	mov	r0, r7
 8000a96:	f104 060b 	add.w	r6, r4, #11
 8000a9a:	f000 fd83 	bl	80015a4 <__malloc_unlock>
 8000a9e:	f026 0607 	bic.w	r6, r6, #7
 8000aa2:	1d23      	adds	r3, r4, #4
 8000aa4:	1af2      	subs	r2, r6, r3
 8000aa6:	d0b6      	beq.n	8000a16 <_malloc_r+0x22>
 8000aa8:	1b9b      	subs	r3, r3, r6
 8000aaa:	50a3      	str	r3, [r4, r2]
 8000aac:	e7b3      	b.n	8000a16 <_malloc_r+0x22>
 8000aae:	6862      	ldr	r2, [r4, #4]
 8000ab0:	42a3      	cmp	r3, r4
 8000ab2:	bf0c      	ite	eq
 8000ab4:	6032      	streq	r2, [r6, #0]
 8000ab6:	605a      	strne	r2, [r3, #4]
 8000ab8:	e7ec      	b.n	8000a94 <_malloc_r+0xa0>
 8000aba:	4623      	mov	r3, r4
 8000abc:	6864      	ldr	r4, [r4, #4]
 8000abe:	e7b2      	b.n	8000a26 <_malloc_r+0x32>
 8000ac0:	4634      	mov	r4, r6
 8000ac2:	6876      	ldr	r6, [r6, #4]
 8000ac4:	e7b9      	b.n	8000a3a <_malloc_r+0x46>
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4638      	mov	r0, r7
 8000acc:	f000 fd6a 	bl	80015a4 <__malloc_unlock>
 8000ad0:	e7a1      	b.n	8000a16 <_malloc_r+0x22>
 8000ad2:	6025      	str	r5, [r4, #0]
 8000ad4:	e7de      	b.n	8000a94 <_malloc_r+0xa0>
 8000ad6:	bf00      	nop
 8000ad8:	20000088 	.word	0x20000088

08000adc <__sfputc_r>:
 8000adc:	6893      	ldr	r3, [r2, #8]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	b410      	push	{r4}
 8000ae4:	6093      	str	r3, [r2, #8]
 8000ae6:	da08      	bge.n	8000afa <__sfputc_r+0x1e>
 8000ae8:	6994      	ldr	r4, [r2, #24]
 8000aea:	42a3      	cmp	r3, r4
 8000aec:	db01      	blt.n	8000af2 <__sfputc_r+0x16>
 8000aee:	290a      	cmp	r1, #10
 8000af0:	d103      	bne.n	8000afa <__sfputc_r+0x1e>
 8000af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000af6:	f000 bb33 	b.w	8001160 <__swbuf_r>
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	1c58      	adds	r0, r3, #1
 8000afe:	6010      	str	r0, [r2, #0]
 8000b00:	7019      	strb	r1, [r3, #0]
 8000b02:	4608      	mov	r0, r1
 8000b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <__sfputs_r>:
 8000b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	460f      	mov	r7, r1
 8000b10:	4614      	mov	r4, r2
 8000b12:	18d5      	adds	r5, r2, r3
 8000b14:	42ac      	cmp	r4, r5
 8000b16:	d101      	bne.n	8000b1c <__sfputs_r+0x12>
 8000b18:	2000      	movs	r0, #0
 8000b1a:	e007      	b.n	8000b2c <__sfputs_r+0x22>
 8000b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b20:	463a      	mov	r2, r7
 8000b22:	4630      	mov	r0, r6
 8000b24:	f7ff ffda 	bl	8000adc <__sfputc_r>
 8000b28:	1c43      	adds	r3, r0, #1
 8000b2a:	d1f3      	bne.n	8000b14 <__sfputs_r+0xa>
 8000b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b30 <_vfiprintf_r>:
 8000b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b34:	460d      	mov	r5, r1
 8000b36:	b09d      	sub	sp, #116	; 0x74
 8000b38:	4614      	mov	r4, r2
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	4606      	mov	r6, r0
 8000b3e:	b118      	cbz	r0, 8000b48 <_vfiprintf_r+0x18>
 8000b40:	6983      	ldr	r3, [r0, #24]
 8000b42:	b90b      	cbnz	r3, 8000b48 <_vfiprintf_r+0x18>
 8000b44:	f7ff fe96 	bl	8000874 <__sinit>
 8000b48:	4b89      	ldr	r3, [pc, #548]	; (8000d70 <_vfiprintf_r+0x240>)
 8000b4a:	429d      	cmp	r5, r3
 8000b4c:	d11b      	bne.n	8000b86 <_vfiprintf_r+0x56>
 8000b4e:	6875      	ldr	r5, [r6, #4]
 8000b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b52:	07d9      	lsls	r1, r3, #31
 8000b54:	d405      	bmi.n	8000b62 <_vfiprintf_r+0x32>
 8000b56:	89ab      	ldrh	r3, [r5, #12]
 8000b58:	059a      	lsls	r2, r3, #22
 8000b5a:	d402      	bmi.n	8000b62 <_vfiprintf_r+0x32>
 8000b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b5e:	f7ff ff27 	bl	80009b0 <__retarget_lock_acquire_recursive>
 8000b62:	89ab      	ldrh	r3, [r5, #12]
 8000b64:	071b      	lsls	r3, r3, #28
 8000b66:	d501      	bpl.n	8000b6c <_vfiprintf_r+0x3c>
 8000b68:	692b      	ldr	r3, [r5, #16]
 8000b6a:	b9eb      	cbnz	r3, 8000ba8 <_vfiprintf_r+0x78>
 8000b6c:	4629      	mov	r1, r5
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f000 fb5a 	bl	8001228 <__swsetup_r>
 8000b74:	b1c0      	cbz	r0, 8000ba8 <_vfiprintf_r+0x78>
 8000b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b78:	07dc      	lsls	r4, r3, #31
 8000b7a:	d50e      	bpl.n	8000b9a <_vfiprintf_r+0x6a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	b01d      	add	sp, #116	; 0x74
 8000b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b86:	4b7b      	ldr	r3, [pc, #492]	; (8000d74 <_vfiprintf_r+0x244>)
 8000b88:	429d      	cmp	r5, r3
 8000b8a:	d101      	bne.n	8000b90 <_vfiprintf_r+0x60>
 8000b8c:	68b5      	ldr	r5, [r6, #8]
 8000b8e:	e7df      	b.n	8000b50 <_vfiprintf_r+0x20>
 8000b90:	4b79      	ldr	r3, [pc, #484]	; (8000d78 <_vfiprintf_r+0x248>)
 8000b92:	429d      	cmp	r5, r3
 8000b94:	bf08      	it	eq
 8000b96:	68f5      	ldreq	r5, [r6, #12]
 8000b98:	e7da      	b.n	8000b50 <_vfiprintf_r+0x20>
 8000b9a:	89ab      	ldrh	r3, [r5, #12]
 8000b9c:	0598      	lsls	r0, r3, #22
 8000b9e:	d4ed      	bmi.n	8000b7c <_vfiprintf_r+0x4c>
 8000ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ba2:	f7ff ff06 	bl	80009b2 <__retarget_lock_release_recursive>
 8000ba6:	e7e9      	b.n	8000b7c <_vfiprintf_r+0x4c>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	9309      	str	r3, [sp, #36]	; 0x24
 8000bac:	2320      	movs	r3, #32
 8000bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bb6:	2330      	movs	r3, #48	; 0x30
 8000bb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d7c <_vfiprintf_r+0x24c>
 8000bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bc0:	f04f 0901 	mov.w	r9, #1
 8000bc4:	4623      	mov	r3, r4
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bcc:	b10a      	cbz	r2, 8000bd2 <_vfiprintf_r+0xa2>
 8000bce:	2a25      	cmp	r2, #37	; 0x25
 8000bd0:	d1f9      	bne.n	8000bc6 <_vfiprintf_r+0x96>
 8000bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8000bd6:	d00b      	beq.n	8000bf0 <_vfiprintf_r+0xc0>
 8000bd8:	465b      	mov	r3, fp
 8000bda:	4622      	mov	r2, r4
 8000bdc:	4629      	mov	r1, r5
 8000bde:	4630      	mov	r0, r6
 8000be0:	f7ff ff93 	bl	8000b0a <__sfputs_r>
 8000be4:	3001      	adds	r0, #1
 8000be6:	f000 80aa 	beq.w	8000d3e <_vfiprintf_r+0x20e>
 8000bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bec:	445a      	add	r2, fp
 8000bee:	9209      	str	r2, [sp, #36]	; 0x24
 8000bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 80a2 	beq.w	8000d3e <_vfiprintf_r+0x20e>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c04:	f10a 0a01 	add.w	sl, sl, #1
 8000c08:	9304      	str	r3, [sp, #16]
 8000c0a:	9307      	str	r3, [sp, #28]
 8000c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c10:	931a      	str	r3, [sp, #104]	; 0x68
 8000c12:	4654      	mov	r4, sl
 8000c14:	2205      	movs	r2, #5
 8000c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c1a:	4858      	ldr	r0, [pc, #352]	; (8000d7c <_vfiprintf_r+0x24c>)
 8000c1c:	f7ff fb10 	bl	8000240 <memchr>
 8000c20:	9a04      	ldr	r2, [sp, #16]
 8000c22:	b9d8      	cbnz	r0, 8000c5c <_vfiprintf_r+0x12c>
 8000c24:	06d1      	lsls	r1, r2, #27
 8000c26:	bf44      	itt	mi
 8000c28:	2320      	movmi	r3, #32
 8000c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c2e:	0713      	lsls	r3, r2, #28
 8000c30:	bf44      	itt	mi
 8000c32:	232b      	movmi	r3, #43	; 0x2b
 8000c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c38:	f89a 3000 	ldrb.w	r3, [sl]
 8000c3c:	2b2a      	cmp	r3, #42	; 0x2a
 8000c3e:	d015      	beq.n	8000c6c <_vfiprintf_r+0x13c>
 8000c40:	9a07      	ldr	r2, [sp, #28]
 8000c42:	4654      	mov	r4, sl
 8000c44:	2000      	movs	r0, #0
 8000c46:	f04f 0c0a 	mov.w	ip, #10
 8000c4a:	4621      	mov	r1, r4
 8000c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c50:	3b30      	subs	r3, #48	; 0x30
 8000c52:	2b09      	cmp	r3, #9
 8000c54:	d94e      	bls.n	8000cf4 <_vfiprintf_r+0x1c4>
 8000c56:	b1b0      	cbz	r0, 8000c86 <_vfiprintf_r+0x156>
 8000c58:	9207      	str	r2, [sp, #28]
 8000c5a:	e014      	b.n	8000c86 <_vfiprintf_r+0x156>
 8000c5c:	eba0 0308 	sub.w	r3, r0, r8
 8000c60:	fa09 f303 	lsl.w	r3, r9, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	9304      	str	r3, [sp, #16]
 8000c68:	46a2      	mov	sl, r4
 8000c6a:	e7d2      	b.n	8000c12 <_vfiprintf_r+0xe2>
 8000c6c:	9b03      	ldr	r3, [sp, #12]
 8000c6e:	1d19      	adds	r1, r3, #4
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	9103      	str	r1, [sp, #12]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	bfbb      	ittet	lt
 8000c78:	425b      	neglt	r3, r3
 8000c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8000c7e:	9307      	strge	r3, [sp, #28]
 8000c80:	9307      	strlt	r3, [sp, #28]
 8000c82:	bfb8      	it	lt
 8000c84:	9204      	strlt	r2, [sp, #16]
 8000c86:	7823      	ldrb	r3, [r4, #0]
 8000c88:	2b2e      	cmp	r3, #46	; 0x2e
 8000c8a:	d10c      	bne.n	8000ca6 <_vfiprintf_r+0x176>
 8000c8c:	7863      	ldrb	r3, [r4, #1]
 8000c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8000c90:	d135      	bne.n	8000cfe <_vfiprintf_r+0x1ce>
 8000c92:	9b03      	ldr	r3, [sp, #12]
 8000c94:	1d1a      	adds	r2, r3, #4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	9203      	str	r2, [sp, #12]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bfb8      	it	lt
 8000c9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000ca2:	3402      	adds	r4, #2
 8000ca4:	9305      	str	r3, [sp, #20]
 8000ca6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000d8c <_vfiprintf_r+0x25c>
 8000caa:	7821      	ldrb	r1, [r4, #0]
 8000cac:	2203      	movs	r2, #3
 8000cae:	4650      	mov	r0, sl
 8000cb0:	f7ff fac6 	bl	8000240 <memchr>
 8000cb4:	b140      	cbz	r0, 8000cc8 <_vfiprintf_r+0x198>
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	eba0 000a 	sub.w	r0, r0, sl
 8000cbc:	fa03 f000 	lsl.w	r0, r3, r0
 8000cc0:	9b04      	ldr	r3, [sp, #16]
 8000cc2:	4303      	orrs	r3, r0
 8000cc4:	3401      	adds	r4, #1
 8000cc6:	9304      	str	r3, [sp, #16]
 8000cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ccc:	482c      	ldr	r0, [pc, #176]	; (8000d80 <_vfiprintf_r+0x250>)
 8000cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cd2:	2206      	movs	r2, #6
 8000cd4:	f7ff fab4 	bl	8000240 <memchr>
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d03f      	beq.n	8000d5c <_vfiprintf_r+0x22c>
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <_vfiprintf_r+0x254>)
 8000cde:	bb1b      	cbnz	r3, 8000d28 <_vfiprintf_r+0x1f8>
 8000ce0:	9b03      	ldr	r3, [sp, #12]
 8000ce2:	3307      	adds	r3, #7
 8000ce4:	f023 0307 	bic.w	r3, r3, #7
 8000ce8:	3308      	adds	r3, #8
 8000cea:	9303      	str	r3, [sp, #12]
 8000cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cee:	443b      	add	r3, r7
 8000cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8000cf2:	e767      	b.n	8000bc4 <_vfiprintf_r+0x94>
 8000cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	e7a5      	b.n	8000c4a <_vfiprintf_r+0x11a>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	3401      	adds	r4, #1
 8000d02:	9305      	str	r3, [sp, #20]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 0c0a 	mov.w	ip, #10
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d10:	3a30      	subs	r2, #48	; 0x30
 8000d12:	2a09      	cmp	r2, #9
 8000d14:	d903      	bls.n	8000d1e <_vfiprintf_r+0x1ee>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0c5      	beq.n	8000ca6 <_vfiprintf_r+0x176>
 8000d1a:	9105      	str	r1, [sp, #20]
 8000d1c:	e7c3      	b.n	8000ca6 <_vfiprintf_r+0x176>
 8000d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d22:	4604      	mov	r4, r0
 8000d24:	2301      	movs	r3, #1
 8000d26:	e7f0      	b.n	8000d0a <_vfiprintf_r+0x1da>
 8000d28:	ab03      	add	r3, sp, #12
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	462a      	mov	r2, r5
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <_vfiprintf_r+0x258>)
 8000d30:	a904      	add	r1, sp, #16
 8000d32:	4630      	mov	r0, r6
 8000d34:	f3af 8000 	nop.w
 8000d38:	4607      	mov	r7, r0
 8000d3a:	1c78      	adds	r0, r7, #1
 8000d3c:	d1d6      	bne.n	8000cec <_vfiprintf_r+0x1bc>
 8000d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d40:	07d9      	lsls	r1, r3, #31
 8000d42:	d405      	bmi.n	8000d50 <_vfiprintf_r+0x220>
 8000d44:	89ab      	ldrh	r3, [r5, #12]
 8000d46:	059a      	lsls	r2, r3, #22
 8000d48:	d402      	bmi.n	8000d50 <_vfiprintf_r+0x220>
 8000d4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d4c:	f7ff fe31 	bl	80009b2 <__retarget_lock_release_recursive>
 8000d50:	89ab      	ldrh	r3, [r5, #12]
 8000d52:	065b      	lsls	r3, r3, #25
 8000d54:	f53f af12 	bmi.w	8000b7c <_vfiprintf_r+0x4c>
 8000d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d5a:	e711      	b.n	8000b80 <_vfiprintf_r+0x50>
 8000d5c:	ab03      	add	r3, sp, #12
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	462a      	mov	r2, r5
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <_vfiprintf_r+0x258>)
 8000d64:	a904      	add	r1, sp, #16
 8000d66:	4630      	mov	r0, r6
 8000d68:	f000 f880 	bl	8000e6c <_printf_i>
 8000d6c:	e7e4      	b.n	8000d38 <_vfiprintf_r+0x208>
 8000d6e:	bf00      	nop
 8000d70:	08001704 	.word	0x08001704
 8000d74:	08001724 	.word	0x08001724
 8000d78:	080016e4 	.word	0x080016e4
 8000d7c:	08001744 	.word	0x08001744
 8000d80:	0800174e 	.word	0x0800174e
 8000d84:	00000000 	.word	0x00000000
 8000d88:	08000b0b 	.word	0x08000b0b
 8000d8c:	0800174a 	.word	0x0800174a

08000d90 <_printf_common>:
 8000d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d94:	4616      	mov	r6, r2
 8000d96:	4699      	mov	r9, r3
 8000d98:	688a      	ldr	r2, [r1, #8]
 8000d9a:	690b      	ldr	r3, [r1, #16]
 8000d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	bfb8      	it	lt
 8000da4:	4613      	movlt	r3, r2
 8000da6:	6033      	str	r3, [r6, #0]
 8000da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dac:	4607      	mov	r7, r0
 8000dae:	460c      	mov	r4, r1
 8000db0:	b10a      	cbz	r2, 8000db6 <_printf_common+0x26>
 8000db2:	3301      	adds	r3, #1
 8000db4:	6033      	str	r3, [r6, #0]
 8000db6:	6823      	ldr	r3, [r4, #0]
 8000db8:	0699      	lsls	r1, r3, #26
 8000dba:	bf42      	ittt	mi
 8000dbc:	6833      	ldrmi	r3, [r6, #0]
 8000dbe:	3302      	addmi	r3, #2
 8000dc0:	6033      	strmi	r3, [r6, #0]
 8000dc2:	6825      	ldr	r5, [r4, #0]
 8000dc4:	f015 0506 	ands.w	r5, r5, #6
 8000dc8:	d106      	bne.n	8000dd8 <_printf_common+0x48>
 8000dca:	f104 0a19 	add.w	sl, r4, #25
 8000dce:	68e3      	ldr	r3, [r4, #12]
 8000dd0:	6832      	ldr	r2, [r6, #0]
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	42ab      	cmp	r3, r5
 8000dd6:	dc26      	bgt.n	8000e26 <_printf_common+0x96>
 8000dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ddc:	1e13      	subs	r3, r2, #0
 8000dde:	6822      	ldr	r2, [r4, #0]
 8000de0:	bf18      	it	ne
 8000de2:	2301      	movne	r3, #1
 8000de4:	0692      	lsls	r2, r2, #26
 8000de6:	d42b      	bmi.n	8000e40 <_printf_common+0xb0>
 8000de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dec:	4649      	mov	r1, r9
 8000dee:	4638      	mov	r0, r7
 8000df0:	47c0      	blx	r8
 8000df2:	3001      	adds	r0, #1
 8000df4:	d01e      	beq.n	8000e34 <_printf_common+0xa4>
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	68e5      	ldr	r5, [r4, #12]
 8000dfa:	6832      	ldr	r2, [r6, #0]
 8000dfc:	f003 0306 	and.w	r3, r3, #6
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	bf08      	it	eq
 8000e04:	1aad      	subeq	r5, r5, r2
 8000e06:	68a3      	ldr	r3, [r4, #8]
 8000e08:	6922      	ldr	r2, [r4, #16]
 8000e0a:	bf0c      	ite	eq
 8000e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e10:	2500      	movne	r5, #0
 8000e12:	4293      	cmp	r3, r2
 8000e14:	bfc4      	itt	gt
 8000e16:	1a9b      	subgt	r3, r3, r2
 8000e18:	18ed      	addgt	r5, r5, r3
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	341a      	adds	r4, #26
 8000e1e:	42b5      	cmp	r5, r6
 8000e20:	d11a      	bne.n	8000e58 <_printf_common+0xc8>
 8000e22:	2000      	movs	r0, #0
 8000e24:	e008      	b.n	8000e38 <_printf_common+0xa8>
 8000e26:	2301      	movs	r3, #1
 8000e28:	4652      	mov	r2, sl
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	47c0      	blx	r8
 8000e30:	3001      	adds	r0, #1
 8000e32:	d103      	bne.n	8000e3c <_printf_common+0xac>
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3c:	3501      	adds	r5, #1
 8000e3e:	e7c6      	b.n	8000dce <_printf_common+0x3e>
 8000e40:	18e1      	adds	r1, r4, r3
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	2030      	movs	r0, #48	; 0x30
 8000e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e4a:	4422      	add	r2, r4
 8000e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e54:	3302      	adds	r3, #2
 8000e56:	e7c7      	b.n	8000de8 <_printf_common+0x58>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	4622      	mov	r2, r4
 8000e5c:	4649      	mov	r1, r9
 8000e5e:	4638      	mov	r0, r7
 8000e60:	47c0      	blx	r8
 8000e62:	3001      	adds	r0, #1
 8000e64:	d0e6      	beq.n	8000e34 <_printf_common+0xa4>
 8000e66:	3601      	adds	r6, #1
 8000e68:	e7d9      	b.n	8000e1e <_printf_common+0x8e>
	...

08000e6c <_printf_i>:
 8000e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e70:	7e0f      	ldrb	r7, [r1, #24]
 8000e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e74:	2f78      	cmp	r7, #120	; 0x78
 8000e76:	4691      	mov	r9, r2
 8000e78:	4680      	mov	r8, r0
 8000e7a:	460c      	mov	r4, r1
 8000e7c:	469a      	mov	sl, r3
 8000e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e82:	d807      	bhi.n	8000e94 <_printf_i+0x28>
 8000e84:	2f62      	cmp	r7, #98	; 0x62
 8000e86:	d80a      	bhi.n	8000e9e <_printf_i+0x32>
 8000e88:	2f00      	cmp	r7, #0
 8000e8a:	f000 80d8 	beq.w	800103e <_printf_i+0x1d2>
 8000e8e:	2f58      	cmp	r7, #88	; 0x58
 8000e90:	f000 80a3 	beq.w	8000fda <_printf_i+0x16e>
 8000e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e9c:	e03a      	b.n	8000f14 <_printf_i+0xa8>
 8000e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ea2:	2b15      	cmp	r3, #21
 8000ea4:	d8f6      	bhi.n	8000e94 <_printf_i+0x28>
 8000ea6:	a101      	add	r1, pc, #4	; (adr r1, 8000eac <_printf_i+0x40>)
 8000ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000eac:	08000f05 	.word	0x08000f05
 8000eb0:	08000f19 	.word	0x08000f19
 8000eb4:	08000e95 	.word	0x08000e95
 8000eb8:	08000e95 	.word	0x08000e95
 8000ebc:	08000e95 	.word	0x08000e95
 8000ec0:	08000e95 	.word	0x08000e95
 8000ec4:	08000f19 	.word	0x08000f19
 8000ec8:	08000e95 	.word	0x08000e95
 8000ecc:	08000e95 	.word	0x08000e95
 8000ed0:	08000e95 	.word	0x08000e95
 8000ed4:	08000e95 	.word	0x08000e95
 8000ed8:	08001025 	.word	0x08001025
 8000edc:	08000f49 	.word	0x08000f49
 8000ee0:	08001007 	.word	0x08001007
 8000ee4:	08000e95 	.word	0x08000e95
 8000ee8:	08000e95 	.word	0x08000e95
 8000eec:	08001047 	.word	0x08001047
 8000ef0:	08000e95 	.word	0x08000e95
 8000ef4:	08000f49 	.word	0x08000f49
 8000ef8:	08000e95 	.word	0x08000e95
 8000efc:	08000e95 	.word	0x08000e95
 8000f00:	0800100f 	.word	0x0800100f
 8000f04:	682b      	ldr	r3, [r5, #0]
 8000f06:	1d1a      	adds	r2, r3, #4
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	602a      	str	r2, [r5, #0]
 8000f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f14:	2301      	movs	r3, #1
 8000f16:	e0a3      	b.n	8001060 <_printf_i+0x1f4>
 8000f18:	6820      	ldr	r0, [r4, #0]
 8000f1a:	6829      	ldr	r1, [r5, #0]
 8000f1c:	0606      	lsls	r6, r0, #24
 8000f1e:	f101 0304 	add.w	r3, r1, #4
 8000f22:	d50a      	bpl.n	8000f3a <_printf_i+0xce>
 8000f24:	680e      	ldr	r6, [r1, #0]
 8000f26:	602b      	str	r3, [r5, #0]
 8000f28:	2e00      	cmp	r6, #0
 8000f2a:	da03      	bge.n	8000f34 <_printf_i+0xc8>
 8000f2c:	232d      	movs	r3, #45	; 0x2d
 8000f2e:	4276      	negs	r6, r6
 8000f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f34:	485e      	ldr	r0, [pc, #376]	; (80010b0 <_printf_i+0x244>)
 8000f36:	230a      	movs	r3, #10
 8000f38:	e019      	b.n	8000f6e <_printf_i+0x102>
 8000f3a:	680e      	ldr	r6, [r1, #0]
 8000f3c:	602b      	str	r3, [r5, #0]
 8000f3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f42:	bf18      	it	ne
 8000f44:	b236      	sxthne	r6, r6
 8000f46:	e7ef      	b.n	8000f28 <_printf_i+0xbc>
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	1d19      	adds	r1, r3, #4
 8000f4e:	6029      	str	r1, [r5, #0]
 8000f50:	0601      	lsls	r1, r0, #24
 8000f52:	d501      	bpl.n	8000f58 <_printf_i+0xec>
 8000f54:	681e      	ldr	r6, [r3, #0]
 8000f56:	e002      	b.n	8000f5e <_printf_i+0xf2>
 8000f58:	0646      	lsls	r6, r0, #25
 8000f5a:	d5fb      	bpl.n	8000f54 <_printf_i+0xe8>
 8000f5c:	881e      	ldrh	r6, [r3, #0]
 8000f5e:	4854      	ldr	r0, [pc, #336]	; (80010b0 <_printf_i+0x244>)
 8000f60:	2f6f      	cmp	r7, #111	; 0x6f
 8000f62:	bf0c      	ite	eq
 8000f64:	2308      	moveq	r3, #8
 8000f66:	230a      	movne	r3, #10
 8000f68:	2100      	movs	r1, #0
 8000f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f6e:	6865      	ldr	r5, [r4, #4]
 8000f70:	60a5      	str	r5, [r4, #8]
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	bfa2      	ittt	ge
 8000f76:	6821      	ldrge	r1, [r4, #0]
 8000f78:	f021 0104 	bicge.w	r1, r1, #4
 8000f7c:	6021      	strge	r1, [r4, #0]
 8000f7e:	b90e      	cbnz	r6, 8000f84 <_printf_i+0x118>
 8000f80:	2d00      	cmp	r5, #0
 8000f82:	d04d      	beq.n	8001020 <_printf_i+0x1b4>
 8000f84:	4615      	mov	r5, r2
 8000f86:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f8a:	fb03 6711 	mls	r7, r3, r1, r6
 8000f8e:	5dc7      	ldrb	r7, [r0, r7]
 8000f90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f94:	4637      	mov	r7, r6
 8000f96:	42bb      	cmp	r3, r7
 8000f98:	460e      	mov	r6, r1
 8000f9a:	d9f4      	bls.n	8000f86 <_printf_i+0x11a>
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d10b      	bne.n	8000fb8 <_printf_i+0x14c>
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	07de      	lsls	r6, r3, #31
 8000fa4:	d508      	bpl.n	8000fb8 <_printf_i+0x14c>
 8000fa6:	6923      	ldr	r3, [r4, #16]
 8000fa8:	6861      	ldr	r1, [r4, #4]
 8000faa:	4299      	cmp	r1, r3
 8000fac:	bfde      	ittt	le
 8000fae:	2330      	movle	r3, #48	; 0x30
 8000fb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fb4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000fb8:	1b52      	subs	r2, r2, r5
 8000fba:	6122      	str	r2, [r4, #16]
 8000fbc:	f8cd a000 	str.w	sl, [sp]
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	aa03      	add	r2, sp, #12
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	f7ff fee2 	bl	8000d90 <_printf_common>
 8000fcc:	3001      	adds	r0, #1
 8000fce:	d14c      	bne.n	800106a <_printf_i+0x1fe>
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd4:	b004      	add	sp, #16
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	4835      	ldr	r0, [pc, #212]	; (80010b0 <_printf_i+0x244>)
 8000fdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000fe0:	6829      	ldr	r1, [r5, #0]
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	f851 6b04 	ldr.w	r6, [r1], #4
 8000fe8:	6029      	str	r1, [r5, #0]
 8000fea:	061d      	lsls	r5, r3, #24
 8000fec:	d514      	bpl.n	8001018 <_printf_i+0x1ac>
 8000fee:	07df      	lsls	r7, r3, #31
 8000ff0:	bf44      	itt	mi
 8000ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8000ff6:	6023      	strmi	r3, [r4, #0]
 8000ff8:	b91e      	cbnz	r6, 8001002 <_printf_i+0x196>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	f023 0320 	bic.w	r3, r3, #32
 8001000:	6023      	str	r3, [r4, #0]
 8001002:	2310      	movs	r3, #16
 8001004:	e7b0      	b.n	8000f68 <_printf_i+0xfc>
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	6023      	str	r3, [r4, #0]
 800100e:	2378      	movs	r3, #120	; 0x78
 8001010:	4828      	ldr	r0, [pc, #160]	; (80010b4 <_printf_i+0x248>)
 8001012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001016:	e7e3      	b.n	8000fe0 <_printf_i+0x174>
 8001018:	0659      	lsls	r1, r3, #25
 800101a:	bf48      	it	mi
 800101c:	b2b6      	uxthmi	r6, r6
 800101e:	e7e6      	b.n	8000fee <_printf_i+0x182>
 8001020:	4615      	mov	r5, r2
 8001022:	e7bb      	b.n	8000f9c <_printf_i+0x130>
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	6826      	ldr	r6, [r4, #0]
 8001028:	6961      	ldr	r1, [r4, #20]
 800102a:	1d18      	adds	r0, r3, #4
 800102c:	6028      	str	r0, [r5, #0]
 800102e:	0635      	lsls	r5, r6, #24
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	d501      	bpl.n	8001038 <_printf_i+0x1cc>
 8001034:	6019      	str	r1, [r3, #0]
 8001036:	e002      	b.n	800103e <_printf_i+0x1d2>
 8001038:	0670      	lsls	r0, r6, #25
 800103a:	d5fb      	bpl.n	8001034 <_printf_i+0x1c8>
 800103c:	8019      	strh	r1, [r3, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	6123      	str	r3, [r4, #16]
 8001042:	4615      	mov	r5, r2
 8001044:	e7ba      	b.n	8000fbc <_printf_i+0x150>
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	1d1a      	adds	r2, r3, #4
 800104a:	602a      	str	r2, [r5, #0]
 800104c:	681d      	ldr	r5, [r3, #0]
 800104e:	6862      	ldr	r2, [r4, #4]
 8001050:	2100      	movs	r1, #0
 8001052:	4628      	mov	r0, r5
 8001054:	f7ff f8f4 	bl	8000240 <memchr>
 8001058:	b108      	cbz	r0, 800105e <_printf_i+0x1f2>
 800105a:	1b40      	subs	r0, r0, r5
 800105c:	6060      	str	r0, [r4, #4]
 800105e:	6863      	ldr	r3, [r4, #4]
 8001060:	6123      	str	r3, [r4, #16]
 8001062:	2300      	movs	r3, #0
 8001064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001068:	e7a8      	b.n	8000fbc <_printf_i+0x150>
 800106a:	6923      	ldr	r3, [r4, #16]
 800106c:	462a      	mov	r2, r5
 800106e:	4649      	mov	r1, r9
 8001070:	4640      	mov	r0, r8
 8001072:	47d0      	blx	sl
 8001074:	3001      	adds	r0, #1
 8001076:	d0ab      	beq.n	8000fd0 <_printf_i+0x164>
 8001078:	6823      	ldr	r3, [r4, #0]
 800107a:	079b      	lsls	r3, r3, #30
 800107c:	d413      	bmi.n	80010a6 <_printf_i+0x23a>
 800107e:	68e0      	ldr	r0, [r4, #12]
 8001080:	9b03      	ldr	r3, [sp, #12]
 8001082:	4298      	cmp	r0, r3
 8001084:	bfb8      	it	lt
 8001086:	4618      	movlt	r0, r3
 8001088:	e7a4      	b.n	8000fd4 <_printf_i+0x168>
 800108a:	2301      	movs	r3, #1
 800108c:	4632      	mov	r2, r6
 800108e:	4649      	mov	r1, r9
 8001090:	4640      	mov	r0, r8
 8001092:	47d0      	blx	sl
 8001094:	3001      	adds	r0, #1
 8001096:	d09b      	beq.n	8000fd0 <_printf_i+0x164>
 8001098:	3501      	adds	r5, #1
 800109a:	68e3      	ldr	r3, [r4, #12]
 800109c:	9903      	ldr	r1, [sp, #12]
 800109e:	1a5b      	subs	r3, r3, r1
 80010a0:	42ab      	cmp	r3, r5
 80010a2:	dcf2      	bgt.n	800108a <_printf_i+0x21e>
 80010a4:	e7eb      	b.n	800107e <_printf_i+0x212>
 80010a6:	2500      	movs	r5, #0
 80010a8:	f104 0619 	add.w	r6, r4, #25
 80010ac:	e7f5      	b.n	800109a <_printf_i+0x22e>
 80010ae:	bf00      	nop
 80010b0:	08001755 	.word	0x08001755
 80010b4:	08001766 	.word	0x08001766

080010b8 <_sbrk_r>:
 80010b8:	b538      	push	{r3, r4, r5, lr}
 80010ba:	4d06      	ldr	r5, [pc, #24]	; (80010d4 <_sbrk_r+0x1c>)
 80010bc:	2300      	movs	r3, #0
 80010be:	4604      	mov	r4, r0
 80010c0:	4608      	mov	r0, r1
 80010c2:	602b      	str	r3, [r5, #0]
 80010c4:	f7ff f9e4 	bl	8000490 <_sbrk>
 80010c8:	1c43      	adds	r3, r0, #1
 80010ca:	d102      	bne.n	80010d2 <_sbrk_r+0x1a>
 80010cc:	682b      	ldr	r3, [r5, #0]
 80010ce:	b103      	cbz	r3, 80010d2 <_sbrk_r+0x1a>
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	bd38      	pop	{r3, r4, r5, pc}
 80010d4:	20000090 	.word	0x20000090

080010d8 <__sread>:
 80010d8:	b510      	push	{r4, lr}
 80010da:	460c      	mov	r4, r1
 80010dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e0:	f000 fab2 	bl	8001648 <_read_r>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	bfab      	itete	ge
 80010e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80010ea:	89a3      	ldrhlt	r3, [r4, #12]
 80010ec:	181b      	addge	r3, r3, r0
 80010ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80010f2:	bfac      	ite	ge
 80010f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80010f6:	81a3      	strhlt	r3, [r4, #12]
 80010f8:	bd10      	pop	{r4, pc}

080010fa <__swrite>:
 80010fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010fe:	461f      	mov	r7, r3
 8001100:	898b      	ldrh	r3, [r1, #12]
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	4605      	mov	r5, r0
 8001106:	460c      	mov	r4, r1
 8001108:	4616      	mov	r6, r2
 800110a:	d505      	bpl.n	8001118 <__swrite+0x1e>
 800110c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001110:	2302      	movs	r3, #2
 8001112:	2200      	movs	r2, #0
 8001114:	f000 f9c8 	bl	80014a8 <_lseek_r>
 8001118:	89a3      	ldrh	r3, [r4, #12]
 800111a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800111e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001122:	81a3      	strh	r3, [r4, #12]
 8001124:	4632      	mov	r2, r6
 8001126:	463b      	mov	r3, r7
 8001128:	4628      	mov	r0, r5
 800112a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800112e:	f000 b869 	b.w	8001204 <_write_r>

08001132 <__sseek>:
 8001132:	b510      	push	{r4, lr}
 8001134:	460c      	mov	r4, r1
 8001136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800113a:	f000 f9b5 	bl	80014a8 <_lseek_r>
 800113e:	1c43      	adds	r3, r0, #1
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	bf15      	itete	ne
 8001144:	6560      	strne	r0, [r4, #84]	; 0x54
 8001146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800114a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800114e:	81a3      	strheq	r3, [r4, #12]
 8001150:	bf18      	it	ne
 8001152:	81a3      	strhne	r3, [r4, #12]
 8001154:	bd10      	pop	{r4, pc}

08001156 <__sclose>:
 8001156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800115a:	f000 b8d3 	b.w	8001304 <_close_r>
	...

08001160 <__swbuf_r>:
 8001160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001162:	460e      	mov	r6, r1
 8001164:	4614      	mov	r4, r2
 8001166:	4605      	mov	r5, r0
 8001168:	b118      	cbz	r0, 8001172 <__swbuf_r+0x12>
 800116a:	6983      	ldr	r3, [r0, #24]
 800116c:	b90b      	cbnz	r3, 8001172 <__swbuf_r+0x12>
 800116e:	f7ff fb81 	bl	8000874 <__sinit>
 8001172:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <__swbuf_r+0x98>)
 8001174:	429c      	cmp	r4, r3
 8001176:	d12b      	bne.n	80011d0 <__swbuf_r+0x70>
 8001178:	686c      	ldr	r4, [r5, #4]
 800117a:	69a3      	ldr	r3, [r4, #24]
 800117c:	60a3      	str	r3, [r4, #8]
 800117e:	89a3      	ldrh	r3, [r4, #12]
 8001180:	071a      	lsls	r2, r3, #28
 8001182:	d52f      	bpl.n	80011e4 <__swbuf_r+0x84>
 8001184:	6923      	ldr	r3, [r4, #16]
 8001186:	b36b      	cbz	r3, 80011e4 <__swbuf_r+0x84>
 8001188:	6923      	ldr	r3, [r4, #16]
 800118a:	6820      	ldr	r0, [r4, #0]
 800118c:	1ac0      	subs	r0, r0, r3
 800118e:	6963      	ldr	r3, [r4, #20]
 8001190:	b2f6      	uxtb	r6, r6
 8001192:	4283      	cmp	r3, r0
 8001194:	4637      	mov	r7, r6
 8001196:	dc04      	bgt.n	80011a2 <__swbuf_r+0x42>
 8001198:	4621      	mov	r1, r4
 800119a:	4628      	mov	r0, r5
 800119c:	f000 f948 	bl	8001430 <_fflush_r>
 80011a0:	bb30      	cbnz	r0, 80011f0 <__swbuf_r+0x90>
 80011a2:	68a3      	ldr	r3, [r4, #8]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	60a3      	str	r3, [r4, #8]
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	6022      	str	r2, [r4, #0]
 80011ae:	701e      	strb	r6, [r3, #0]
 80011b0:	6963      	ldr	r3, [r4, #20]
 80011b2:	3001      	adds	r0, #1
 80011b4:	4283      	cmp	r3, r0
 80011b6:	d004      	beq.n	80011c2 <__swbuf_r+0x62>
 80011b8:	89a3      	ldrh	r3, [r4, #12]
 80011ba:	07db      	lsls	r3, r3, #31
 80011bc:	d506      	bpl.n	80011cc <__swbuf_r+0x6c>
 80011be:	2e0a      	cmp	r6, #10
 80011c0:	d104      	bne.n	80011cc <__swbuf_r+0x6c>
 80011c2:	4621      	mov	r1, r4
 80011c4:	4628      	mov	r0, r5
 80011c6:	f000 f933 	bl	8001430 <_fflush_r>
 80011ca:	b988      	cbnz	r0, 80011f0 <__swbuf_r+0x90>
 80011cc:	4638      	mov	r0, r7
 80011ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <__swbuf_r+0x9c>)
 80011d2:	429c      	cmp	r4, r3
 80011d4:	d101      	bne.n	80011da <__swbuf_r+0x7a>
 80011d6:	68ac      	ldr	r4, [r5, #8]
 80011d8:	e7cf      	b.n	800117a <__swbuf_r+0x1a>
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <__swbuf_r+0xa0>)
 80011dc:	429c      	cmp	r4, r3
 80011de:	bf08      	it	eq
 80011e0:	68ec      	ldreq	r4, [r5, #12]
 80011e2:	e7ca      	b.n	800117a <__swbuf_r+0x1a>
 80011e4:	4621      	mov	r1, r4
 80011e6:	4628      	mov	r0, r5
 80011e8:	f000 f81e 	bl	8001228 <__swsetup_r>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d0cb      	beq.n	8001188 <__swbuf_r+0x28>
 80011f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80011f4:	e7ea      	b.n	80011cc <__swbuf_r+0x6c>
 80011f6:	bf00      	nop
 80011f8:	08001704 	.word	0x08001704
 80011fc:	08001724 	.word	0x08001724
 8001200:	080016e4 	.word	0x080016e4

08001204 <_write_r>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4d07      	ldr	r5, [pc, #28]	; (8001224 <_write_r+0x20>)
 8001208:	4604      	mov	r4, r0
 800120a:	4608      	mov	r0, r1
 800120c:	4611      	mov	r1, r2
 800120e:	2200      	movs	r2, #0
 8001210:	602a      	str	r2, [r5, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	f7ff f8eb 	bl	80003ee <_write>
 8001218:	1c43      	adds	r3, r0, #1
 800121a:	d102      	bne.n	8001222 <_write_r+0x1e>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	b103      	cbz	r3, 8001222 <_write_r+0x1e>
 8001220:	6023      	str	r3, [r4, #0]
 8001222:	bd38      	pop	{r3, r4, r5, pc}
 8001224:	20000090 	.word	0x20000090

08001228 <__swsetup_r>:
 8001228:	4b32      	ldr	r3, [pc, #200]	; (80012f4 <__swsetup_r+0xcc>)
 800122a:	b570      	push	{r4, r5, r6, lr}
 800122c:	681d      	ldr	r5, [r3, #0]
 800122e:	4606      	mov	r6, r0
 8001230:	460c      	mov	r4, r1
 8001232:	b125      	cbz	r5, 800123e <__swsetup_r+0x16>
 8001234:	69ab      	ldr	r3, [r5, #24]
 8001236:	b913      	cbnz	r3, 800123e <__swsetup_r+0x16>
 8001238:	4628      	mov	r0, r5
 800123a:	f7ff fb1b 	bl	8000874 <__sinit>
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <__swsetup_r+0xd0>)
 8001240:	429c      	cmp	r4, r3
 8001242:	d10f      	bne.n	8001264 <__swsetup_r+0x3c>
 8001244:	686c      	ldr	r4, [r5, #4]
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800124c:	0719      	lsls	r1, r3, #28
 800124e:	d42c      	bmi.n	80012aa <__swsetup_r+0x82>
 8001250:	06dd      	lsls	r5, r3, #27
 8001252:	d411      	bmi.n	8001278 <__swsetup_r+0x50>
 8001254:	2309      	movs	r3, #9
 8001256:	6033      	str	r3, [r6, #0]
 8001258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800125c:	81a3      	strh	r3, [r4, #12]
 800125e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001262:	e03e      	b.n	80012e2 <__swsetup_r+0xba>
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <__swsetup_r+0xd4>)
 8001266:	429c      	cmp	r4, r3
 8001268:	d101      	bne.n	800126e <__swsetup_r+0x46>
 800126a:	68ac      	ldr	r4, [r5, #8]
 800126c:	e7eb      	b.n	8001246 <__swsetup_r+0x1e>
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <__swsetup_r+0xd8>)
 8001270:	429c      	cmp	r4, r3
 8001272:	bf08      	it	eq
 8001274:	68ec      	ldreq	r4, [r5, #12]
 8001276:	e7e6      	b.n	8001246 <__swsetup_r+0x1e>
 8001278:	0758      	lsls	r0, r3, #29
 800127a:	d512      	bpl.n	80012a2 <__swsetup_r+0x7a>
 800127c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800127e:	b141      	cbz	r1, 8001292 <__swsetup_r+0x6a>
 8001280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001284:	4299      	cmp	r1, r3
 8001286:	d002      	beq.n	800128e <__swsetup_r+0x66>
 8001288:	4630      	mov	r0, r6
 800128a:	f000 f991 	bl	80015b0 <_free_r>
 800128e:	2300      	movs	r3, #0
 8001290:	6363      	str	r3, [r4, #52]	; 0x34
 8001292:	89a3      	ldrh	r3, [r4, #12]
 8001294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001298:	81a3      	strh	r3, [r4, #12]
 800129a:	2300      	movs	r3, #0
 800129c:	6063      	str	r3, [r4, #4]
 800129e:	6923      	ldr	r3, [r4, #16]
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	81a3      	strh	r3, [r4, #12]
 80012aa:	6923      	ldr	r3, [r4, #16]
 80012ac:	b94b      	cbnz	r3, 80012c2 <__swsetup_r+0x9a>
 80012ae:	89a3      	ldrh	r3, [r4, #12]
 80012b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b8:	d003      	beq.n	80012c2 <__swsetup_r+0x9a>
 80012ba:	4621      	mov	r1, r4
 80012bc:	4630      	mov	r0, r6
 80012be:	f000 f92b 	bl	8001518 <__smakebuf_r>
 80012c2:	89a0      	ldrh	r0, [r4, #12]
 80012c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012c8:	f010 0301 	ands.w	r3, r0, #1
 80012cc:	d00a      	beq.n	80012e4 <__swsetup_r+0xbc>
 80012ce:	2300      	movs	r3, #0
 80012d0:	60a3      	str	r3, [r4, #8]
 80012d2:	6963      	ldr	r3, [r4, #20]
 80012d4:	425b      	negs	r3, r3
 80012d6:	61a3      	str	r3, [r4, #24]
 80012d8:	6923      	ldr	r3, [r4, #16]
 80012da:	b943      	cbnz	r3, 80012ee <__swsetup_r+0xc6>
 80012dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80012e0:	d1ba      	bne.n	8001258 <__swsetup_r+0x30>
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	0781      	lsls	r1, r0, #30
 80012e6:	bf58      	it	pl
 80012e8:	6963      	ldrpl	r3, [r4, #20]
 80012ea:	60a3      	str	r3, [r4, #8]
 80012ec:	e7f4      	b.n	80012d8 <__swsetup_r+0xb0>
 80012ee:	2000      	movs	r0, #0
 80012f0:	e7f7      	b.n	80012e2 <__swsetup_r+0xba>
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000
 80012f8:	08001704 	.word	0x08001704
 80012fc:	08001724 	.word	0x08001724
 8001300:	080016e4 	.word	0x080016e4

08001304 <_close_r>:
 8001304:	b538      	push	{r3, r4, r5, lr}
 8001306:	4d06      	ldr	r5, [pc, #24]	; (8001320 <_close_r+0x1c>)
 8001308:	2300      	movs	r3, #0
 800130a:	4604      	mov	r4, r0
 800130c:	4608      	mov	r0, r1
 800130e:	602b      	str	r3, [r5, #0]
 8001310:	f7ff f889 	bl	8000426 <_close>
 8001314:	1c43      	adds	r3, r0, #1
 8001316:	d102      	bne.n	800131e <_close_r+0x1a>
 8001318:	682b      	ldr	r3, [r5, #0]
 800131a:	b103      	cbz	r3, 800131e <_close_r+0x1a>
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	bd38      	pop	{r3, r4, r5, pc}
 8001320:	20000090 	.word	0x20000090

08001324 <__sflush_r>:
 8001324:	898a      	ldrh	r2, [r1, #12]
 8001326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800132a:	4605      	mov	r5, r0
 800132c:	0710      	lsls	r0, r2, #28
 800132e:	460c      	mov	r4, r1
 8001330:	d458      	bmi.n	80013e4 <__sflush_r+0xc0>
 8001332:	684b      	ldr	r3, [r1, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	dc05      	bgt.n	8001344 <__sflush_r+0x20>
 8001338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	dc02      	bgt.n	8001344 <__sflush_r+0x20>
 800133e:	2000      	movs	r0, #0
 8001340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001346:	2e00      	cmp	r6, #0
 8001348:	d0f9      	beq.n	800133e <__sflush_r+0x1a>
 800134a:	2300      	movs	r3, #0
 800134c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001350:	682f      	ldr	r7, [r5, #0]
 8001352:	602b      	str	r3, [r5, #0]
 8001354:	d032      	beq.n	80013bc <__sflush_r+0x98>
 8001356:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	075a      	lsls	r2, r3, #29
 800135c:	d505      	bpl.n	800136a <__sflush_r+0x46>
 800135e:	6863      	ldr	r3, [r4, #4]
 8001360:	1ac0      	subs	r0, r0, r3
 8001362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001364:	b10b      	cbz	r3, 800136a <__sflush_r+0x46>
 8001366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001368:	1ac0      	subs	r0, r0, r3
 800136a:	2300      	movs	r3, #0
 800136c:	4602      	mov	r2, r0
 800136e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001370:	6a21      	ldr	r1, [r4, #32]
 8001372:	4628      	mov	r0, r5
 8001374:	47b0      	blx	r6
 8001376:	1c43      	adds	r3, r0, #1
 8001378:	89a3      	ldrh	r3, [r4, #12]
 800137a:	d106      	bne.n	800138a <__sflush_r+0x66>
 800137c:	6829      	ldr	r1, [r5, #0]
 800137e:	291d      	cmp	r1, #29
 8001380:	d82c      	bhi.n	80013dc <__sflush_r+0xb8>
 8001382:	4a2a      	ldr	r2, [pc, #168]	; (800142c <__sflush_r+0x108>)
 8001384:	40ca      	lsrs	r2, r1
 8001386:	07d6      	lsls	r6, r2, #31
 8001388:	d528      	bpl.n	80013dc <__sflush_r+0xb8>
 800138a:	2200      	movs	r2, #0
 800138c:	6062      	str	r2, [r4, #4]
 800138e:	04d9      	lsls	r1, r3, #19
 8001390:	6922      	ldr	r2, [r4, #16]
 8001392:	6022      	str	r2, [r4, #0]
 8001394:	d504      	bpl.n	80013a0 <__sflush_r+0x7c>
 8001396:	1c42      	adds	r2, r0, #1
 8001398:	d101      	bne.n	800139e <__sflush_r+0x7a>
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	b903      	cbnz	r3, 80013a0 <__sflush_r+0x7c>
 800139e:	6560      	str	r0, [r4, #84]	; 0x54
 80013a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013a2:	602f      	str	r7, [r5, #0]
 80013a4:	2900      	cmp	r1, #0
 80013a6:	d0ca      	beq.n	800133e <__sflush_r+0x1a>
 80013a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013ac:	4299      	cmp	r1, r3
 80013ae:	d002      	beq.n	80013b6 <__sflush_r+0x92>
 80013b0:	4628      	mov	r0, r5
 80013b2:	f000 f8fd 	bl	80015b0 <_free_r>
 80013b6:	2000      	movs	r0, #0
 80013b8:	6360      	str	r0, [r4, #52]	; 0x34
 80013ba:	e7c1      	b.n	8001340 <__sflush_r+0x1c>
 80013bc:	6a21      	ldr	r1, [r4, #32]
 80013be:	2301      	movs	r3, #1
 80013c0:	4628      	mov	r0, r5
 80013c2:	47b0      	blx	r6
 80013c4:	1c41      	adds	r1, r0, #1
 80013c6:	d1c7      	bne.n	8001358 <__sflush_r+0x34>
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0c4      	beq.n	8001358 <__sflush_r+0x34>
 80013ce:	2b1d      	cmp	r3, #29
 80013d0:	d001      	beq.n	80013d6 <__sflush_r+0xb2>
 80013d2:	2b16      	cmp	r3, #22
 80013d4:	d101      	bne.n	80013da <__sflush_r+0xb6>
 80013d6:	602f      	str	r7, [r5, #0]
 80013d8:	e7b1      	b.n	800133e <__sflush_r+0x1a>
 80013da:	89a3      	ldrh	r3, [r4, #12]
 80013dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e0:	81a3      	strh	r3, [r4, #12]
 80013e2:	e7ad      	b.n	8001340 <__sflush_r+0x1c>
 80013e4:	690f      	ldr	r7, [r1, #16]
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d0a9      	beq.n	800133e <__sflush_r+0x1a>
 80013ea:	0793      	lsls	r3, r2, #30
 80013ec:	680e      	ldr	r6, [r1, #0]
 80013ee:	bf08      	it	eq
 80013f0:	694b      	ldreq	r3, [r1, #20]
 80013f2:	600f      	str	r7, [r1, #0]
 80013f4:	bf18      	it	ne
 80013f6:	2300      	movne	r3, #0
 80013f8:	eba6 0807 	sub.w	r8, r6, r7
 80013fc:	608b      	str	r3, [r1, #8]
 80013fe:	f1b8 0f00 	cmp.w	r8, #0
 8001402:	dd9c      	ble.n	800133e <__sflush_r+0x1a>
 8001404:	6a21      	ldr	r1, [r4, #32]
 8001406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001408:	4643      	mov	r3, r8
 800140a:	463a      	mov	r2, r7
 800140c:	4628      	mov	r0, r5
 800140e:	47b0      	blx	r6
 8001410:	2800      	cmp	r0, #0
 8001412:	dc06      	bgt.n	8001422 <__sflush_r+0xfe>
 8001414:	89a3      	ldrh	r3, [r4, #12]
 8001416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800141a:	81a3      	strh	r3, [r4, #12]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001420:	e78e      	b.n	8001340 <__sflush_r+0x1c>
 8001422:	4407      	add	r7, r0
 8001424:	eba8 0800 	sub.w	r8, r8, r0
 8001428:	e7e9      	b.n	80013fe <__sflush_r+0xda>
 800142a:	bf00      	nop
 800142c:	20400001 	.word	0x20400001

08001430 <_fflush_r>:
 8001430:	b538      	push	{r3, r4, r5, lr}
 8001432:	690b      	ldr	r3, [r1, #16]
 8001434:	4605      	mov	r5, r0
 8001436:	460c      	mov	r4, r1
 8001438:	b913      	cbnz	r3, 8001440 <_fflush_r+0x10>
 800143a:	2500      	movs	r5, #0
 800143c:	4628      	mov	r0, r5
 800143e:	bd38      	pop	{r3, r4, r5, pc}
 8001440:	b118      	cbz	r0, 800144a <_fflush_r+0x1a>
 8001442:	6983      	ldr	r3, [r0, #24]
 8001444:	b90b      	cbnz	r3, 800144a <_fflush_r+0x1a>
 8001446:	f7ff fa15 	bl	8000874 <__sinit>
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <_fflush_r+0x6c>)
 800144c:	429c      	cmp	r4, r3
 800144e:	d11b      	bne.n	8001488 <_fflush_r+0x58>
 8001450:	686c      	ldr	r4, [r5, #4]
 8001452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0ef      	beq.n	800143a <_fflush_r+0xa>
 800145a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800145c:	07d0      	lsls	r0, r2, #31
 800145e:	d404      	bmi.n	800146a <_fflush_r+0x3a>
 8001460:	0599      	lsls	r1, r3, #22
 8001462:	d402      	bmi.n	800146a <_fflush_r+0x3a>
 8001464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001466:	f7ff faa3 	bl	80009b0 <__retarget_lock_acquire_recursive>
 800146a:	4628      	mov	r0, r5
 800146c:	4621      	mov	r1, r4
 800146e:	f7ff ff59 	bl	8001324 <__sflush_r>
 8001472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001474:	07da      	lsls	r2, r3, #31
 8001476:	4605      	mov	r5, r0
 8001478:	d4e0      	bmi.n	800143c <_fflush_r+0xc>
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	059b      	lsls	r3, r3, #22
 800147e:	d4dd      	bmi.n	800143c <_fflush_r+0xc>
 8001480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001482:	f7ff fa96 	bl	80009b2 <__retarget_lock_release_recursive>
 8001486:	e7d9      	b.n	800143c <_fflush_r+0xc>
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <_fflush_r+0x70>)
 800148a:	429c      	cmp	r4, r3
 800148c:	d101      	bne.n	8001492 <_fflush_r+0x62>
 800148e:	68ac      	ldr	r4, [r5, #8]
 8001490:	e7df      	b.n	8001452 <_fflush_r+0x22>
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <_fflush_r+0x74>)
 8001494:	429c      	cmp	r4, r3
 8001496:	bf08      	it	eq
 8001498:	68ec      	ldreq	r4, [r5, #12]
 800149a:	e7da      	b.n	8001452 <_fflush_r+0x22>
 800149c:	08001704 	.word	0x08001704
 80014a0:	08001724 	.word	0x08001724
 80014a4:	080016e4 	.word	0x080016e4

080014a8 <_lseek_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4d07      	ldr	r5, [pc, #28]	; (80014c8 <_lseek_r+0x20>)
 80014ac:	4604      	mov	r4, r0
 80014ae:	4608      	mov	r0, r1
 80014b0:	4611      	mov	r1, r2
 80014b2:	2200      	movs	r2, #0
 80014b4:	602a      	str	r2, [r5, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	f7fe ffdc 	bl	8000474 <_lseek>
 80014bc:	1c43      	adds	r3, r0, #1
 80014be:	d102      	bne.n	80014c6 <_lseek_r+0x1e>
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	b103      	cbz	r3, 80014c6 <_lseek_r+0x1e>
 80014c4:	6023      	str	r3, [r4, #0]
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
 80014c8:	20000090 	.word	0x20000090

080014cc <__swhatbuf_r>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	460e      	mov	r6, r1
 80014d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d4:	2900      	cmp	r1, #0
 80014d6:	b096      	sub	sp, #88	; 0x58
 80014d8:	4614      	mov	r4, r2
 80014da:	461d      	mov	r5, r3
 80014dc:	da08      	bge.n	80014f0 <__swhatbuf_r+0x24>
 80014de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	602a      	str	r2, [r5, #0]
 80014e6:	061a      	lsls	r2, r3, #24
 80014e8:	d410      	bmi.n	800150c <__swhatbuf_r+0x40>
 80014ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ee:	e00e      	b.n	800150e <__swhatbuf_r+0x42>
 80014f0:	466a      	mov	r2, sp
 80014f2:	f000 f8bb 	bl	800166c <_fstat_r>
 80014f6:	2800      	cmp	r0, #0
 80014f8:	dbf1      	blt.n	80014de <__swhatbuf_r+0x12>
 80014fa:	9a01      	ldr	r2, [sp, #4]
 80014fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001500:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001504:	425a      	negs	r2, r3
 8001506:	415a      	adcs	r2, r3
 8001508:	602a      	str	r2, [r5, #0]
 800150a:	e7ee      	b.n	80014ea <__swhatbuf_r+0x1e>
 800150c:	2340      	movs	r3, #64	; 0x40
 800150e:	2000      	movs	r0, #0
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	b016      	add	sp, #88	; 0x58
 8001514:	bd70      	pop	{r4, r5, r6, pc}
	...

08001518 <__smakebuf_r>:
 8001518:	898b      	ldrh	r3, [r1, #12]
 800151a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800151c:	079d      	lsls	r5, r3, #30
 800151e:	4606      	mov	r6, r0
 8001520:	460c      	mov	r4, r1
 8001522:	d507      	bpl.n	8001534 <__smakebuf_r+0x1c>
 8001524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001528:	6023      	str	r3, [r4, #0]
 800152a:	6123      	str	r3, [r4, #16]
 800152c:	2301      	movs	r3, #1
 800152e:	6163      	str	r3, [r4, #20]
 8001530:	b002      	add	sp, #8
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	ab01      	add	r3, sp, #4
 8001536:	466a      	mov	r2, sp
 8001538:	f7ff ffc8 	bl	80014cc <__swhatbuf_r>
 800153c:	9900      	ldr	r1, [sp, #0]
 800153e:	4605      	mov	r5, r0
 8001540:	4630      	mov	r0, r6
 8001542:	f7ff fa57 	bl	80009f4 <_malloc_r>
 8001546:	b948      	cbnz	r0, 800155c <__smakebuf_r+0x44>
 8001548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800154c:	059a      	lsls	r2, r3, #22
 800154e:	d4ef      	bmi.n	8001530 <__smakebuf_r+0x18>
 8001550:	f023 0303 	bic.w	r3, r3, #3
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	81a3      	strh	r3, [r4, #12]
 800155a:	e7e3      	b.n	8001524 <__smakebuf_r+0xc>
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <__smakebuf_r+0x7c>)
 800155e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	6020      	str	r0, [r4, #0]
 8001564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001568:	81a3      	strh	r3, [r4, #12]
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	6163      	str	r3, [r4, #20]
 800156e:	9b01      	ldr	r3, [sp, #4]
 8001570:	6120      	str	r0, [r4, #16]
 8001572:	b15b      	cbz	r3, 800158c <__smakebuf_r+0x74>
 8001574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001578:	4630      	mov	r0, r6
 800157a:	f000 f889 	bl	8001690 <_isatty_r>
 800157e:	b128      	cbz	r0, 800158c <__smakebuf_r+0x74>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	f023 0303 	bic.w	r3, r3, #3
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	81a3      	strh	r3, [r4, #12]
 800158c:	89a0      	ldrh	r0, [r4, #12]
 800158e:	4305      	orrs	r5, r0
 8001590:	81a5      	strh	r5, [r4, #12]
 8001592:	e7cd      	b.n	8001530 <__smakebuf_r+0x18>
 8001594:	0800080d 	.word	0x0800080d

08001598 <__malloc_lock>:
 8001598:	4801      	ldr	r0, [pc, #4]	; (80015a0 <__malloc_lock+0x8>)
 800159a:	f7ff ba09 	b.w	80009b0 <__retarget_lock_acquire_recursive>
 800159e:	bf00      	nop
 80015a0:	20000084 	.word	0x20000084

080015a4 <__malloc_unlock>:
 80015a4:	4801      	ldr	r0, [pc, #4]	; (80015ac <__malloc_unlock+0x8>)
 80015a6:	f7ff ba04 	b.w	80009b2 <__retarget_lock_release_recursive>
 80015aa:	bf00      	nop
 80015ac:	20000084 	.word	0x20000084

080015b0 <_free_r>:
 80015b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015b2:	2900      	cmp	r1, #0
 80015b4:	d044      	beq.n	8001640 <_free_r+0x90>
 80015b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015ba:	9001      	str	r0, [sp, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f1a1 0404 	sub.w	r4, r1, #4
 80015c2:	bfb8      	it	lt
 80015c4:	18e4      	addlt	r4, r4, r3
 80015c6:	f7ff ffe7 	bl	8001598 <__malloc_lock>
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <_free_r+0x94>)
 80015cc:	9801      	ldr	r0, [sp, #4]
 80015ce:	6813      	ldr	r3, [r2, #0]
 80015d0:	b933      	cbnz	r3, 80015e0 <_free_r+0x30>
 80015d2:	6063      	str	r3, [r4, #4]
 80015d4:	6014      	str	r4, [r2, #0]
 80015d6:	b003      	add	sp, #12
 80015d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015dc:	f7ff bfe2 	b.w	80015a4 <__malloc_unlock>
 80015e0:	42a3      	cmp	r3, r4
 80015e2:	d908      	bls.n	80015f6 <_free_r+0x46>
 80015e4:	6825      	ldr	r5, [r4, #0]
 80015e6:	1961      	adds	r1, r4, r5
 80015e8:	428b      	cmp	r3, r1
 80015ea:	bf01      	itttt	eq
 80015ec:	6819      	ldreq	r1, [r3, #0]
 80015ee:	685b      	ldreq	r3, [r3, #4]
 80015f0:	1949      	addeq	r1, r1, r5
 80015f2:	6021      	streq	r1, [r4, #0]
 80015f4:	e7ed      	b.n	80015d2 <_free_r+0x22>
 80015f6:	461a      	mov	r2, r3
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	b10b      	cbz	r3, 8001600 <_free_r+0x50>
 80015fc:	42a3      	cmp	r3, r4
 80015fe:	d9fa      	bls.n	80015f6 <_free_r+0x46>
 8001600:	6811      	ldr	r1, [r2, #0]
 8001602:	1855      	adds	r5, r2, r1
 8001604:	42a5      	cmp	r5, r4
 8001606:	d10b      	bne.n	8001620 <_free_r+0x70>
 8001608:	6824      	ldr	r4, [r4, #0]
 800160a:	4421      	add	r1, r4
 800160c:	1854      	adds	r4, r2, r1
 800160e:	42a3      	cmp	r3, r4
 8001610:	6011      	str	r1, [r2, #0]
 8001612:	d1e0      	bne.n	80015d6 <_free_r+0x26>
 8001614:	681c      	ldr	r4, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	6053      	str	r3, [r2, #4]
 800161a:	4421      	add	r1, r4
 800161c:	6011      	str	r1, [r2, #0]
 800161e:	e7da      	b.n	80015d6 <_free_r+0x26>
 8001620:	d902      	bls.n	8001628 <_free_r+0x78>
 8001622:	230c      	movs	r3, #12
 8001624:	6003      	str	r3, [r0, #0]
 8001626:	e7d6      	b.n	80015d6 <_free_r+0x26>
 8001628:	6825      	ldr	r5, [r4, #0]
 800162a:	1961      	adds	r1, r4, r5
 800162c:	428b      	cmp	r3, r1
 800162e:	bf04      	itt	eq
 8001630:	6819      	ldreq	r1, [r3, #0]
 8001632:	685b      	ldreq	r3, [r3, #4]
 8001634:	6063      	str	r3, [r4, #4]
 8001636:	bf04      	itt	eq
 8001638:	1949      	addeq	r1, r1, r5
 800163a:	6021      	streq	r1, [r4, #0]
 800163c:	6054      	str	r4, [r2, #4]
 800163e:	e7ca      	b.n	80015d6 <_free_r+0x26>
 8001640:	b003      	add	sp, #12
 8001642:	bd30      	pop	{r4, r5, pc}
 8001644:	20000088 	.word	0x20000088

08001648 <_read_r>:
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4d07      	ldr	r5, [pc, #28]	; (8001668 <_read_r+0x20>)
 800164c:	4604      	mov	r4, r0
 800164e:	4608      	mov	r0, r1
 8001650:	4611      	mov	r1, r2
 8001652:	2200      	movs	r2, #0
 8001654:	602a      	str	r2, [r5, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	f7fe feac 	bl	80003b4 <_read>
 800165c:	1c43      	adds	r3, r0, #1
 800165e:	d102      	bne.n	8001666 <_read_r+0x1e>
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	b103      	cbz	r3, 8001666 <_read_r+0x1e>
 8001664:	6023      	str	r3, [r4, #0]
 8001666:	bd38      	pop	{r3, r4, r5, pc}
 8001668:	20000090 	.word	0x20000090

0800166c <_fstat_r>:
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	4d07      	ldr	r5, [pc, #28]	; (800168c <_fstat_r+0x20>)
 8001670:	2300      	movs	r3, #0
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	602b      	str	r3, [r5, #0]
 800167a:	f7fe fee0 	bl	800043e <_fstat>
 800167e:	1c43      	adds	r3, r0, #1
 8001680:	d102      	bne.n	8001688 <_fstat_r+0x1c>
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	b103      	cbz	r3, 8001688 <_fstat_r+0x1c>
 8001686:	6023      	str	r3, [r4, #0]
 8001688:	bd38      	pop	{r3, r4, r5, pc}
 800168a:	bf00      	nop
 800168c:	20000090 	.word	0x20000090

08001690 <_isatty_r>:
 8001690:	b538      	push	{r3, r4, r5, lr}
 8001692:	4d06      	ldr	r5, [pc, #24]	; (80016ac <_isatty_r+0x1c>)
 8001694:	2300      	movs	r3, #0
 8001696:	4604      	mov	r4, r0
 8001698:	4608      	mov	r0, r1
 800169a:	602b      	str	r3, [r5, #0]
 800169c:	f7fe fedf 	bl	800045e <_isatty>
 80016a0:	1c43      	adds	r3, r0, #1
 80016a2:	d102      	bne.n	80016aa <_isatty_r+0x1a>
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	b103      	cbz	r3, 80016aa <_isatty_r+0x1a>
 80016a8:	6023      	str	r3, [r4, #0]
 80016aa:	bd38      	pop	{r3, r4, r5, pc}
 80016ac:	20000090 	.word	0x20000090

080016b0 <_init>:
 80016b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b2:	bf00      	nop
 80016b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b6:	bc08      	pop	{r3}
 80016b8:	469e      	mov	lr, r3
 80016ba:	4770      	bx	lr

080016bc <_fini>:
 80016bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016be:	bf00      	nop
 80016c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016c2:	bc08      	pop	{r3}
 80016c4:	469e      	mov	lr, r3
 80016c6:	4770      	bx	lr
