
15_timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015d4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080017d4  080017d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001884  08001884  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001884  08001884  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001884  08001884  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001888  08001888  00011888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800188c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080018f0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080018f0  00020094  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020fa  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000098d  00000000  00000000  0002218c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00022b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d8  00000000  00000000  00022d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000225f  00000000  00000000  00022f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d70  00000000  00000000  000251b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9528  00000000  00000000  00027f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d144f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f50  00000000  00000000  000d14a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	080017bc 	.word	0x080017bc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	080017bc 	.word	0x080017bc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <set_pin_mode>:
 *      Author: st
 */
#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b089      	sub	sp, #36	; 0x24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b10 = 0x2
	 * 2 << 16 ==> bit16 = 0, bit17 = 1
	 * */

	MODIFY_REG(GPIOx->MODER, (0x3<<(POSITION_VAL(Pin)*2U)), (Mode<<(POSITION_VAL(Pin)*2U)));
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	fa92 f2a2 	rbit	r2, r2
 80002fa:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002fc:	693a      	ldr	r2, [r7, #16]
 80002fe:	fab2 f282 	clz	r2, r2
 8000302:	b2d2      	uxtb	r2, r2
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	2103      	movs	r1, #3
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	43d2      	mvns	r2, r2
 800030e:	401a      	ands	r2, r3
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	fa93 f3a3 	rbit	r3, r3
 800031a:	61bb      	str	r3, [r7, #24]
  return result;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fab3 f383 	clz	r3, r3
 8000322:	b2db      	uxtb	r3, r3
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	6879      	ldr	r1, [r7, #4]
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	431a      	orrs	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	3724      	adds	r7, #36	; 0x24
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
	...

08000340 <user_leds_init>:
#include "led.h"
#include "stm32f7xx.h"



void user_leds_init(void){
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= GPIOB_CLK_EN;
 8000344:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <user_leds_init+0x64>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a16      	ldr	r2, [pc, #88]	; (80003a4 <user_leds_init+0x64>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	6313      	str	r3, [r2, #48]	; 0x30

  // Set PB0 as output
  GPIOB->MODER |= (1U<<0);
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <user_leds_init+0x68>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <user_leds_init+0x68>)
 8000356:	f043 0301 	orr.w	r3, r3, #1
 800035a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1U<<1);
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <user_leds_init+0x68>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <user_leds_init+0x68>)
 8000362:	f023 0302 	bic.w	r3, r3, #2
 8000366:	6013      	str	r3, [r2, #0]

  // Set PB7 as output
  GPIOB->MODER |= (1U<<14);
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <user_leds_init+0x68>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <user_leds_init+0x68>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1U<<15);
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <user_leds_init+0x68>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <user_leds_init+0x68>)
 800037a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800037e:	6013      	str	r3, [r2, #0]

  // Set PB14 as output
  GPIOB->MODER |= (1U<<28);
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <user_leds_init+0x68>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a08      	ldr	r2, [pc, #32]	; (80003a8 <user_leds_init+0x68>)
 8000386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800038a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1U<<29);
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <user_leds_init+0x68>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <user_leds_init+0x68>)
 8000392:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020400 	.word	0x40020400

080003ac <all_leds_toggle>:

void all_leds_off(void){
  GPIOB->ODR &=~(RED_LED | GREEN_LED | BLUE_LED);
}

void all_leds_toggle(void){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  GPIOB->ODR ^=(RED_LED | GREEN_LED | BLUE_LED);
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <all_leds_toggle+0x1c>)
 80003b2:	695a      	ldr	r2, [r3, #20]
 80003b4:	4904      	ldr	r1, [pc, #16]	; (80003c8 <all_leds_toggle+0x1c>)
 80003b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80003ba:	4053      	eors	r3, r2
 80003bc:	614b      	str	r3, [r1, #20]
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40020400 	.word	0x40020400

080003cc <main>:
#include "tim.h"
#include "exti.h"

static void tim1_update_callback(void);

int main(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  uart3_tx_init();
 80003d0:	f000 f946 	bl	8000660 <uart3_tx_init>
  user_leds_init();
 80003d4:	f7ff ffb4 	bl	8000340 <user_leds_init>
  tim1_1hz_interrupt_init();
 80003d8:	f000 f908 	bl	80005ec <tim1_1hz_interrupt_init>

  while(1){
 80003dc:	e7fe      	b.n	80003dc <main+0x10>
	...

080003e0 <tim1_update_callback>:


  }
}

static void tim1_update_callback(void){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  all_leds_toggle();
 80003e4:	f7ff ffe2 	bl	80003ac <all_leds_toggle>
  printf("A second just passed \n\r");
 80003e8:	4802      	ldr	r0, [pc, #8]	; (80003f4 <tim1_update_callback+0x14>)
 80003ea:	f000 fa59 	bl	80008a0 <iprintf>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	080017d4 	.word	0x080017d4

080003f8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  // Check whether update interrupt is pending
  if((TIM1->SR & SR_UIF) != 0){
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <TIM1_UP_TIM10_IRQHandler+0x24>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	2b00      	cmp	r3, #0
 8000406:	d007      	beq.n	8000418 <TIM1_UP_TIM10_IRQHandler+0x20>
    // Clear the update interrupt flag
    TIM1->SR &=~ SR_UIF;
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <TIM1_UP_TIM10_IRQHandler+0x24>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	4a03      	ldr	r2, [pc, #12]	; (800041c <TIM1_UP_TIM10_IRQHandler+0x24>)
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6113      	str	r3, [r2, #16]

    // Do something
    tim1_update_callback();
 8000414:	f7ff ffe4 	bl	80003e0 <tim1_update_callback>
  }


}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40010000 	.word	0x40010000

08000420 <set_ahb1_periph_clock>:
 *      Author: st
 */
#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <set_ahb1_periph_clock+0x20>)
 800042a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800042c:	4904      	ldr	r1, [pc, #16]	; (8000440 <set_ahb1_periph_clock+0x20>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4313      	orrs	r3, r2
 8000432:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40023800 	.word	0x40023800

08000444 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <set_apb1_periph_clock+0x20>)
 800044e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000450:	4904      	ldr	r1, [pc, #16]	; (8000464 <set_apb1_periph_clock+0x20>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4313      	orrs	r3, r2
 8000456:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40023800 	.word	0x40023800

08000468 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]
 8000478:	e00a      	b.n	8000490 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800047a:	f3af 8000 	nop.w
 800047e:	4601      	mov	r1, r0
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	60ba      	str	r2, [r7, #8]
 8000486:	b2ca      	uxtb	r2, r1
 8000488:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	617b      	str	r3, [r7, #20]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	429a      	cmp	r2, r3
 8000496:	dbf0      	blt.n	800047a <_read+0x12>
  }

  return len;
 8000498:	687b      	ldr	r3, [r7, #4]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b086      	sub	sp, #24
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	e009      	b.n	80004c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	60ba      	str	r2, [r7, #8]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f8bd 	bl	800063c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf1      	blt.n	80004b4 <_write+0x12>
  }
  return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_close>:

int _close(int file)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004f2:	b480      	push	{r7}
 80004f4:	b083      	sub	sp, #12
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
 80004fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000502:	605a      	str	r2, [r3, #4]
  return 0;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <_isatty>:

int _isatty(int file)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800051a:	2301      	movs	r3, #1
}
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <_sbrk+0x5c>)
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <_sbrk+0x60>)
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <_sbrk+0x64>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <_sbrk+0x68>)
 8000564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	429a      	cmp	r2, r3
 8000572:	d207      	bcs.n	8000584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000574:	f000 f962 	bl	800083c <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	220c      	movs	r2, #12
 800057c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000582:	e009      	b.n	8000598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <_sbrk+0x64>)
 8000594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20080000 	.word	0x20080000
 80005a4:	00000400 	.word	0x00000400
 80005a8:	20000080 	.word	0x20000080
 80005ac:	20000098 	.word	0x20000098

080005b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db0b      	blt.n	80005da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 021f 	and.w	r2, r3, #31
 80005c8:	4907      	ldr	r1, [pc, #28]	; (80005e8 <__NVIC_EnableIRQ+0x38>)
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2001      	movs	r0, #1
 80005d2:	fa00 f202 	lsl.w	r2, r0, r2
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000e100 	.word	0xe000e100

080005ec <tim1_1hz_interrupt_init>:
  // Enable timer
  TIM1->CR1 |= CR1_EN;
}


void tim1_1hz_interrupt_init(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  // Enable clock access to TIM1
  RCC->APB2ENR |= TIM1EN;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <tim1_1hz_interrupt_init+0x48>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f4:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <tim1_1hz_interrupt_init+0x48>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6453      	str	r3, [r2, #68]	; 0x44

  // Set the prescaler
  TIM1->PSC = 1600 -1;    // 16000000/1600 = 10000
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <tim1_1hz_interrupt_init+0x4c>)
 80005fe:	f240 623f 	movw	r2, #1599	; 0x63f
 8000602:	629a      	str	r2, [r3, #40]	; 0x28

  // Set auto-reload value
  TIM1->ARR = 10000 -1;   // 10000/100000 = 1
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <tim1_1hz_interrupt_init+0x4c>)
 8000606:	f242 720f 	movw	r2, #9999	; 0x270f
 800060a:	62da      	str	r2, [r3, #44]	; 0x2c

  // Enable TIM1 update interrupt
  TIM1->DIER = DIER_UIF;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <tim1_1hz_interrupt_init+0x4c>)
 800060e:	2201      	movs	r2, #1
 8000610:	60da      	str	r2, [r3, #12]

  // Enable TIM1 update interrupt in NVIC
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000612:	2019      	movs	r0, #25
 8000614:	f7ff ffcc 	bl	80005b0 <__NVIC_EnableIRQ>

// Enable timer
  TIM1->CR1 |= CR1_EN;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <tim1_1hz_interrupt_init+0x4c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <tim1_1hz_interrupt_init+0x4c>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  // Force update generation
  TIM1->EGR |= EGR_UG;
 8000624:	4b04      	ldr	r3, [pc, #16]	; (8000638 <tim1_1hz_interrupt_init+0x4c>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <tim1_1hz_interrupt_init+0x4c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6153      	str	r3, [r2, #20]
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40010000 	.word	0x40010000

0800063c <__io_putchar>:
static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection);

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits);

int __io_putchar(int ch)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uart_write(USART3, ch);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <__io_putchar+0x20>)
 800064c:	f000 f84a 	bl	80006e4 <uart_write>
  return ch;
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40004800 	.word	0x40004800

08000660 <uart3_tx_init>:


void uart3_tx_init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	// 1.Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 8000664:	2008      	movs	r0, #8
 8000666:	f7ff fedb 	bl	8000420 <set_ahb1_periph_clock>

	// 2.Set PD8 to mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 800066a:	2202      	movs	r2, #2
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	4819      	ldr	r0, [pc, #100]	; (80006d8 <uart3_tx_init+0x78>)
 8000672:	f7ff fe35 	bl	80002e0 <set_pin_mode>

	// 3. Set alternate function to USART
	GPIOD->AFR[1] |= (1U<<0);
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <uart3_tx_init+0x78>)
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <uart3_tx_init+0x78>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <uart3_tx_init+0x78>)
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <uart3_tx_init+0x78>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <uart3_tx_init+0x78>)
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <uart3_tx_init+0x78>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ (1U<<3);
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <uart3_tx_init+0x78>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <uart3_tx_init+0x78>)
 80006a0:	f023 0308 	bic.w	r3, r3, #8
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable clock to the USART3 module
	set_apb1_periph_clock(USART3EN);
 80006a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80006aa:	f7ff fecb 	bl	8000444 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80006ae:	2300      	movs	r3, #0
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <uart3_tx_init+0x7c>)
 80006b6:	f000 f861 	bl	800077c <config_uart_parameters>
  set_uart_transfer_direction(USART3, USART_CR1_TE);
 80006ba:	2108      	movs	r1, #8
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <uart3_tx_init+0x7c>)
 80006be:	f000 f837 	bl	8000730 <set_uart_transfer_direction>

	// Set baudrate
  uart_set_baudrate(USART3, 16000000, 115200);
 80006c2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c6:	4906      	ldr	r1, [pc, #24]	; (80006e0 <uart3_tx_init+0x80>)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <uart3_tx_init+0x7c>)
 80006ca:	f000 f844 	bl	8000756 <uart_set_baudrate>

	// Enable USART
  /*USART3->CR1 |= USART_CR1_UE;*/
  // SET_BIT(USART3->CR1, USART_CR1_UE);
  uart_enable(USART3);
 80006ce:	4803      	ldr	r0, [pc, #12]	; (80006dc <uart3_tx_init+0x7c>)
 80006d0:	f000 f81e 	bl	8000710 <uart_enable>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40004800 	.word	0x40004800
 80006e0:	00f42400 	.word	0x00f42400

080006e4 <uart_write>:
  while (!(USARTx->ISR & USART_ISR_RXNE)){}
  return (READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
}

void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	460b      	mov	r3, r1
 80006ee:	70fb      	strb	r3, [r7, #3]
  // Make sure transmit data register is empty
  while (!((USARTx->ISR & USART_ISR_TXE) == USART_ISR_TXE)){}
 80006f0:	bf00      	nop
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	2b80      	cmp	r3, #128	; 0x80
 80006fc:	d1f9      	bne.n	80006f2 <uart_write+0xe>
  /*while (!(USARTx->ISR & USART_ISR_TXE)){}*/

  // Write value into transmit data register
  USARTx->TDR = value;
 80006fe:	78fa      	ldrb	r2, [r7, #3]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <uart_enable>:


static void uart_enable(USART_TypeDef *USARTx)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f043 0201 	orr.w	r2, r3, #1
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	601a      	str	r2, [r3, #0]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f023 020c 	bic.w	r2, r3, #12
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	431a      	orrs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	af00      	add	r7, sp, #0
 800075c:	60f8      	str	r0, [r7, #12]
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
  USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	68b8      	ldr	r0, [r7, #8]
 8000766:	f000 f82b 	bl	80007c0 <compute_uart_div>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	60da      	str	r2, [r3, #12]
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <config_uart_parameters+0x40>)
 8000790:	4013      	ands	r3, r2
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	430a      	orrs	r2, r1
 8000798:	431a      	orrs	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	601a      	str	r2, [r3, #0]

	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	605a      	str	r2, [r3, #4]
}
 80007ae:	bf00      	nop
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	efffe9ff 	.word	0xefffe9ff

080007c0 <compute_uart_div>:


uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	085a      	lsrs	r2, r3, #1
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	441a      	add	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d8:	b29b      	uxth	r3, r3
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000816:	f000 f817 	bl	8000848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fdd7 	bl	80003cc <main>

0800081e <LoopForever>:

LoopForever:
  b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800082c:	0800188c 	.word	0x0800188c
  ldr r2, =_sbss
 8000830:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000834:	20000094 	.word	0x20000094

08000838 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC_IRQHandler>
	...

0800083c <__errno>:
 800083c:	4b01      	ldr	r3, [pc, #4]	; (8000844 <__errno+0x8>)
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000

08000848 <__libc_init_array>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4d0d      	ldr	r5, [pc, #52]	; (8000880 <__libc_init_array+0x38>)
 800084c:	4c0d      	ldr	r4, [pc, #52]	; (8000884 <__libc_init_array+0x3c>)
 800084e:	1b64      	subs	r4, r4, r5
 8000850:	10a4      	asrs	r4, r4, #2
 8000852:	2600      	movs	r6, #0
 8000854:	42a6      	cmp	r6, r4
 8000856:	d109      	bne.n	800086c <__libc_init_array+0x24>
 8000858:	4d0b      	ldr	r5, [pc, #44]	; (8000888 <__libc_init_array+0x40>)
 800085a:	4c0c      	ldr	r4, [pc, #48]	; (800088c <__libc_init_array+0x44>)
 800085c:	f000 ffae 	bl	80017bc <_init>
 8000860:	1b64      	subs	r4, r4, r5
 8000862:	10a4      	asrs	r4, r4, #2
 8000864:	2600      	movs	r6, #0
 8000866:	42a6      	cmp	r6, r4
 8000868:	d105      	bne.n	8000876 <__libc_init_array+0x2e>
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000870:	4798      	blx	r3
 8000872:	3601      	adds	r6, #1
 8000874:	e7ee      	b.n	8000854 <__libc_init_array+0xc>
 8000876:	f855 3b04 	ldr.w	r3, [r5], #4
 800087a:	4798      	blx	r3
 800087c:	3601      	adds	r6, #1
 800087e:	e7f2      	b.n	8000866 <__libc_init_array+0x1e>
 8000880:	08001884 	.word	0x08001884
 8000884:	08001884 	.word	0x08001884
 8000888:	08001884 	.word	0x08001884
 800088c:	08001888 	.word	0x08001888

08000890 <memset>:
 8000890:	4402      	add	r2, r0
 8000892:	4603      	mov	r3, r0
 8000894:	4293      	cmp	r3, r2
 8000896:	d100      	bne.n	800089a <memset+0xa>
 8000898:	4770      	bx	lr
 800089a:	f803 1b01 	strb.w	r1, [r3], #1
 800089e:	e7f9      	b.n	8000894 <memset+0x4>

080008a0 <iprintf>:
 80008a0:	b40f      	push	{r0, r1, r2, r3}
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <iprintf+0x2c>)
 80008a4:	b513      	push	{r0, r1, r4, lr}
 80008a6:	681c      	ldr	r4, [r3, #0]
 80008a8:	b124      	cbz	r4, 80008b4 <iprintf+0x14>
 80008aa:	69a3      	ldr	r3, [r4, #24]
 80008ac:	b913      	cbnz	r3, 80008b4 <iprintf+0x14>
 80008ae:	4620      	mov	r0, r4
 80008b0:	f000 f866 	bl	8000980 <__sinit>
 80008b4:	ab05      	add	r3, sp, #20
 80008b6:	9a04      	ldr	r2, [sp, #16]
 80008b8:	68a1      	ldr	r1, [r4, #8]
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	4620      	mov	r0, r4
 80008be:	f000 f9bd 	bl	8000c3c <_vfiprintf_r>
 80008c2:	b002      	add	sp, #8
 80008c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr
 80008cc:	20000000 	.word	0x20000000

080008d0 <std>:
 80008d0:	2300      	movs	r3, #0
 80008d2:	b510      	push	{r4, lr}
 80008d4:	4604      	mov	r4, r0
 80008d6:	e9c0 3300 	strd	r3, r3, [r0]
 80008da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008de:	6083      	str	r3, [r0, #8]
 80008e0:	8181      	strh	r1, [r0, #12]
 80008e2:	6643      	str	r3, [r0, #100]	; 0x64
 80008e4:	81c2      	strh	r2, [r0, #14]
 80008e6:	6183      	str	r3, [r0, #24]
 80008e8:	4619      	mov	r1, r3
 80008ea:	2208      	movs	r2, #8
 80008ec:	305c      	adds	r0, #92	; 0x5c
 80008ee:	f7ff ffcf 	bl	8000890 <memset>
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <std+0x38>)
 80008f4:	6263      	str	r3, [r4, #36]	; 0x24
 80008f6:	4b05      	ldr	r3, [pc, #20]	; (800090c <std+0x3c>)
 80008f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <std+0x40>)
 80008fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <std+0x44>)
 8000900:	6224      	str	r4, [r4, #32]
 8000902:	6323      	str	r3, [r4, #48]	; 0x30
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	080011e5 	.word	0x080011e5
 800090c:	08001207 	.word	0x08001207
 8000910:	0800123f 	.word	0x0800123f
 8000914:	08001263 	.word	0x08001263

08000918 <_cleanup_r>:
 8000918:	4901      	ldr	r1, [pc, #4]	; (8000920 <_cleanup_r+0x8>)
 800091a:	f000 b8af 	b.w	8000a7c <_fwalk_reent>
 800091e:	bf00      	nop
 8000920:	0800153d 	.word	0x0800153d

08000924 <__sfmoreglue>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	2268      	movs	r2, #104	; 0x68
 8000928:	1e4d      	subs	r5, r1, #1
 800092a:	4355      	muls	r5, r2
 800092c:	460e      	mov	r6, r1
 800092e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000932:	f000 f8e5 	bl	8000b00 <_malloc_r>
 8000936:	4604      	mov	r4, r0
 8000938:	b140      	cbz	r0, 800094c <__sfmoreglue+0x28>
 800093a:	2100      	movs	r1, #0
 800093c:	e9c0 1600 	strd	r1, r6, [r0]
 8000940:	300c      	adds	r0, #12
 8000942:	60a0      	str	r0, [r4, #8]
 8000944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000948:	f7ff ffa2 	bl	8000890 <memset>
 800094c:	4620      	mov	r0, r4
 800094e:	bd70      	pop	{r4, r5, r6, pc}

08000950 <__sfp_lock_acquire>:
 8000950:	4801      	ldr	r0, [pc, #4]	; (8000958 <__sfp_lock_acquire+0x8>)
 8000952:	f000 b8b3 	b.w	8000abc <__retarget_lock_acquire_recursive>
 8000956:	bf00      	nop
 8000958:	20000085 	.word	0x20000085

0800095c <__sfp_lock_release>:
 800095c:	4801      	ldr	r0, [pc, #4]	; (8000964 <__sfp_lock_release+0x8>)
 800095e:	f000 b8ae 	b.w	8000abe <__retarget_lock_release_recursive>
 8000962:	bf00      	nop
 8000964:	20000085 	.word	0x20000085

08000968 <__sinit_lock_acquire>:
 8000968:	4801      	ldr	r0, [pc, #4]	; (8000970 <__sinit_lock_acquire+0x8>)
 800096a:	f000 b8a7 	b.w	8000abc <__retarget_lock_acquire_recursive>
 800096e:	bf00      	nop
 8000970:	20000086 	.word	0x20000086

08000974 <__sinit_lock_release>:
 8000974:	4801      	ldr	r0, [pc, #4]	; (800097c <__sinit_lock_release+0x8>)
 8000976:	f000 b8a2 	b.w	8000abe <__retarget_lock_release_recursive>
 800097a:	bf00      	nop
 800097c:	20000086 	.word	0x20000086

08000980 <__sinit>:
 8000980:	b510      	push	{r4, lr}
 8000982:	4604      	mov	r4, r0
 8000984:	f7ff fff0 	bl	8000968 <__sinit_lock_acquire>
 8000988:	69a3      	ldr	r3, [r4, #24]
 800098a:	b11b      	cbz	r3, 8000994 <__sinit+0x14>
 800098c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000990:	f7ff bff0 	b.w	8000974 <__sinit_lock_release>
 8000994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000998:	6523      	str	r3, [r4, #80]	; 0x50
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <__sinit+0x68>)
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <__sinit+0x6c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80009a2:	42a3      	cmp	r3, r4
 80009a4:	bf04      	itt	eq
 80009a6:	2301      	moveq	r3, #1
 80009a8:	61a3      	streq	r3, [r4, #24]
 80009aa:	4620      	mov	r0, r4
 80009ac:	f000 f820 	bl	80009f0 <__sfp>
 80009b0:	6060      	str	r0, [r4, #4]
 80009b2:	4620      	mov	r0, r4
 80009b4:	f000 f81c 	bl	80009f0 <__sfp>
 80009b8:	60a0      	str	r0, [r4, #8]
 80009ba:	4620      	mov	r0, r4
 80009bc:	f000 f818 	bl	80009f0 <__sfp>
 80009c0:	2200      	movs	r2, #0
 80009c2:	60e0      	str	r0, [r4, #12]
 80009c4:	2104      	movs	r1, #4
 80009c6:	6860      	ldr	r0, [r4, #4]
 80009c8:	f7ff ff82 	bl	80008d0 <std>
 80009cc:	68a0      	ldr	r0, [r4, #8]
 80009ce:	2201      	movs	r2, #1
 80009d0:	2109      	movs	r1, #9
 80009d2:	f7ff ff7d 	bl	80008d0 <std>
 80009d6:	68e0      	ldr	r0, [r4, #12]
 80009d8:	2202      	movs	r2, #2
 80009da:	2112      	movs	r1, #18
 80009dc:	f7ff ff78 	bl	80008d0 <std>
 80009e0:	2301      	movs	r3, #1
 80009e2:	61a3      	str	r3, [r4, #24]
 80009e4:	e7d2      	b.n	800098c <__sinit+0xc>
 80009e6:	bf00      	nop
 80009e8:	080017ec 	.word	0x080017ec
 80009ec:	08000919 	.word	0x08000919

080009f0 <__sfp>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	4607      	mov	r7, r0
 80009f4:	f7ff ffac 	bl	8000950 <__sfp_lock_acquire>
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <__sfp+0x84>)
 80009fa:	681e      	ldr	r6, [r3, #0]
 80009fc:	69b3      	ldr	r3, [r6, #24]
 80009fe:	b913      	cbnz	r3, 8000a06 <__sfp+0x16>
 8000a00:	4630      	mov	r0, r6
 8000a02:	f7ff ffbd 	bl	8000980 <__sinit>
 8000a06:	3648      	adds	r6, #72	; 0x48
 8000a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	d503      	bpl.n	8000a18 <__sfp+0x28>
 8000a10:	6833      	ldr	r3, [r6, #0]
 8000a12:	b30b      	cbz	r3, 8000a58 <__sfp+0x68>
 8000a14:	6836      	ldr	r6, [r6, #0]
 8000a16:	e7f7      	b.n	8000a08 <__sfp+0x18>
 8000a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a1c:	b9d5      	cbnz	r5, 8000a54 <__sfp+0x64>
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <__sfp+0x88>)
 8000a20:	60e3      	str	r3, [r4, #12]
 8000a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a26:	6665      	str	r5, [r4, #100]	; 0x64
 8000a28:	f000 f847 	bl	8000aba <__retarget_lock_init_recursive>
 8000a2c:	f7ff ff96 	bl	800095c <__sfp_lock_release>
 8000a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a38:	6025      	str	r5, [r4, #0]
 8000a3a:	61a5      	str	r5, [r4, #24]
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	4629      	mov	r1, r5
 8000a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a44:	f7ff ff24 	bl	8000890 <memset>
 8000a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a50:	4620      	mov	r0, r4
 8000a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a54:	3468      	adds	r4, #104	; 0x68
 8000a56:	e7d9      	b.n	8000a0c <__sfp+0x1c>
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4638      	mov	r0, r7
 8000a5c:	f7ff ff62 	bl	8000924 <__sfmoreglue>
 8000a60:	4604      	mov	r4, r0
 8000a62:	6030      	str	r0, [r6, #0]
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d1d5      	bne.n	8000a14 <__sfp+0x24>
 8000a68:	f7ff ff78 	bl	800095c <__sfp_lock_release>
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	e7ee      	b.n	8000a50 <__sfp+0x60>
 8000a72:	bf00      	nop
 8000a74:	080017ec 	.word	0x080017ec
 8000a78:	ffff0001 	.word	0xffff0001

08000a7c <_fwalk_reent>:
 8000a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a80:	4606      	mov	r6, r0
 8000a82:	4688      	mov	r8, r1
 8000a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a88:	2700      	movs	r7, #0
 8000a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8000a92:	d505      	bpl.n	8000aa0 <_fwalk_reent+0x24>
 8000a94:	6824      	ldr	r4, [r4, #0]
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d1f7      	bne.n	8000a8a <_fwalk_reent+0xe>
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aa0:	89ab      	ldrh	r3, [r5, #12]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d907      	bls.n	8000ab6 <_fwalk_reent+0x3a>
 8000aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	d003      	beq.n	8000ab6 <_fwalk_reent+0x3a>
 8000aae:	4629      	mov	r1, r5
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	47c0      	blx	r8
 8000ab4:	4307      	orrs	r7, r0
 8000ab6:	3568      	adds	r5, #104	; 0x68
 8000ab8:	e7e9      	b.n	8000a8e <_fwalk_reent+0x12>

08000aba <__retarget_lock_init_recursive>:
 8000aba:	4770      	bx	lr

08000abc <__retarget_lock_acquire_recursive>:
 8000abc:	4770      	bx	lr

08000abe <__retarget_lock_release_recursive>:
 8000abe:	4770      	bx	lr

08000ac0 <sbrk_aligned>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4e0e      	ldr	r6, [pc, #56]	; (8000afc <sbrk_aligned+0x3c>)
 8000ac4:	460c      	mov	r4, r1
 8000ac6:	6831      	ldr	r1, [r6, #0]
 8000ac8:	4605      	mov	r5, r0
 8000aca:	b911      	cbnz	r1, 8000ad2 <sbrk_aligned+0x12>
 8000acc:	f000 fb7a 	bl	80011c4 <_sbrk_r>
 8000ad0:	6030      	str	r0, [r6, #0]
 8000ad2:	4621      	mov	r1, r4
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	f000 fb75 	bl	80011c4 <_sbrk_r>
 8000ada:	1c43      	adds	r3, r0, #1
 8000adc:	d00a      	beq.n	8000af4 <sbrk_aligned+0x34>
 8000ade:	1cc4      	adds	r4, r0, #3
 8000ae0:	f024 0403 	bic.w	r4, r4, #3
 8000ae4:	42a0      	cmp	r0, r4
 8000ae6:	d007      	beq.n	8000af8 <sbrk_aligned+0x38>
 8000ae8:	1a21      	subs	r1, r4, r0
 8000aea:	4628      	mov	r0, r5
 8000aec:	f000 fb6a 	bl	80011c4 <_sbrk_r>
 8000af0:	3001      	adds	r0, #1
 8000af2:	d101      	bne.n	8000af8 <sbrk_aligned+0x38>
 8000af4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000af8:	4620      	mov	r0, r4
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	2000008c 	.word	0x2000008c

08000b00 <_malloc_r>:
 8000b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b04:	1ccd      	adds	r5, r1, #3
 8000b06:	f025 0503 	bic.w	r5, r5, #3
 8000b0a:	3508      	adds	r5, #8
 8000b0c:	2d0c      	cmp	r5, #12
 8000b0e:	bf38      	it	cc
 8000b10:	250c      	movcc	r5, #12
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	4607      	mov	r7, r0
 8000b16:	db01      	blt.n	8000b1c <_malloc_r+0x1c>
 8000b18:	42a9      	cmp	r1, r5
 8000b1a:	d905      	bls.n	8000b28 <_malloc_r+0x28>
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	2600      	movs	r6, #0
 8000b22:	4630      	mov	r0, r6
 8000b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b28:	4e2e      	ldr	r6, [pc, #184]	; (8000be4 <_malloc_r+0xe4>)
 8000b2a:	f000 fdbb 	bl	80016a4 <__malloc_lock>
 8000b2e:	6833      	ldr	r3, [r6, #0]
 8000b30:	461c      	mov	r4, r3
 8000b32:	bb34      	cbnz	r4, 8000b82 <_malloc_r+0x82>
 8000b34:	4629      	mov	r1, r5
 8000b36:	4638      	mov	r0, r7
 8000b38:	f7ff ffc2 	bl	8000ac0 <sbrk_aligned>
 8000b3c:	1c43      	adds	r3, r0, #1
 8000b3e:	4604      	mov	r4, r0
 8000b40:	d14d      	bne.n	8000bde <_malloc_r+0xde>
 8000b42:	6834      	ldr	r4, [r6, #0]
 8000b44:	4626      	mov	r6, r4
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d140      	bne.n	8000bcc <_malloc_r+0xcc>
 8000b4a:	6823      	ldr	r3, [r4, #0]
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	4638      	mov	r0, r7
 8000b50:	eb04 0803 	add.w	r8, r4, r3
 8000b54:	f000 fb36 	bl	80011c4 <_sbrk_r>
 8000b58:	4580      	cmp	r8, r0
 8000b5a:	d13a      	bne.n	8000bd2 <_malloc_r+0xd2>
 8000b5c:	6821      	ldr	r1, [r4, #0]
 8000b5e:	3503      	adds	r5, #3
 8000b60:	1a6d      	subs	r5, r5, r1
 8000b62:	f025 0503 	bic.w	r5, r5, #3
 8000b66:	3508      	adds	r5, #8
 8000b68:	2d0c      	cmp	r5, #12
 8000b6a:	bf38      	it	cc
 8000b6c:	250c      	movcc	r5, #12
 8000b6e:	4629      	mov	r1, r5
 8000b70:	4638      	mov	r0, r7
 8000b72:	f7ff ffa5 	bl	8000ac0 <sbrk_aligned>
 8000b76:	3001      	adds	r0, #1
 8000b78:	d02b      	beq.n	8000bd2 <_malloc_r+0xd2>
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	442b      	add	r3, r5
 8000b7e:	6023      	str	r3, [r4, #0]
 8000b80:	e00e      	b.n	8000ba0 <_malloc_r+0xa0>
 8000b82:	6822      	ldr	r2, [r4, #0]
 8000b84:	1b52      	subs	r2, r2, r5
 8000b86:	d41e      	bmi.n	8000bc6 <_malloc_r+0xc6>
 8000b88:	2a0b      	cmp	r2, #11
 8000b8a:	d916      	bls.n	8000bba <_malloc_r+0xba>
 8000b8c:	1961      	adds	r1, r4, r5
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	6025      	str	r5, [r4, #0]
 8000b92:	bf18      	it	ne
 8000b94:	6059      	strne	r1, [r3, #4]
 8000b96:	6863      	ldr	r3, [r4, #4]
 8000b98:	bf08      	it	eq
 8000b9a:	6031      	streq	r1, [r6, #0]
 8000b9c:	5162      	str	r2, [r4, r5]
 8000b9e:	604b      	str	r3, [r1, #4]
 8000ba0:	4638      	mov	r0, r7
 8000ba2:	f104 060b 	add.w	r6, r4, #11
 8000ba6:	f000 fd83 	bl	80016b0 <__malloc_unlock>
 8000baa:	f026 0607 	bic.w	r6, r6, #7
 8000bae:	1d23      	adds	r3, r4, #4
 8000bb0:	1af2      	subs	r2, r6, r3
 8000bb2:	d0b6      	beq.n	8000b22 <_malloc_r+0x22>
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	50a3      	str	r3, [r4, r2]
 8000bb8:	e7b3      	b.n	8000b22 <_malloc_r+0x22>
 8000bba:	6862      	ldr	r2, [r4, #4]
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	bf0c      	ite	eq
 8000bc0:	6032      	streq	r2, [r6, #0]
 8000bc2:	605a      	strne	r2, [r3, #4]
 8000bc4:	e7ec      	b.n	8000ba0 <_malloc_r+0xa0>
 8000bc6:	4623      	mov	r3, r4
 8000bc8:	6864      	ldr	r4, [r4, #4]
 8000bca:	e7b2      	b.n	8000b32 <_malloc_r+0x32>
 8000bcc:	4634      	mov	r4, r6
 8000bce:	6876      	ldr	r6, [r6, #4]
 8000bd0:	e7b9      	b.n	8000b46 <_malloc_r+0x46>
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	f000 fd6a 	bl	80016b0 <__malloc_unlock>
 8000bdc:	e7a1      	b.n	8000b22 <_malloc_r+0x22>
 8000bde:	6025      	str	r5, [r4, #0]
 8000be0:	e7de      	b.n	8000ba0 <_malloc_r+0xa0>
 8000be2:	bf00      	nop
 8000be4:	20000088 	.word	0x20000088

08000be8 <__sfputc_r>:
 8000be8:	6893      	ldr	r3, [r2, #8]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	b410      	push	{r4}
 8000bf0:	6093      	str	r3, [r2, #8]
 8000bf2:	da08      	bge.n	8000c06 <__sfputc_r+0x1e>
 8000bf4:	6994      	ldr	r4, [r2, #24]
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	db01      	blt.n	8000bfe <__sfputc_r+0x16>
 8000bfa:	290a      	cmp	r1, #10
 8000bfc:	d103      	bne.n	8000c06 <__sfputc_r+0x1e>
 8000bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c02:	f000 bb33 	b.w	800126c <__swbuf_r>
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	1c58      	adds	r0, r3, #1
 8000c0a:	6010      	str	r0, [r2, #0]
 8000c0c:	7019      	strb	r1, [r3, #0]
 8000c0e:	4608      	mov	r0, r1
 8000c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <__sfputs_r>:
 8000c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c18:	4606      	mov	r6, r0
 8000c1a:	460f      	mov	r7, r1
 8000c1c:	4614      	mov	r4, r2
 8000c1e:	18d5      	adds	r5, r2, r3
 8000c20:	42ac      	cmp	r4, r5
 8000c22:	d101      	bne.n	8000c28 <__sfputs_r+0x12>
 8000c24:	2000      	movs	r0, #0
 8000c26:	e007      	b.n	8000c38 <__sfputs_r+0x22>
 8000c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c2c:	463a      	mov	r2, r7
 8000c2e:	4630      	mov	r0, r6
 8000c30:	f7ff ffda 	bl	8000be8 <__sfputc_r>
 8000c34:	1c43      	adds	r3, r0, #1
 8000c36:	d1f3      	bne.n	8000c20 <__sfputs_r+0xa>
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c3c <_vfiprintf_r>:
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c40:	460d      	mov	r5, r1
 8000c42:	b09d      	sub	sp, #116	; 0x74
 8000c44:	4614      	mov	r4, r2
 8000c46:	4698      	mov	r8, r3
 8000c48:	4606      	mov	r6, r0
 8000c4a:	b118      	cbz	r0, 8000c54 <_vfiprintf_r+0x18>
 8000c4c:	6983      	ldr	r3, [r0, #24]
 8000c4e:	b90b      	cbnz	r3, 8000c54 <_vfiprintf_r+0x18>
 8000c50:	f7ff fe96 	bl	8000980 <__sinit>
 8000c54:	4b89      	ldr	r3, [pc, #548]	; (8000e7c <_vfiprintf_r+0x240>)
 8000c56:	429d      	cmp	r5, r3
 8000c58:	d11b      	bne.n	8000c92 <_vfiprintf_r+0x56>
 8000c5a:	6875      	ldr	r5, [r6, #4]
 8000c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c5e:	07d9      	lsls	r1, r3, #31
 8000c60:	d405      	bmi.n	8000c6e <_vfiprintf_r+0x32>
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	059a      	lsls	r2, r3, #22
 8000c66:	d402      	bmi.n	8000c6e <_vfiprintf_r+0x32>
 8000c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c6a:	f7ff ff27 	bl	8000abc <__retarget_lock_acquire_recursive>
 8000c6e:	89ab      	ldrh	r3, [r5, #12]
 8000c70:	071b      	lsls	r3, r3, #28
 8000c72:	d501      	bpl.n	8000c78 <_vfiprintf_r+0x3c>
 8000c74:	692b      	ldr	r3, [r5, #16]
 8000c76:	b9eb      	cbnz	r3, 8000cb4 <_vfiprintf_r+0x78>
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f000 fb5a 	bl	8001334 <__swsetup_r>
 8000c80:	b1c0      	cbz	r0, 8000cb4 <_vfiprintf_r+0x78>
 8000c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c84:	07dc      	lsls	r4, r3, #31
 8000c86:	d50e      	bpl.n	8000ca6 <_vfiprintf_r+0x6a>
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c8c:	b01d      	add	sp, #116	; 0x74
 8000c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c92:	4b7b      	ldr	r3, [pc, #492]	; (8000e80 <_vfiprintf_r+0x244>)
 8000c94:	429d      	cmp	r5, r3
 8000c96:	d101      	bne.n	8000c9c <_vfiprintf_r+0x60>
 8000c98:	68b5      	ldr	r5, [r6, #8]
 8000c9a:	e7df      	b.n	8000c5c <_vfiprintf_r+0x20>
 8000c9c:	4b79      	ldr	r3, [pc, #484]	; (8000e84 <_vfiprintf_r+0x248>)
 8000c9e:	429d      	cmp	r5, r3
 8000ca0:	bf08      	it	eq
 8000ca2:	68f5      	ldreq	r5, [r6, #12]
 8000ca4:	e7da      	b.n	8000c5c <_vfiprintf_r+0x20>
 8000ca6:	89ab      	ldrh	r3, [r5, #12]
 8000ca8:	0598      	lsls	r0, r3, #22
 8000caa:	d4ed      	bmi.n	8000c88 <_vfiprintf_r+0x4c>
 8000cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cae:	f7ff ff06 	bl	8000abe <__retarget_lock_release_recursive>
 8000cb2:	e7e9      	b.n	8000c88 <_vfiprintf_r+0x4c>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8000cb8:	2320      	movs	r3, #32
 8000cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e88 <_vfiprintf_r+0x24c>
 8000cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ccc:	f04f 0901 	mov.w	r9, #1
 8000cd0:	4623      	mov	r3, r4
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cd8:	b10a      	cbz	r2, 8000cde <_vfiprintf_r+0xa2>
 8000cda:	2a25      	cmp	r2, #37	; 0x25
 8000cdc:	d1f9      	bne.n	8000cd2 <_vfiprintf_r+0x96>
 8000cde:	ebba 0b04 	subs.w	fp, sl, r4
 8000ce2:	d00b      	beq.n	8000cfc <_vfiprintf_r+0xc0>
 8000ce4:	465b      	mov	r3, fp
 8000ce6:	4622      	mov	r2, r4
 8000ce8:	4629      	mov	r1, r5
 8000cea:	4630      	mov	r0, r6
 8000cec:	f7ff ff93 	bl	8000c16 <__sfputs_r>
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	f000 80aa 	beq.w	8000e4a <_vfiprintf_r+0x20e>
 8000cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cf8:	445a      	add	r2, fp
 8000cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8000cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80a2 	beq.w	8000e4a <_vfiprintf_r+0x20e>
 8000d06:	2300      	movs	r3, #0
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d10:	f10a 0a01 	add.w	sl, sl, #1
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	9307      	str	r3, [sp, #28]
 8000d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8000d1e:	4654      	mov	r4, sl
 8000d20:	2205      	movs	r2, #5
 8000d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d26:	4858      	ldr	r0, [pc, #352]	; (8000e88 <_vfiprintf_r+0x24c>)
 8000d28:	f7ff fa8a 	bl	8000240 <memchr>
 8000d2c:	9a04      	ldr	r2, [sp, #16]
 8000d2e:	b9d8      	cbnz	r0, 8000d68 <_vfiprintf_r+0x12c>
 8000d30:	06d1      	lsls	r1, r2, #27
 8000d32:	bf44      	itt	mi
 8000d34:	2320      	movmi	r3, #32
 8000d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d3a:	0713      	lsls	r3, r2, #28
 8000d3c:	bf44      	itt	mi
 8000d3e:	232b      	movmi	r3, #43	; 0x2b
 8000d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d44:	f89a 3000 	ldrb.w	r3, [sl]
 8000d48:	2b2a      	cmp	r3, #42	; 0x2a
 8000d4a:	d015      	beq.n	8000d78 <_vfiprintf_r+0x13c>
 8000d4c:	9a07      	ldr	r2, [sp, #28]
 8000d4e:	4654      	mov	r4, sl
 8000d50:	2000      	movs	r0, #0
 8000d52:	f04f 0c0a 	mov.w	ip, #10
 8000d56:	4621      	mov	r1, r4
 8000d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d5c:	3b30      	subs	r3, #48	; 0x30
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	d94e      	bls.n	8000e00 <_vfiprintf_r+0x1c4>
 8000d62:	b1b0      	cbz	r0, 8000d92 <_vfiprintf_r+0x156>
 8000d64:	9207      	str	r2, [sp, #28]
 8000d66:	e014      	b.n	8000d92 <_vfiprintf_r+0x156>
 8000d68:	eba0 0308 	sub.w	r3, r0, r8
 8000d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	9304      	str	r3, [sp, #16]
 8000d74:	46a2      	mov	sl, r4
 8000d76:	e7d2      	b.n	8000d1e <_vfiprintf_r+0xe2>
 8000d78:	9b03      	ldr	r3, [sp, #12]
 8000d7a:	1d19      	adds	r1, r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	9103      	str	r1, [sp, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bfbb      	ittet	lt
 8000d84:	425b      	neglt	r3, r3
 8000d86:	f042 0202 	orrlt.w	r2, r2, #2
 8000d8a:	9307      	strge	r3, [sp, #28]
 8000d8c:	9307      	strlt	r3, [sp, #28]
 8000d8e:	bfb8      	it	lt
 8000d90:	9204      	strlt	r2, [sp, #16]
 8000d92:	7823      	ldrb	r3, [r4, #0]
 8000d94:	2b2e      	cmp	r3, #46	; 0x2e
 8000d96:	d10c      	bne.n	8000db2 <_vfiprintf_r+0x176>
 8000d98:	7863      	ldrb	r3, [r4, #1]
 8000d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d9c:	d135      	bne.n	8000e0a <_vfiprintf_r+0x1ce>
 8000d9e:	9b03      	ldr	r3, [sp, #12]
 8000da0:	1d1a      	adds	r2, r3, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	9203      	str	r2, [sp, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bfb8      	it	lt
 8000daa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000dae:	3402      	adds	r4, #2
 8000db0:	9305      	str	r3, [sp, #20]
 8000db2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000e98 <_vfiprintf_r+0x25c>
 8000db6:	7821      	ldrb	r1, [r4, #0]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4650      	mov	r0, sl
 8000dbc:	f7ff fa40 	bl	8000240 <memchr>
 8000dc0:	b140      	cbz	r0, 8000dd4 <_vfiprintf_r+0x198>
 8000dc2:	2340      	movs	r3, #64	; 0x40
 8000dc4:	eba0 000a 	sub.w	r0, r0, sl
 8000dc8:	fa03 f000 	lsl.w	r0, r3, r0
 8000dcc:	9b04      	ldr	r3, [sp, #16]
 8000dce:	4303      	orrs	r3, r0
 8000dd0:	3401      	adds	r4, #1
 8000dd2:	9304      	str	r3, [sp, #16]
 8000dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dd8:	482c      	ldr	r0, [pc, #176]	; (8000e8c <_vfiprintf_r+0x250>)
 8000dda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000dde:	2206      	movs	r2, #6
 8000de0:	f7ff fa2e 	bl	8000240 <memchr>
 8000de4:	2800      	cmp	r0, #0
 8000de6:	d03f      	beq.n	8000e68 <_vfiprintf_r+0x22c>
 8000de8:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <_vfiprintf_r+0x254>)
 8000dea:	bb1b      	cbnz	r3, 8000e34 <_vfiprintf_r+0x1f8>
 8000dec:	9b03      	ldr	r3, [sp, #12]
 8000dee:	3307      	adds	r3, #7
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	3308      	adds	r3, #8
 8000df6:	9303      	str	r3, [sp, #12]
 8000df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dfa:	443b      	add	r3, r7
 8000dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8000dfe:	e767      	b.n	8000cd0 <_vfiprintf_r+0x94>
 8000e00:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e04:	460c      	mov	r4, r1
 8000e06:	2001      	movs	r0, #1
 8000e08:	e7a5      	b.n	8000d56 <_vfiprintf_r+0x11a>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	3401      	adds	r4, #1
 8000e0e:	9305      	str	r3, [sp, #20]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f04f 0c0a 	mov.w	ip, #10
 8000e16:	4620      	mov	r0, r4
 8000e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e1c:	3a30      	subs	r2, #48	; 0x30
 8000e1e:	2a09      	cmp	r2, #9
 8000e20:	d903      	bls.n	8000e2a <_vfiprintf_r+0x1ee>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0c5      	beq.n	8000db2 <_vfiprintf_r+0x176>
 8000e26:	9105      	str	r1, [sp, #20]
 8000e28:	e7c3      	b.n	8000db2 <_vfiprintf_r+0x176>
 8000e2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e2e:	4604      	mov	r4, r0
 8000e30:	2301      	movs	r3, #1
 8000e32:	e7f0      	b.n	8000e16 <_vfiprintf_r+0x1da>
 8000e34:	ab03      	add	r3, sp, #12
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	462a      	mov	r2, r5
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <_vfiprintf_r+0x258>)
 8000e3c:	a904      	add	r1, sp, #16
 8000e3e:	4630      	mov	r0, r6
 8000e40:	f3af 8000 	nop.w
 8000e44:	4607      	mov	r7, r0
 8000e46:	1c78      	adds	r0, r7, #1
 8000e48:	d1d6      	bne.n	8000df8 <_vfiprintf_r+0x1bc>
 8000e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e4c:	07d9      	lsls	r1, r3, #31
 8000e4e:	d405      	bmi.n	8000e5c <_vfiprintf_r+0x220>
 8000e50:	89ab      	ldrh	r3, [r5, #12]
 8000e52:	059a      	lsls	r2, r3, #22
 8000e54:	d402      	bmi.n	8000e5c <_vfiprintf_r+0x220>
 8000e56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e58:	f7ff fe31 	bl	8000abe <__retarget_lock_release_recursive>
 8000e5c:	89ab      	ldrh	r3, [r5, #12]
 8000e5e:	065b      	lsls	r3, r3, #25
 8000e60:	f53f af12 	bmi.w	8000c88 <_vfiprintf_r+0x4c>
 8000e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e66:	e711      	b.n	8000c8c <_vfiprintf_r+0x50>
 8000e68:	ab03      	add	r3, sp, #12
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	462a      	mov	r2, r5
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <_vfiprintf_r+0x258>)
 8000e70:	a904      	add	r1, sp, #16
 8000e72:	4630      	mov	r0, r6
 8000e74:	f000 f880 	bl	8000f78 <_printf_i>
 8000e78:	e7e4      	b.n	8000e44 <_vfiprintf_r+0x208>
 8000e7a:	bf00      	nop
 8000e7c:	08001810 	.word	0x08001810
 8000e80:	08001830 	.word	0x08001830
 8000e84:	080017f0 	.word	0x080017f0
 8000e88:	08001850 	.word	0x08001850
 8000e8c:	0800185a 	.word	0x0800185a
 8000e90:	00000000 	.word	0x00000000
 8000e94:	08000c17 	.word	0x08000c17
 8000e98:	08001856 	.word	0x08001856

08000e9c <_printf_common>:
 8000e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea0:	4616      	mov	r6, r2
 8000ea2:	4699      	mov	r9, r3
 8000ea4:	688a      	ldr	r2, [r1, #8]
 8000ea6:	690b      	ldr	r3, [r1, #16]
 8000ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000eac:	4293      	cmp	r3, r2
 8000eae:	bfb8      	it	lt
 8000eb0:	4613      	movlt	r3, r2
 8000eb2:	6033      	str	r3, [r6, #0]
 8000eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000eb8:	4607      	mov	r7, r0
 8000eba:	460c      	mov	r4, r1
 8000ebc:	b10a      	cbz	r2, 8000ec2 <_printf_common+0x26>
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	6033      	str	r3, [r6, #0]
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	0699      	lsls	r1, r3, #26
 8000ec6:	bf42      	ittt	mi
 8000ec8:	6833      	ldrmi	r3, [r6, #0]
 8000eca:	3302      	addmi	r3, #2
 8000ecc:	6033      	strmi	r3, [r6, #0]
 8000ece:	6825      	ldr	r5, [r4, #0]
 8000ed0:	f015 0506 	ands.w	r5, r5, #6
 8000ed4:	d106      	bne.n	8000ee4 <_printf_common+0x48>
 8000ed6:	f104 0a19 	add.w	sl, r4, #25
 8000eda:	68e3      	ldr	r3, [r4, #12]
 8000edc:	6832      	ldr	r2, [r6, #0]
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	42ab      	cmp	r3, r5
 8000ee2:	dc26      	bgt.n	8000f32 <_printf_common+0x96>
 8000ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ee8:	1e13      	subs	r3, r2, #0
 8000eea:	6822      	ldr	r2, [r4, #0]
 8000eec:	bf18      	it	ne
 8000eee:	2301      	movne	r3, #1
 8000ef0:	0692      	lsls	r2, r2, #26
 8000ef2:	d42b      	bmi.n	8000f4c <_printf_common+0xb0>
 8000ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ef8:	4649      	mov	r1, r9
 8000efa:	4638      	mov	r0, r7
 8000efc:	47c0      	blx	r8
 8000efe:	3001      	adds	r0, #1
 8000f00:	d01e      	beq.n	8000f40 <_printf_common+0xa4>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	68e5      	ldr	r5, [r4, #12]
 8000f06:	6832      	ldr	r2, [r6, #0]
 8000f08:	f003 0306 	and.w	r3, r3, #6
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	bf08      	it	eq
 8000f10:	1aad      	subeq	r5, r5, r2
 8000f12:	68a3      	ldr	r3, [r4, #8]
 8000f14:	6922      	ldr	r2, [r4, #16]
 8000f16:	bf0c      	ite	eq
 8000f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f1c:	2500      	movne	r5, #0
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	bfc4      	itt	gt
 8000f22:	1a9b      	subgt	r3, r3, r2
 8000f24:	18ed      	addgt	r5, r5, r3
 8000f26:	2600      	movs	r6, #0
 8000f28:	341a      	adds	r4, #26
 8000f2a:	42b5      	cmp	r5, r6
 8000f2c:	d11a      	bne.n	8000f64 <_printf_common+0xc8>
 8000f2e:	2000      	movs	r0, #0
 8000f30:	e008      	b.n	8000f44 <_printf_common+0xa8>
 8000f32:	2301      	movs	r3, #1
 8000f34:	4652      	mov	r2, sl
 8000f36:	4649      	mov	r1, r9
 8000f38:	4638      	mov	r0, r7
 8000f3a:	47c0      	blx	r8
 8000f3c:	3001      	adds	r0, #1
 8000f3e:	d103      	bne.n	8000f48 <_printf_common+0xac>
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	3501      	adds	r5, #1
 8000f4a:	e7c6      	b.n	8000eda <_printf_common+0x3e>
 8000f4c:	18e1      	adds	r1, r4, r3
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	2030      	movs	r0, #48	; 0x30
 8000f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f56:	4422      	add	r2, r4
 8000f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f60:	3302      	adds	r3, #2
 8000f62:	e7c7      	b.n	8000ef4 <_printf_common+0x58>
 8000f64:	2301      	movs	r3, #1
 8000f66:	4622      	mov	r2, r4
 8000f68:	4649      	mov	r1, r9
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	47c0      	blx	r8
 8000f6e:	3001      	adds	r0, #1
 8000f70:	d0e6      	beq.n	8000f40 <_printf_common+0xa4>
 8000f72:	3601      	adds	r6, #1
 8000f74:	e7d9      	b.n	8000f2a <_printf_common+0x8e>
	...

08000f78 <_printf_i>:
 8000f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f7c:	7e0f      	ldrb	r7, [r1, #24]
 8000f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f80:	2f78      	cmp	r7, #120	; 0x78
 8000f82:	4691      	mov	r9, r2
 8000f84:	4680      	mov	r8, r0
 8000f86:	460c      	mov	r4, r1
 8000f88:	469a      	mov	sl, r3
 8000f8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f8e:	d807      	bhi.n	8000fa0 <_printf_i+0x28>
 8000f90:	2f62      	cmp	r7, #98	; 0x62
 8000f92:	d80a      	bhi.n	8000faa <_printf_i+0x32>
 8000f94:	2f00      	cmp	r7, #0
 8000f96:	f000 80d8 	beq.w	800114a <_printf_i+0x1d2>
 8000f9a:	2f58      	cmp	r7, #88	; 0x58
 8000f9c:	f000 80a3 	beq.w	80010e6 <_printf_i+0x16e>
 8000fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000fa8:	e03a      	b.n	8001020 <_printf_i+0xa8>
 8000faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000fae:	2b15      	cmp	r3, #21
 8000fb0:	d8f6      	bhi.n	8000fa0 <_printf_i+0x28>
 8000fb2:	a101      	add	r1, pc, #4	; (adr r1, 8000fb8 <_printf_i+0x40>)
 8000fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fb8:	08001011 	.word	0x08001011
 8000fbc:	08001025 	.word	0x08001025
 8000fc0:	08000fa1 	.word	0x08000fa1
 8000fc4:	08000fa1 	.word	0x08000fa1
 8000fc8:	08000fa1 	.word	0x08000fa1
 8000fcc:	08000fa1 	.word	0x08000fa1
 8000fd0:	08001025 	.word	0x08001025
 8000fd4:	08000fa1 	.word	0x08000fa1
 8000fd8:	08000fa1 	.word	0x08000fa1
 8000fdc:	08000fa1 	.word	0x08000fa1
 8000fe0:	08000fa1 	.word	0x08000fa1
 8000fe4:	08001131 	.word	0x08001131
 8000fe8:	08001055 	.word	0x08001055
 8000fec:	08001113 	.word	0x08001113
 8000ff0:	08000fa1 	.word	0x08000fa1
 8000ff4:	08000fa1 	.word	0x08000fa1
 8000ff8:	08001153 	.word	0x08001153
 8000ffc:	08000fa1 	.word	0x08000fa1
 8001000:	08001055 	.word	0x08001055
 8001004:	08000fa1 	.word	0x08000fa1
 8001008:	08000fa1 	.word	0x08000fa1
 800100c:	0800111b 	.word	0x0800111b
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	1d1a      	adds	r2, r3, #4
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	602a      	str	r2, [r5, #0]
 8001018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800101c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001020:	2301      	movs	r3, #1
 8001022:	e0a3      	b.n	800116c <_printf_i+0x1f4>
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	6829      	ldr	r1, [r5, #0]
 8001028:	0606      	lsls	r6, r0, #24
 800102a:	f101 0304 	add.w	r3, r1, #4
 800102e:	d50a      	bpl.n	8001046 <_printf_i+0xce>
 8001030:	680e      	ldr	r6, [r1, #0]
 8001032:	602b      	str	r3, [r5, #0]
 8001034:	2e00      	cmp	r6, #0
 8001036:	da03      	bge.n	8001040 <_printf_i+0xc8>
 8001038:	232d      	movs	r3, #45	; 0x2d
 800103a:	4276      	negs	r6, r6
 800103c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001040:	485e      	ldr	r0, [pc, #376]	; (80011bc <_printf_i+0x244>)
 8001042:	230a      	movs	r3, #10
 8001044:	e019      	b.n	800107a <_printf_i+0x102>
 8001046:	680e      	ldr	r6, [r1, #0]
 8001048:	602b      	str	r3, [r5, #0]
 800104a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800104e:	bf18      	it	ne
 8001050:	b236      	sxthne	r6, r6
 8001052:	e7ef      	b.n	8001034 <_printf_i+0xbc>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	1d19      	adds	r1, r3, #4
 800105a:	6029      	str	r1, [r5, #0]
 800105c:	0601      	lsls	r1, r0, #24
 800105e:	d501      	bpl.n	8001064 <_printf_i+0xec>
 8001060:	681e      	ldr	r6, [r3, #0]
 8001062:	e002      	b.n	800106a <_printf_i+0xf2>
 8001064:	0646      	lsls	r6, r0, #25
 8001066:	d5fb      	bpl.n	8001060 <_printf_i+0xe8>
 8001068:	881e      	ldrh	r6, [r3, #0]
 800106a:	4854      	ldr	r0, [pc, #336]	; (80011bc <_printf_i+0x244>)
 800106c:	2f6f      	cmp	r7, #111	; 0x6f
 800106e:	bf0c      	ite	eq
 8001070:	2308      	moveq	r3, #8
 8001072:	230a      	movne	r3, #10
 8001074:	2100      	movs	r1, #0
 8001076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800107a:	6865      	ldr	r5, [r4, #4]
 800107c:	60a5      	str	r5, [r4, #8]
 800107e:	2d00      	cmp	r5, #0
 8001080:	bfa2      	ittt	ge
 8001082:	6821      	ldrge	r1, [r4, #0]
 8001084:	f021 0104 	bicge.w	r1, r1, #4
 8001088:	6021      	strge	r1, [r4, #0]
 800108a:	b90e      	cbnz	r6, 8001090 <_printf_i+0x118>
 800108c:	2d00      	cmp	r5, #0
 800108e:	d04d      	beq.n	800112c <_printf_i+0x1b4>
 8001090:	4615      	mov	r5, r2
 8001092:	fbb6 f1f3 	udiv	r1, r6, r3
 8001096:	fb03 6711 	mls	r7, r3, r1, r6
 800109a:	5dc7      	ldrb	r7, [r0, r7]
 800109c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80010a0:	4637      	mov	r7, r6
 80010a2:	42bb      	cmp	r3, r7
 80010a4:	460e      	mov	r6, r1
 80010a6:	d9f4      	bls.n	8001092 <_printf_i+0x11a>
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d10b      	bne.n	80010c4 <_printf_i+0x14c>
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	07de      	lsls	r6, r3, #31
 80010b0:	d508      	bpl.n	80010c4 <_printf_i+0x14c>
 80010b2:	6923      	ldr	r3, [r4, #16]
 80010b4:	6861      	ldr	r1, [r4, #4]
 80010b6:	4299      	cmp	r1, r3
 80010b8:	bfde      	ittt	le
 80010ba:	2330      	movle	r3, #48	; 0x30
 80010bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80010c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80010c4:	1b52      	subs	r2, r2, r5
 80010c6:	6122      	str	r2, [r4, #16]
 80010c8:	f8cd a000 	str.w	sl, [sp]
 80010cc:	464b      	mov	r3, r9
 80010ce:	aa03      	add	r2, sp, #12
 80010d0:	4621      	mov	r1, r4
 80010d2:	4640      	mov	r0, r8
 80010d4:	f7ff fee2 	bl	8000e9c <_printf_common>
 80010d8:	3001      	adds	r0, #1
 80010da:	d14c      	bne.n	8001176 <_printf_i+0x1fe>
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e0:	b004      	add	sp, #16
 80010e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e6:	4835      	ldr	r0, [pc, #212]	; (80011bc <_printf_i+0x244>)
 80010e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80010ec:	6829      	ldr	r1, [r5, #0]
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80010f4:	6029      	str	r1, [r5, #0]
 80010f6:	061d      	lsls	r5, r3, #24
 80010f8:	d514      	bpl.n	8001124 <_printf_i+0x1ac>
 80010fa:	07df      	lsls	r7, r3, #31
 80010fc:	bf44      	itt	mi
 80010fe:	f043 0320 	orrmi.w	r3, r3, #32
 8001102:	6023      	strmi	r3, [r4, #0]
 8001104:	b91e      	cbnz	r6, 800110e <_printf_i+0x196>
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	f023 0320 	bic.w	r3, r3, #32
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	2310      	movs	r3, #16
 8001110:	e7b0      	b.n	8001074 <_printf_i+0xfc>
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	f043 0320 	orr.w	r3, r3, #32
 8001118:	6023      	str	r3, [r4, #0]
 800111a:	2378      	movs	r3, #120	; 0x78
 800111c:	4828      	ldr	r0, [pc, #160]	; (80011c0 <_printf_i+0x248>)
 800111e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001122:	e7e3      	b.n	80010ec <_printf_i+0x174>
 8001124:	0659      	lsls	r1, r3, #25
 8001126:	bf48      	it	mi
 8001128:	b2b6      	uxthmi	r6, r6
 800112a:	e7e6      	b.n	80010fa <_printf_i+0x182>
 800112c:	4615      	mov	r5, r2
 800112e:	e7bb      	b.n	80010a8 <_printf_i+0x130>
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	6826      	ldr	r6, [r4, #0]
 8001134:	6961      	ldr	r1, [r4, #20]
 8001136:	1d18      	adds	r0, r3, #4
 8001138:	6028      	str	r0, [r5, #0]
 800113a:	0635      	lsls	r5, r6, #24
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	d501      	bpl.n	8001144 <_printf_i+0x1cc>
 8001140:	6019      	str	r1, [r3, #0]
 8001142:	e002      	b.n	800114a <_printf_i+0x1d2>
 8001144:	0670      	lsls	r0, r6, #25
 8001146:	d5fb      	bpl.n	8001140 <_printf_i+0x1c8>
 8001148:	8019      	strh	r1, [r3, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	6123      	str	r3, [r4, #16]
 800114e:	4615      	mov	r5, r2
 8001150:	e7ba      	b.n	80010c8 <_printf_i+0x150>
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	1d1a      	adds	r2, r3, #4
 8001156:	602a      	str	r2, [r5, #0]
 8001158:	681d      	ldr	r5, [r3, #0]
 800115a:	6862      	ldr	r2, [r4, #4]
 800115c:	2100      	movs	r1, #0
 800115e:	4628      	mov	r0, r5
 8001160:	f7ff f86e 	bl	8000240 <memchr>
 8001164:	b108      	cbz	r0, 800116a <_printf_i+0x1f2>
 8001166:	1b40      	subs	r0, r0, r5
 8001168:	6060      	str	r0, [r4, #4]
 800116a:	6863      	ldr	r3, [r4, #4]
 800116c:	6123      	str	r3, [r4, #16]
 800116e:	2300      	movs	r3, #0
 8001170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001174:	e7a8      	b.n	80010c8 <_printf_i+0x150>
 8001176:	6923      	ldr	r3, [r4, #16]
 8001178:	462a      	mov	r2, r5
 800117a:	4649      	mov	r1, r9
 800117c:	4640      	mov	r0, r8
 800117e:	47d0      	blx	sl
 8001180:	3001      	adds	r0, #1
 8001182:	d0ab      	beq.n	80010dc <_printf_i+0x164>
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	079b      	lsls	r3, r3, #30
 8001188:	d413      	bmi.n	80011b2 <_printf_i+0x23a>
 800118a:	68e0      	ldr	r0, [r4, #12]
 800118c:	9b03      	ldr	r3, [sp, #12]
 800118e:	4298      	cmp	r0, r3
 8001190:	bfb8      	it	lt
 8001192:	4618      	movlt	r0, r3
 8001194:	e7a4      	b.n	80010e0 <_printf_i+0x168>
 8001196:	2301      	movs	r3, #1
 8001198:	4632      	mov	r2, r6
 800119a:	4649      	mov	r1, r9
 800119c:	4640      	mov	r0, r8
 800119e:	47d0      	blx	sl
 80011a0:	3001      	adds	r0, #1
 80011a2:	d09b      	beq.n	80010dc <_printf_i+0x164>
 80011a4:	3501      	adds	r5, #1
 80011a6:	68e3      	ldr	r3, [r4, #12]
 80011a8:	9903      	ldr	r1, [sp, #12]
 80011aa:	1a5b      	subs	r3, r3, r1
 80011ac:	42ab      	cmp	r3, r5
 80011ae:	dcf2      	bgt.n	8001196 <_printf_i+0x21e>
 80011b0:	e7eb      	b.n	800118a <_printf_i+0x212>
 80011b2:	2500      	movs	r5, #0
 80011b4:	f104 0619 	add.w	r6, r4, #25
 80011b8:	e7f5      	b.n	80011a6 <_printf_i+0x22e>
 80011ba:	bf00      	nop
 80011bc:	08001861 	.word	0x08001861
 80011c0:	08001872 	.word	0x08001872

080011c4 <_sbrk_r>:
 80011c4:	b538      	push	{r3, r4, r5, lr}
 80011c6:	4d06      	ldr	r5, [pc, #24]	; (80011e0 <_sbrk_r+0x1c>)
 80011c8:	2300      	movs	r3, #0
 80011ca:	4604      	mov	r4, r0
 80011cc:	4608      	mov	r0, r1
 80011ce:	602b      	str	r3, [r5, #0]
 80011d0:	f7ff f9b8 	bl	8000544 <_sbrk>
 80011d4:	1c43      	adds	r3, r0, #1
 80011d6:	d102      	bne.n	80011de <_sbrk_r+0x1a>
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	b103      	cbz	r3, 80011de <_sbrk_r+0x1a>
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	bd38      	pop	{r3, r4, r5, pc}
 80011e0:	20000090 	.word	0x20000090

080011e4 <__sread>:
 80011e4:	b510      	push	{r4, lr}
 80011e6:	460c      	mov	r4, r1
 80011e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ec:	f000 fab2 	bl	8001754 <_read_r>
 80011f0:	2800      	cmp	r0, #0
 80011f2:	bfab      	itete	ge
 80011f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011f6:	89a3      	ldrhlt	r3, [r4, #12]
 80011f8:	181b      	addge	r3, r3, r0
 80011fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011fe:	bfac      	ite	ge
 8001200:	6563      	strge	r3, [r4, #84]	; 0x54
 8001202:	81a3      	strhlt	r3, [r4, #12]
 8001204:	bd10      	pop	{r4, pc}

08001206 <__swrite>:
 8001206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800120a:	461f      	mov	r7, r3
 800120c:	898b      	ldrh	r3, [r1, #12]
 800120e:	05db      	lsls	r3, r3, #23
 8001210:	4605      	mov	r5, r0
 8001212:	460c      	mov	r4, r1
 8001214:	4616      	mov	r6, r2
 8001216:	d505      	bpl.n	8001224 <__swrite+0x1e>
 8001218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800121c:	2302      	movs	r3, #2
 800121e:	2200      	movs	r2, #0
 8001220:	f000 f9c8 	bl	80015b4 <_lseek_r>
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800122a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800122e:	81a3      	strh	r3, [r4, #12]
 8001230:	4632      	mov	r2, r6
 8001232:	463b      	mov	r3, r7
 8001234:	4628      	mov	r0, r5
 8001236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800123a:	f000 b869 	b.w	8001310 <_write_r>

0800123e <__sseek>:
 800123e:	b510      	push	{r4, lr}
 8001240:	460c      	mov	r4, r1
 8001242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001246:	f000 f9b5 	bl	80015b4 <_lseek_r>
 800124a:	1c43      	adds	r3, r0, #1
 800124c:	89a3      	ldrh	r3, [r4, #12]
 800124e:	bf15      	itete	ne
 8001250:	6560      	strne	r0, [r4, #84]	; 0x54
 8001252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800125a:	81a3      	strheq	r3, [r4, #12]
 800125c:	bf18      	it	ne
 800125e:	81a3      	strhne	r3, [r4, #12]
 8001260:	bd10      	pop	{r4, pc}

08001262 <__sclose>:
 8001262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001266:	f000 b8d3 	b.w	8001410 <_close_r>
	...

0800126c <__swbuf_r>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	460e      	mov	r6, r1
 8001270:	4614      	mov	r4, r2
 8001272:	4605      	mov	r5, r0
 8001274:	b118      	cbz	r0, 800127e <__swbuf_r+0x12>
 8001276:	6983      	ldr	r3, [r0, #24]
 8001278:	b90b      	cbnz	r3, 800127e <__swbuf_r+0x12>
 800127a:	f7ff fb81 	bl	8000980 <__sinit>
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <__swbuf_r+0x98>)
 8001280:	429c      	cmp	r4, r3
 8001282:	d12b      	bne.n	80012dc <__swbuf_r+0x70>
 8001284:	686c      	ldr	r4, [r5, #4]
 8001286:	69a3      	ldr	r3, [r4, #24]
 8001288:	60a3      	str	r3, [r4, #8]
 800128a:	89a3      	ldrh	r3, [r4, #12]
 800128c:	071a      	lsls	r2, r3, #28
 800128e:	d52f      	bpl.n	80012f0 <__swbuf_r+0x84>
 8001290:	6923      	ldr	r3, [r4, #16]
 8001292:	b36b      	cbz	r3, 80012f0 <__swbuf_r+0x84>
 8001294:	6923      	ldr	r3, [r4, #16]
 8001296:	6820      	ldr	r0, [r4, #0]
 8001298:	1ac0      	subs	r0, r0, r3
 800129a:	6963      	ldr	r3, [r4, #20]
 800129c:	b2f6      	uxtb	r6, r6
 800129e:	4283      	cmp	r3, r0
 80012a0:	4637      	mov	r7, r6
 80012a2:	dc04      	bgt.n	80012ae <__swbuf_r+0x42>
 80012a4:	4621      	mov	r1, r4
 80012a6:	4628      	mov	r0, r5
 80012a8:	f000 f948 	bl	800153c <_fflush_r>
 80012ac:	bb30      	cbnz	r0, 80012fc <__swbuf_r+0x90>
 80012ae:	68a3      	ldr	r3, [r4, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	60a3      	str	r3, [r4, #8]
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	6022      	str	r2, [r4, #0]
 80012ba:	701e      	strb	r6, [r3, #0]
 80012bc:	6963      	ldr	r3, [r4, #20]
 80012be:	3001      	adds	r0, #1
 80012c0:	4283      	cmp	r3, r0
 80012c2:	d004      	beq.n	80012ce <__swbuf_r+0x62>
 80012c4:	89a3      	ldrh	r3, [r4, #12]
 80012c6:	07db      	lsls	r3, r3, #31
 80012c8:	d506      	bpl.n	80012d8 <__swbuf_r+0x6c>
 80012ca:	2e0a      	cmp	r6, #10
 80012cc:	d104      	bne.n	80012d8 <__swbuf_r+0x6c>
 80012ce:	4621      	mov	r1, r4
 80012d0:	4628      	mov	r0, r5
 80012d2:	f000 f933 	bl	800153c <_fflush_r>
 80012d6:	b988      	cbnz	r0, 80012fc <__swbuf_r+0x90>
 80012d8:	4638      	mov	r0, r7
 80012da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <__swbuf_r+0x9c>)
 80012de:	429c      	cmp	r4, r3
 80012e0:	d101      	bne.n	80012e6 <__swbuf_r+0x7a>
 80012e2:	68ac      	ldr	r4, [r5, #8]
 80012e4:	e7cf      	b.n	8001286 <__swbuf_r+0x1a>
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <__swbuf_r+0xa0>)
 80012e8:	429c      	cmp	r4, r3
 80012ea:	bf08      	it	eq
 80012ec:	68ec      	ldreq	r4, [r5, #12]
 80012ee:	e7ca      	b.n	8001286 <__swbuf_r+0x1a>
 80012f0:	4621      	mov	r1, r4
 80012f2:	4628      	mov	r0, r5
 80012f4:	f000 f81e 	bl	8001334 <__swsetup_r>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d0cb      	beq.n	8001294 <__swbuf_r+0x28>
 80012fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001300:	e7ea      	b.n	80012d8 <__swbuf_r+0x6c>
 8001302:	bf00      	nop
 8001304:	08001810 	.word	0x08001810
 8001308:	08001830 	.word	0x08001830
 800130c:	080017f0 	.word	0x080017f0

08001310 <_write_r>:
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	4d07      	ldr	r5, [pc, #28]	; (8001330 <_write_r+0x20>)
 8001314:	4604      	mov	r4, r0
 8001316:	4608      	mov	r0, r1
 8001318:	4611      	mov	r1, r2
 800131a:	2200      	movs	r2, #0
 800131c:	602a      	str	r2, [r5, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	f7ff f8bf 	bl	80004a2 <_write>
 8001324:	1c43      	adds	r3, r0, #1
 8001326:	d102      	bne.n	800132e <_write_r+0x1e>
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	b103      	cbz	r3, 800132e <_write_r+0x1e>
 800132c:	6023      	str	r3, [r4, #0]
 800132e:	bd38      	pop	{r3, r4, r5, pc}
 8001330:	20000090 	.word	0x20000090

08001334 <__swsetup_r>:
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <__swsetup_r+0xcc>)
 8001336:	b570      	push	{r4, r5, r6, lr}
 8001338:	681d      	ldr	r5, [r3, #0]
 800133a:	4606      	mov	r6, r0
 800133c:	460c      	mov	r4, r1
 800133e:	b125      	cbz	r5, 800134a <__swsetup_r+0x16>
 8001340:	69ab      	ldr	r3, [r5, #24]
 8001342:	b913      	cbnz	r3, 800134a <__swsetup_r+0x16>
 8001344:	4628      	mov	r0, r5
 8001346:	f7ff fb1b 	bl	8000980 <__sinit>
 800134a:	4b2e      	ldr	r3, [pc, #184]	; (8001404 <__swsetup_r+0xd0>)
 800134c:	429c      	cmp	r4, r3
 800134e:	d10f      	bne.n	8001370 <__swsetup_r+0x3c>
 8001350:	686c      	ldr	r4, [r5, #4]
 8001352:	89a3      	ldrh	r3, [r4, #12]
 8001354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001358:	0719      	lsls	r1, r3, #28
 800135a:	d42c      	bmi.n	80013b6 <__swsetup_r+0x82>
 800135c:	06dd      	lsls	r5, r3, #27
 800135e:	d411      	bmi.n	8001384 <__swsetup_r+0x50>
 8001360:	2309      	movs	r3, #9
 8001362:	6033      	str	r3, [r6, #0]
 8001364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001368:	81a3      	strh	r3, [r4, #12]
 800136a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136e:	e03e      	b.n	80013ee <__swsetup_r+0xba>
 8001370:	4b25      	ldr	r3, [pc, #148]	; (8001408 <__swsetup_r+0xd4>)
 8001372:	429c      	cmp	r4, r3
 8001374:	d101      	bne.n	800137a <__swsetup_r+0x46>
 8001376:	68ac      	ldr	r4, [r5, #8]
 8001378:	e7eb      	b.n	8001352 <__swsetup_r+0x1e>
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <__swsetup_r+0xd8>)
 800137c:	429c      	cmp	r4, r3
 800137e:	bf08      	it	eq
 8001380:	68ec      	ldreq	r4, [r5, #12]
 8001382:	e7e6      	b.n	8001352 <__swsetup_r+0x1e>
 8001384:	0758      	lsls	r0, r3, #29
 8001386:	d512      	bpl.n	80013ae <__swsetup_r+0x7a>
 8001388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800138a:	b141      	cbz	r1, 800139e <__swsetup_r+0x6a>
 800138c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001390:	4299      	cmp	r1, r3
 8001392:	d002      	beq.n	800139a <__swsetup_r+0x66>
 8001394:	4630      	mov	r0, r6
 8001396:	f000 f991 	bl	80016bc <_free_r>
 800139a:	2300      	movs	r3, #0
 800139c:	6363      	str	r3, [r4, #52]	; 0x34
 800139e:	89a3      	ldrh	r3, [r4, #12]
 80013a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013a4:	81a3      	strh	r3, [r4, #12]
 80013a6:	2300      	movs	r3, #0
 80013a8:	6063      	str	r3, [r4, #4]
 80013aa:	6923      	ldr	r3, [r4, #16]
 80013ac:	6023      	str	r3, [r4, #0]
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	81a3      	strh	r3, [r4, #12]
 80013b6:	6923      	ldr	r3, [r4, #16]
 80013b8:	b94b      	cbnz	r3, 80013ce <__swsetup_r+0x9a>
 80013ba:	89a3      	ldrh	r3, [r4, #12]
 80013bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013c4:	d003      	beq.n	80013ce <__swsetup_r+0x9a>
 80013c6:	4621      	mov	r1, r4
 80013c8:	4630      	mov	r0, r6
 80013ca:	f000 f92b 	bl	8001624 <__smakebuf_r>
 80013ce:	89a0      	ldrh	r0, [r4, #12]
 80013d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013d4:	f010 0301 	ands.w	r3, r0, #1
 80013d8:	d00a      	beq.n	80013f0 <__swsetup_r+0xbc>
 80013da:	2300      	movs	r3, #0
 80013dc:	60a3      	str	r3, [r4, #8]
 80013de:	6963      	ldr	r3, [r4, #20]
 80013e0:	425b      	negs	r3, r3
 80013e2:	61a3      	str	r3, [r4, #24]
 80013e4:	6923      	ldr	r3, [r4, #16]
 80013e6:	b943      	cbnz	r3, 80013fa <__swsetup_r+0xc6>
 80013e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013ec:	d1ba      	bne.n	8001364 <__swsetup_r+0x30>
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	0781      	lsls	r1, r0, #30
 80013f2:	bf58      	it	pl
 80013f4:	6963      	ldrpl	r3, [r4, #20]
 80013f6:	60a3      	str	r3, [r4, #8]
 80013f8:	e7f4      	b.n	80013e4 <__swsetup_r+0xb0>
 80013fa:	2000      	movs	r0, #0
 80013fc:	e7f7      	b.n	80013ee <__swsetup_r+0xba>
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000
 8001404:	08001810 	.word	0x08001810
 8001408:	08001830 	.word	0x08001830
 800140c:	080017f0 	.word	0x080017f0

08001410 <_close_r>:
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	4d06      	ldr	r5, [pc, #24]	; (800142c <_close_r+0x1c>)
 8001414:	2300      	movs	r3, #0
 8001416:	4604      	mov	r4, r0
 8001418:	4608      	mov	r0, r1
 800141a:	602b      	str	r3, [r5, #0]
 800141c:	f7ff f85d 	bl	80004da <_close>
 8001420:	1c43      	adds	r3, r0, #1
 8001422:	d102      	bne.n	800142a <_close_r+0x1a>
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	b103      	cbz	r3, 800142a <_close_r+0x1a>
 8001428:	6023      	str	r3, [r4, #0]
 800142a:	bd38      	pop	{r3, r4, r5, pc}
 800142c:	20000090 	.word	0x20000090

08001430 <__sflush_r>:
 8001430:	898a      	ldrh	r2, [r1, #12]
 8001432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001436:	4605      	mov	r5, r0
 8001438:	0710      	lsls	r0, r2, #28
 800143a:	460c      	mov	r4, r1
 800143c:	d458      	bmi.n	80014f0 <__sflush_r+0xc0>
 800143e:	684b      	ldr	r3, [r1, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc05      	bgt.n	8001450 <__sflush_r+0x20>
 8001444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	dc02      	bgt.n	8001450 <__sflush_r+0x20>
 800144a:	2000      	movs	r0, #0
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001452:	2e00      	cmp	r6, #0
 8001454:	d0f9      	beq.n	800144a <__sflush_r+0x1a>
 8001456:	2300      	movs	r3, #0
 8001458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800145c:	682f      	ldr	r7, [r5, #0]
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	d032      	beq.n	80014c8 <__sflush_r+0x98>
 8001462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001464:	89a3      	ldrh	r3, [r4, #12]
 8001466:	075a      	lsls	r2, r3, #29
 8001468:	d505      	bpl.n	8001476 <__sflush_r+0x46>
 800146a:	6863      	ldr	r3, [r4, #4]
 800146c:	1ac0      	subs	r0, r0, r3
 800146e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001470:	b10b      	cbz	r3, 8001476 <__sflush_r+0x46>
 8001472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001474:	1ac0      	subs	r0, r0, r3
 8001476:	2300      	movs	r3, #0
 8001478:	4602      	mov	r2, r0
 800147a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800147c:	6a21      	ldr	r1, [r4, #32]
 800147e:	4628      	mov	r0, r5
 8001480:	47b0      	blx	r6
 8001482:	1c43      	adds	r3, r0, #1
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	d106      	bne.n	8001496 <__sflush_r+0x66>
 8001488:	6829      	ldr	r1, [r5, #0]
 800148a:	291d      	cmp	r1, #29
 800148c:	d82c      	bhi.n	80014e8 <__sflush_r+0xb8>
 800148e:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <__sflush_r+0x108>)
 8001490:	40ca      	lsrs	r2, r1
 8001492:	07d6      	lsls	r6, r2, #31
 8001494:	d528      	bpl.n	80014e8 <__sflush_r+0xb8>
 8001496:	2200      	movs	r2, #0
 8001498:	6062      	str	r2, [r4, #4]
 800149a:	04d9      	lsls	r1, r3, #19
 800149c:	6922      	ldr	r2, [r4, #16]
 800149e:	6022      	str	r2, [r4, #0]
 80014a0:	d504      	bpl.n	80014ac <__sflush_r+0x7c>
 80014a2:	1c42      	adds	r2, r0, #1
 80014a4:	d101      	bne.n	80014aa <__sflush_r+0x7a>
 80014a6:	682b      	ldr	r3, [r5, #0]
 80014a8:	b903      	cbnz	r3, 80014ac <__sflush_r+0x7c>
 80014aa:	6560      	str	r0, [r4, #84]	; 0x54
 80014ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014ae:	602f      	str	r7, [r5, #0]
 80014b0:	2900      	cmp	r1, #0
 80014b2:	d0ca      	beq.n	800144a <__sflush_r+0x1a>
 80014b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014b8:	4299      	cmp	r1, r3
 80014ba:	d002      	beq.n	80014c2 <__sflush_r+0x92>
 80014bc:	4628      	mov	r0, r5
 80014be:	f000 f8fd 	bl	80016bc <_free_r>
 80014c2:	2000      	movs	r0, #0
 80014c4:	6360      	str	r0, [r4, #52]	; 0x34
 80014c6:	e7c1      	b.n	800144c <__sflush_r+0x1c>
 80014c8:	6a21      	ldr	r1, [r4, #32]
 80014ca:	2301      	movs	r3, #1
 80014cc:	4628      	mov	r0, r5
 80014ce:	47b0      	blx	r6
 80014d0:	1c41      	adds	r1, r0, #1
 80014d2:	d1c7      	bne.n	8001464 <__sflush_r+0x34>
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0c4      	beq.n	8001464 <__sflush_r+0x34>
 80014da:	2b1d      	cmp	r3, #29
 80014dc:	d001      	beq.n	80014e2 <__sflush_r+0xb2>
 80014de:	2b16      	cmp	r3, #22
 80014e0:	d101      	bne.n	80014e6 <__sflush_r+0xb6>
 80014e2:	602f      	str	r7, [r5, #0]
 80014e4:	e7b1      	b.n	800144a <__sflush_r+0x1a>
 80014e6:	89a3      	ldrh	r3, [r4, #12]
 80014e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ec:	81a3      	strh	r3, [r4, #12]
 80014ee:	e7ad      	b.n	800144c <__sflush_r+0x1c>
 80014f0:	690f      	ldr	r7, [r1, #16]
 80014f2:	2f00      	cmp	r7, #0
 80014f4:	d0a9      	beq.n	800144a <__sflush_r+0x1a>
 80014f6:	0793      	lsls	r3, r2, #30
 80014f8:	680e      	ldr	r6, [r1, #0]
 80014fa:	bf08      	it	eq
 80014fc:	694b      	ldreq	r3, [r1, #20]
 80014fe:	600f      	str	r7, [r1, #0]
 8001500:	bf18      	it	ne
 8001502:	2300      	movne	r3, #0
 8001504:	eba6 0807 	sub.w	r8, r6, r7
 8001508:	608b      	str	r3, [r1, #8]
 800150a:	f1b8 0f00 	cmp.w	r8, #0
 800150e:	dd9c      	ble.n	800144a <__sflush_r+0x1a>
 8001510:	6a21      	ldr	r1, [r4, #32]
 8001512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001514:	4643      	mov	r3, r8
 8001516:	463a      	mov	r2, r7
 8001518:	4628      	mov	r0, r5
 800151a:	47b0      	blx	r6
 800151c:	2800      	cmp	r0, #0
 800151e:	dc06      	bgt.n	800152e <__sflush_r+0xfe>
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001526:	81a3      	strh	r3, [r4, #12]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800152c:	e78e      	b.n	800144c <__sflush_r+0x1c>
 800152e:	4407      	add	r7, r0
 8001530:	eba8 0800 	sub.w	r8, r8, r0
 8001534:	e7e9      	b.n	800150a <__sflush_r+0xda>
 8001536:	bf00      	nop
 8001538:	20400001 	.word	0x20400001

0800153c <_fflush_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	690b      	ldr	r3, [r1, #16]
 8001540:	4605      	mov	r5, r0
 8001542:	460c      	mov	r4, r1
 8001544:	b913      	cbnz	r3, 800154c <_fflush_r+0x10>
 8001546:	2500      	movs	r5, #0
 8001548:	4628      	mov	r0, r5
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	b118      	cbz	r0, 8001556 <_fflush_r+0x1a>
 800154e:	6983      	ldr	r3, [r0, #24]
 8001550:	b90b      	cbnz	r3, 8001556 <_fflush_r+0x1a>
 8001552:	f7ff fa15 	bl	8000980 <__sinit>
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <_fflush_r+0x6c>)
 8001558:	429c      	cmp	r4, r3
 800155a:	d11b      	bne.n	8001594 <_fflush_r+0x58>
 800155c:	686c      	ldr	r4, [r5, #4]
 800155e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0ef      	beq.n	8001546 <_fflush_r+0xa>
 8001566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001568:	07d0      	lsls	r0, r2, #31
 800156a:	d404      	bmi.n	8001576 <_fflush_r+0x3a>
 800156c:	0599      	lsls	r1, r3, #22
 800156e:	d402      	bmi.n	8001576 <_fflush_r+0x3a>
 8001570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001572:	f7ff faa3 	bl	8000abc <__retarget_lock_acquire_recursive>
 8001576:	4628      	mov	r0, r5
 8001578:	4621      	mov	r1, r4
 800157a:	f7ff ff59 	bl	8001430 <__sflush_r>
 800157e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001580:	07da      	lsls	r2, r3, #31
 8001582:	4605      	mov	r5, r0
 8001584:	d4e0      	bmi.n	8001548 <_fflush_r+0xc>
 8001586:	89a3      	ldrh	r3, [r4, #12]
 8001588:	059b      	lsls	r3, r3, #22
 800158a:	d4dd      	bmi.n	8001548 <_fflush_r+0xc>
 800158c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800158e:	f7ff fa96 	bl	8000abe <__retarget_lock_release_recursive>
 8001592:	e7d9      	b.n	8001548 <_fflush_r+0xc>
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <_fflush_r+0x70>)
 8001596:	429c      	cmp	r4, r3
 8001598:	d101      	bne.n	800159e <_fflush_r+0x62>
 800159a:	68ac      	ldr	r4, [r5, #8]
 800159c:	e7df      	b.n	800155e <_fflush_r+0x22>
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <_fflush_r+0x74>)
 80015a0:	429c      	cmp	r4, r3
 80015a2:	bf08      	it	eq
 80015a4:	68ec      	ldreq	r4, [r5, #12]
 80015a6:	e7da      	b.n	800155e <_fflush_r+0x22>
 80015a8:	08001810 	.word	0x08001810
 80015ac:	08001830 	.word	0x08001830
 80015b0:	080017f0 	.word	0x080017f0

080015b4 <_lseek_r>:
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	4d07      	ldr	r5, [pc, #28]	; (80015d4 <_lseek_r+0x20>)
 80015b8:	4604      	mov	r4, r0
 80015ba:	4608      	mov	r0, r1
 80015bc:	4611      	mov	r1, r2
 80015be:	2200      	movs	r2, #0
 80015c0:	602a      	str	r2, [r5, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f7fe ffb0 	bl	8000528 <_lseek>
 80015c8:	1c43      	adds	r3, r0, #1
 80015ca:	d102      	bne.n	80015d2 <_lseek_r+0x1e>
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	b103      	cbz	r3, 80015d2 <_lseek_r+0x1e>
 80015d0:	6023      	str	r3, [r4, #0]
 80015d2:	bd38      	pop	{r3, r4, r5, pc}
 80015d4:	20000090 	.word	0x20000090

080015d8 <__swhatbuf_r>:
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	460e      	mov	r6, r1
 80015dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e0:	2900      	cmp	r1, #0
 80015e2:	b096      	sub	sp, #88	; 0x58
 80015e4:	4614      	mov	r4, r2
 80015e6:	461d      	mov	r5, r3
 80015e8:	da08      	bge.n	80015fc <__swhatbuf_r+0x24>
 80015ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	602a      	str	r2, [r5, #0]
 80015f2:	061a      	lsls	r2, r3, #24
 80015f4:	d410      	bmi.n	8001618 <__swhatbuf_r+0x40>
 80015f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fa:	e00e      	b.n	800161a <__swhatbuf_r+0x42>
 80015fc:	466a      	mov	r2, sp
 80015fe:	f000 f8bb 	bl	8001778 <_fstat_r>
 8001602:	2800      	cmp	r0, #0
 8001604:	dbf1      	blt.n	80015ea <__swhatbuf_r+0x12>
 8001606:	9a01      	ldr	r2, [sp, #4]
 8001608:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800160c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001610:	425a      	negs	r2, r3
 8001612:	415a      	adcs	r2, r3
 8001614:	602a      	str	r2, [r5, #0]
 8001616:	e7ee      	b.n	80015f6 <__swhatbuf_r+0x1e>
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	2000      	movs	r0, #0
 800161c:	6023      	str	r3, [r4, #0]
 800161e:	b016      	add	sp, #88	; 0x58
 8001620:	bd70      	pop	{r4, r5, r6, pc}
	...

08001624 <__smakebuf_r>:
 8001624:	898b      	ldrh	r3, [r1, #12]
 8001626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001628:	079d      	lsls	r5, r3, #30
 800162a:	4606      	mov	r6, r0
 800162c:	460c      	mov	r4, r1
 800162e:	d507      	bpl.n	8001640 <__smakebuf_r+0x1c>
 8001630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	6123      	str	r3, [r4, #16]
 8001638:	2301      	movs	r3, #1
 800163a:	6163      	str	r3, [r4, #20]
 800163c:	b002      	add	sp, #8
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	ab01      	add	r3, sp, #4
 8001642:	466a      	mov	r2, sp
 8001644:	f7ff ffc8 	bl	80015d8 <__swhatbuf_r>
 8001648:	9900      	ldr	r1, [sp, #0]
 800164a:	4605      	mov	r5, r0
 800164c:	4630      	mov	r0, r6
 800164e:	f7ff fa57 	bl	8000b00 <_malloc_r>
 8001652:	b948      	cbnz	r0, 8001668 <__smakebuf_r+0x44>
 8001654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001658:	059a      	lsls	r2, r3, #22
 800165a:	d4ef      	bmi.n	800163c <__smakebuf_r+0x18>
 800165c:	f023 0303 	bic.w	r3, r3, #3
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	81a3      	strh	r3, [r4, #12]
 8001666:	e7e3      	b.n	8001630 <__smakebuf_r+0xc>
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <__smakebuf_r+0x7c>)
 800166a:	62b3      	str	r3, [r6, #40]	; 0x28
 800166c:	89a3      	ldrh	r3, [r4, #12]
 800166e:	6020      	str	r0, [r4, #0]
 8001670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001674:	81a3      	strh	r3, [r4, #12]
 8001676:	9b00      	ldr	r3, [sp, #0]
 8001678:	6163      	str	r3, [r4, #20]
 800167a:	9b01      	ldr	r3, [sp, #4]
 800167c:	6120      	str	r0, [r4, #16]
 800167e:	b15b      	cbz	r3, 8001698 <__smakebuf_r+0x74>
 8001680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001684:	4630      	mov	r0, r6
 8001686:	f000 f889 	bl	800179c <_isatty_r>
 800168a:	b128      	cbz	r0, 8001698 <__smakebuf_r+0x74>
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	81a3      	strh	r3, [r4, #12]
 8001698:	89a0      	ldrh	r0, [r4, #12]
 800169a:	4305      	orrs	r5, r0
 800169c:	81a5      	strh	r5, [r4, #12]
 800169e:	e7cd      	b.n	800163c <__smakebuf_r+0x18>
 80016a0:	08000919 	.word	0x08000919

080016a4 <__malloc_lock>:
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <__malloc_lock+0x8>)
 80016a6:	f7ff ba09 	b.w	8000abc <__retarget_lock_acquire_recursive>
 80016aa:	bf00      	nop
 80016ac:	20000084 	.word	0x20000084

080016b0 <__malloc_unlock>:
 80016b0:	4801      	ldr	r0, [pc, #4]	; (80016b8 <__malloc_unlock+0x8>)
 80016b2:	f7ff ba04 	b.w	8000abe <__retarget_lock_release_recursive>
 80016b6:	bf00      	nop
 80016b8:	20000084 	.word	0x20000084

080016bc <_free_r>:
 80016bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016be:	2900      	cmp	r1, #0
 80016c0:	d044      	beq.n	800174c <_free_r+0x90>
 80016c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016c6:	9001      	str	r0, [sp, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f1a1 0404 	sub.w	r4, r1, #4
 80016ce:	bfb8      	it	lt
 80016d0:	18e4      	addlt	r4, r4, r3
 80016d2:	f7ff ffe7 	bl	80016a4 <__malloc_lock>
 80016d6:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <_free_r+0x94>)
 80016d8:	9801      	ldr	r0, [sp, #4]
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	b933      	cbnz	r3, 80016ec <_free_r+0x30>
 80016de:	6063      	str	r3, [r4, #4]
 80016e0:	6014      	str	r4, [r2, #0]
 80016e2:	b003      	add	sp, #12
 80016e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016e8:	f7ff bfe2 	b.w	80016b0 <__malloc_unlock>
 80016ec:	42a3      	cmp	r3, r4
 80016ee:	d908      	bls.n	8001702 <_free_r+0x46>
 80016f0:	6825      	ldr	r5, [r4, #0]
 80016f2:	1961      	adds	r1, r4, r5
 80016f4:	428b      	cmp	r3, r1
 80016f6:	bf01      	itttt	eq
 80016f8:	6819      	ldreq	r1, [r3, #0]
 80016fa:	685b      	ldreq	r3, [r3, #4]
 80016fc:	1949      	addeq	r1, r1, r5
 80016fe:	6021      	streq	r1, [r4, #0]
 8001700:	e7ed      	b.n	80016de <_free_r+0x22>
 8001702:	461a      	mov	r2, r3
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	b10b      	cbz	r3, 800170c <_free_r+0x50>
 8001708:	42a3      	cmp	r3, r4
 800170a:	d9fa      	bls.n	8001702 <_free_r+0x46>
 800170c:	6811      	ldr	r1, [r2, #0]
 800170e:	1855      	adds	r5, r2, r1
 8001710:	42a5      	cmp	r5, r4
 8001712:	d10b      	bne.n	800172c <_free_r+0x70>
 8001714:	6824      	ldr	r4, [r4, #0]
 8001716:	4421      	add	r1, r4
 8001718:	1854      	adds	r4, r2, r1
 800171a:	42a3      	cmp	r3, r4
 800171c:	6011      	str	r1, [r2, #0]
 800171e:	d1e0      	bne.n	80016e2 <_free_r+0x26>
 8001720:	681c      	ldr	r4, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	6053      	str	r3, [r2, #4]
 8001726:	4421      	add	r1, r4
 8001728:	6011      	str	r1, [r2, #0]
 800172a:	e7da      	b.n	80016e2 <_free_r+0x26>
 800172c:	d902      	bls.n	8001734 <_free_r+0x78>
 800172e:	230c      	movs	r3, #12
 8001730:	6003      	str	r3, [r0, #0]
 8001732:	e7d6      	b.n	80016e2 <_free_r+0x26>
 8001734:	6825      	ldr	r5, [r4, #0]
 8001736:	1961      	adds	r1, r4, r5
 8001738:	428b      	cmp	r3, r1
 800173a:	bf04      	itt	eq
 800173c:	6819      	ldreq	r1, [r3, #0]
 800173e:	685b      	ldreq	r3, [r3, #4]
 8001740:	6063      	str	r3, [r4, #4]
 8001742:	bf04      	itt	eq
 8001744:	1949      	addeq	r1, r1, r5
 8001746:	6021      	streq	r1, [r4, #0]
 8001748:	6054      	str	r4, [r2, #4]
 800174a:	e7ca      	b.n	80016e2 <_free_r+0x26>
 800174c:	b003      	add	sp, #12
 800174e:	bd30      	pop	{r4, r5, pc}
 8001750:	20000088 	.word	0x20000088

08001754 <_read_r>:
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	4d07      	ldr	r5, [pc, #28]	; (8001774 <_read_r+0x20>)
 8001758:	4604      	mov	r4, r0
 800175a:	4608      	mov	r0, r1
 800175c:	4611      	mov	r1, r2
 800175e:	2200      	movs	r2, #0
 8001760:	602a      	str	r2, [r5, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	f7fe fe80 	bl	8000468 <_read>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	d102      	bne.n	8001772 <_read_r+0x1e>
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	b103      	cbz	r3, 8001772 <_read_r+0x1e>
 8001770:	6023      	str	r3, [r4, #0]
 8001772:	bd38      	pop	{r3, r4, r5, pc}
 8001774:	20000090 	.word	0x20000090

08001778 <_fstat_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4d07      	ldr	r5, [pc, #28]	; (8001798 <_fstat_r+0x20>)
 800177c:	2300      	movs	r3, #0
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	602b      	str	r3, [r5, #0]
 8001786:	f7fe feb4 	bl	80004f2 <_fstat>
 800178a:	1c43      	adds	r3, r0, #1
 800178c:	d102      	bne.n	8001794 <_fstat_r+0x1c>
 800178e:	682b      	ldr	r3, [r5, #0]
 8001790:	b103      	cbz	r3, 8001794 <_fstat_r+0x1c>
 8001792:	6023      	str	r3, [r4, #0]
 8001794:	bd38      	pop	{r3, r4, r5, pc}
 8001796:	bf00      	nop
 8001798:	20000090 	.word	0x20000090

0800179c <_isatty_r>:
 800179c:	b538      	push	{r3, r4, r5, lr}
 800179e:	4d06      	ldr	r5, [pc, #24]	; (80017b8 <_isatty_r+0x1c>)
 80017a0:	2300      	movs	r3, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	602b      	str	r3, [r5, #0]
 80017a8:	f7fe feb3 	bl	8000512 <_isatty>
 80017ac:	1c43      	adds	r3, r0, #1
 80017ae:	d102      	bne.n	80017b6 <_isatty_r+0x1a>
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	b103      	cbz	r3, 80017b6 <_isatty_r+0x1a>
 80017b4:	6023      	str	r3, [r4, #0]
 80017b6:	bd38      	pop	{r3, r4, r5, pc}
 80017b8:	20000090 	.word	0x20000090

080017bc <_init>:
 80017bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017be:	bf00      	nop
 80017c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017c2:	bc08      	pop	{r3}
 80017c4:	469e      	mov	lr, r3
 80017c6:	4770      	bx	lr

080017c8 <_fini>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	bf00      	nop
 80017cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ce:	bc08      	pop	{r3}
 80017d0:	469e      	mov	lr, r3
 80017d2:	4770      	bx	lr
