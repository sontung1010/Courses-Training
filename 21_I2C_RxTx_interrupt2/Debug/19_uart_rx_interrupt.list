
19_uart_rx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000538  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000730  08000738  00010738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000730  08000730  00010738  2**0
                  CONTENTS
  4 .ARM          00000000  08000730  08000730  00010738  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000730  08000738  00010738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000730  08000730  00010730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000734  08000734  00010734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000738  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000738  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010738  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000139f  00000000  00000000  00010766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062a  00000000  00000000  00011b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00012130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  000122a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e239  00000000  00000000  000123c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c55  00000000  00000000  00030601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7c9c  00000000  00000000  00032256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9ef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000448  00000000  00000000  000d9f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000718 	.word	0x08000718

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000718 	.word	0x08000718

08000238 <set_pin_mode>:
 *      Author: st
 */
#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000238:	b480      	push	{r7}
 800023a:	b089      	sub	sp, #36	; 0x24
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b10 = 0x2
	 * 2 << 16 ==> bit16 = 0, bit17 = 1
	 * */

	MODIFY_REG(GPIOx->MODER, (0x3<<(POSITION_VAL(Pin)*2U)), (Mode<<(POSITION_VAL(Pin)*2U)));
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	fa92 f2a2 	rbit	r2, r2
 8000252:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000254:	693a      	ldr	r2, [r7, #16]
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	0052      	lsls	r2, r2, #1
 800025e:	2103      	movs	r1, #3
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	43d2      	mvns	r2, r2
 8000266:	401a      	ands	r2, r3
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800026c:	69fb      	ldr	r3, [r7, #28]
 800026e:	fa93 f3a3 	rbit	r3, r3
 8000272:	61bb      	str	r3, [r7, #24]
  return result;
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fab3 f383 	clz	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	6879      	ldr	r1, [r7, #4]
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	431a      	orrs	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3724      	adds	r7, #36	; 0x24
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
	...

08000298 <user_leds_init>:
#include "led.h"
#include "stm32f7xx.h"



void user_leds_init(void){
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= GPIOB_CLK_EN;
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <user_leds_init+0x64>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a16      	ldr	r2, [pc, #88]	; (80002fc <user_leds_init+0x64>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30

  // Set PB0 as output
  GPIOB->MODER |= (1U<<0);
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <user_leds_init+0x68>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a14      	ldr	r2, [pc, #80]	; (8000300 <user_leds_init+0x68>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1U<<1);
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <user_leds_init+0x68>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a11      	ldr	r2, [pc, #68]	; (8000300 <user_leds_init+0x68>)
 80002ba:	f023 0302 	bic.w	r3, r3, #2
 80002be:	6013      	str	r3, [r2, #0]

  // Set PB7 as output
  GPIOB->MODER |= (1U<<14);
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <user_leds_init+0x68>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <user_leds_init+0x68>)
 80002c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ca:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1U<<15);
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <user_leds_init+0x68>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <user_leds_init+0x68>)
 80002d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002d6:	6013      	str	r3, [r2, #0]

  // Set PB14 as output
  GPIOB->MODER |= (1U<<28);
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <user_leds_init+0x68>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a08      	ldr	r2, [pc, #32]	; (8000300 <user_leds_init+0x68>)
 80002de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e2:	6013      	str	r3, [r2, #0]
  GPIOB->MODER &= ~(1U<<29);
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <user_leds_init+0x68>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <user_leds_init+0x68>)
 80002ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020400 	.word	0x40020400

08000304 <all_leds_on>:

void all_leds_on(void){
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  GPIOB->ODR |= (RED_LED | GREEN_LED | BLUE_LED);
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <all_leds_on+0x1c>)
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	4904      	ldr	r1, [pc, #16]	; (8000320 <all_leds_on+0x1c>)
 800030e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000312:	4313      	orrs	r3, r2
 8000314:	614b      	str	r3, [r1, #20]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40020400 	.word	0x40020400

08000324 <all_leds_off>:

void all_leds_off(void){
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  GPIOB->ODR &=~(RED_LED | GREEN_LED | BLUE_LED);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <all_leds_off+0x1c>)
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	4904      	ldr	r1, [pc, #16]	; (8000340 <all_leds_off+0x1c>)
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <all_leds_off+0x20>)
 8000330:	4013      	ands	r3, r2
 8000332:	614b      	str	r3, [r1, #20]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40020400 	.word	0x40020400
 8000344:	ffffbf7e 	.word	0xffffbf7e

08000348 <led_on>:

void led_toggle(ledType led){
  GPIOB->ODR ^= led;
}

void led_on(ledType led){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  GPIOB->ODR |= led;
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <led_on+0x20>)
 8000352:	695a      	ldr	r2, [r3, #20]
 8000354:	4904      	ldr	r1, [pc, #16]	; (8000368 <led_on+0x20>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4313      	orrs	r3, r2
 800035a:	614b      	str	r3, [r1, #20]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40020400 	.word	0x40020400

0800036c <main>:
char ch;

static void uart_rx_callback(void);

int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  user_leds_init();
 8000370:	f7ff ff92 	bl	8000298 <user_leds_init>
  uart3_rx_interrupt_init();
 8000374:	f000 f8ac 	bl	80004d0 <uart3_rx_interrupt_init>


	while(1)
	{

    switch(ch){
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <main+0xa0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b30      	cmp	r3, #48	; 0x30
 800037e:	d02f      	beq.n	80003e0 <main+0x74>
 8000380:	2b30      	cmp	r3, #48	; 0x30
 8000382:	db40      	blt.n	8000406 <main+0x9a>
 8000384:	2b72      	cmp	r3, #114	; 0x72
 8000386:	dc3e      	bgt.n	8000406 <main+0x9a>
 8000388:	2b61      	cmp	r3, #97	; 0x61
 800038a:	db3c      	blt.n	8000406 <main+0x9a>
 800038c:	3b61      	subs	r3, #97	; 0x61
 800038e:	2b11      	cmp	r3, #17
 8000390:	d839      	bhi.n	8000406 <main+0x9a>
 8000392:	a201      	add	r2, pc, #4	; (adr r2, 8000398 <main+0x2c>)
 8000394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000398:	080003e7 	.word	0x080003e7
 800039c:	080003ed 	.word	0x080003ed
 80003a0:	08000407 	.word	0x08000407
 80003a4:	08000407 	.word	0x08000407
 80003a8:	08000407 	.word	0x08000407
 80003ac:	08000407 	.word	0x08000407
 80003b0:	080003f5 	.word	0x080003f5
 80003b4:	08000407 	.word	0x08000407
 80003b8:	08000407 	.word	0x08000407
 80003bc:	08000407 	.word	0x08000407
 80003c0:	08000407 	.word	0x08000407
 80003c4:	08000407 	.word	0x08000407
 80003c8:	08000407 	.word	0x08000407
 80003cc:	08000407 	.word	0x08000407
 80003d0:	08000407 	.word	0x08000407
 80003d4:	08000407 	.word	0x08000407
 80003d8:	08000407 	.word	0x08000407
 80003dc:	080003fd 	.word	0x080003fd
      case '0':
        all_leds_off();
 80003e0:	f7ff ffa0 	bl	8000324 <all_leds_off>
        break;
 80003e4:	e010      	b.n	8000408 <main+0x9c>
      case 'a':
        all_leds_on();
 80003e6:	f7ff ff8d 	bl	8000304 <all_leds_on>
        break;
 80003ea:	e00d      	b.n	8000408 <main+0x9c>
      case 'b':
        led_on(BLUE_LED);
 80003ec:	2080      	movs	r0, #128	; 0x80
 80003ee:	f7ff ffab 	bl	8000348 <led_on>
        break;
 80003f2:	e009      	b.n	8000408 <main+0x9c>
      case 'g':
        led_on(GREEN_LED);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f7ff ffa7 	bl	8000348 <led_on>
        break;
 80003fa:	e005      	b.n	8000408 <main+0x9c>
      case 'r':
        led_on(RED_LED);
 80003fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000400:	f7ff ffa2 	bl	8000348 <led_on>
        break;
 8000404:	e000      	b.n	8000408 <main+0x9c>
      default:
        break;
 8000406:	bf00      	nop
    switch(ch){
 8000408:	e7b6      	b.n	8000378 <main+0xc>
 800040a:	bf00      	nop
 800040c:	2000001c 	.word	0x2000001c

08000410 <uart_rx_callback>:
    }

	}
}

static void uart_rx_callback(void){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  ch = (READ_BIT(USART3->RDR, USART_RDR_RDR)& 0xFFU);
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <uart_rx_callback+0x18>)
 8000416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b04      	ldr	r3, [pc, #16]	; (800042c <uart_rx_callback+0x1c>)
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40004800 	.word	0x40004800
 800042c:	2000001c 	.word	0x2000001c

08000430 <USART3_IRQHandler>:


void USART3_IRQHandler(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  // Check if rxne interrupt occured
  if((USART3->ISR & ISR_RXNE) == ISR_RXNE){
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <USART3_IRQHandler+0x18>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	f003 0320 	and.w	r3, r3, #32
 800043c:	2b20      	cmp	r3, #32
 800043e:	d101      	bne.n	8000444 <USART3_IRQHandler+0x14>
    // Do something
    uart_rx_callback();
 8000440:	f7ff ffe6 	bl	8000410 <uart_rx_callback>
  }

}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40004800 	.word	0x40004800

0800044c <set_ahb1_periph_clock>:
 *      Author: st
 */
#include "rcc.h"

void set_ahb1_periph_clock(uint32_t periphs)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <set_ahb1_periph_clock+0x20>)
 8000456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000458:	4904      	ldr	r1, [pc, #16]	; (800046c <set_ahb1_periph_clock+0x20>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4313      	orrs	r3, r2
 800045e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40023800 	.word	0x40023800

08000470 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <set_apb1_periph_clock+0x20>)
 800047a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800047c:	4904      	ldr	r1, [pc, #16]	; (8000490 <set_apb1_periph_clock+0x20>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4313      	orrs	r3, r2
 8000482:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40023800 	.word	0x40023800

08000494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	db0b      	blt.n	80004be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	f003 021f 	and.w	r2, r3, #31
 80004ac:	4907      	ldr	r1, [pc, #28]	; (80004cc <__NVIC_EnableIRQ+0x38>)
 80004ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b2:	095b      	lsrs	r3, r3, #5
 80004b4:	2001      	movs	r0, #1
 80004b6:	fa00 f202 	lsl.w	r2, r0, r2
 80004ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	e000e100 	.word	0xe000e100

080004d0 <uart3_rx_interrupt_init>:
  return ch;
}


void uart3_rx_interrupt_init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  // PD8 = TX
  // PD9 = RX

  // Configure tx pin
	// 1.Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 80004d4:	2008      	movs	r0, #8
 80004d6:	f7ff ffb9 	bl	800044c <set_ahb1_periph_clock>

	// 2.Set PD8 to mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 80004da:	2202      	movs	r2, #2
 80004dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e0:	482d      	ldr	r0, [pc, #180]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 80004e2:	f7ff fea9 	bl	8000238 <set_pin_mode>

	// 3. Set alternate function to USART
	GPIOD->AFR[1] |= (1U<<0);
 80004e6:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 80004e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ea:	4a2b      	ldr	r2, [pc, #172]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 80004f2:	4b29      	ldr	r3, [pc, #164]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 80004f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004f6:	4a28      	ldr	r2, [pc, #160]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80004fe:	4b26      	ldr	r3, [pc, #152]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000502:	4a25      	ldr	r2, [pc, #148]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ (1U<<3);
 800050a:	4b23      	ldr	r3, [pc, #140]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	4a22      	ldr	r2, [pc, #136]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000510:	f023 0308 	bic.w	r3, r3, #8
 8000514:	6253      	str	r3, [r2, #36]	; 0x24


  // Configure rx pin
  // Set PD9 to mode to alternate function
	set_pin_mode(GPIOD, UART3_RX, GPIO_ALTERNATE_MODE);
 8000516:	2202      	movs	r2, #2
 8000518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051c:	481e      	ldr	r0, [pc, #120]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 800051e:	f7ff fe8b 	bl	8000238 <set_pin_mode>

  // Set alternate function to USART
	GPIOD->AFR[1] |= (1U<<4);
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000528:	f043 0310 	orr.w	r3, r3, #16
 800052c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<5);
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000532:	4a19      	ldr	r2, [pc, #100]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000534:	f043 0320 	orr.w	r3, r3, #32
 8000538:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<6);
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 800053c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053e:	4a16      	ldr	r2, [pc, #88]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000544:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ (1U<<7);
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 8000548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800054a:	4a13      	ldr	r2, [pc, #76]	; (8000598 <uart3_rx_interrupt_init+0xc8>)
 800054c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000550:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable clock to the USART3 module
	set_apb1_periph_clock(USART3EN);
 8000552:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000556:	f7ff ff8b 	bl	8000470 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <uart3_rx_interrupt_init+0xcc>)
 8000562:	f000 f855 	bl	8000610 <config_uart_parameters>
  set_uart_transfer_direction(USART3, USART_CR1_TE | USART_CR1_RE);
 8000566:	210c      	movs	r1, #12
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <uart3_rx_interrupt_init+0xcc>)
 800056a:	f000 f82b 	bl	80005c4 <set_uart_transfer_direction>

	// Set baudrate
  uart_set_baudrate(USART3, 16000000, 115200);
 800056e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000572:	490b      	ldr	r1, [pc, #44]	; (80005a0 <uart3_rx_interrupt_init+0xd0>)
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <uart3_rx_interrupt_init+0xcc>)
 8000576:	f000 f838 	bl	80005ea <uart_set_baudrate>

	// Enable USART
  /*USART3->CR1 |= USART_CR1_UE;*/
  // SET_BIT(USART3->CR1, USART_CR1_UE);
  uart_enable(USART3);
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <uart3_rx_interrupt_init+0xcc>)
 800057c:	f000 f812 	bl	80005a4 <uart_enable>

  // Enable UART rxne interrupt
  USART3->CR1 |= CR1_RXNEIE;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <uart3_rx_interrupt_init+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <uart3_rx_interrupt_init+0xcc>)
 8000586:	f043 0320 	orr.w	r3, r3, #32
 800058a:	6013      	str	r3, [r2, #0]

  // Enable uart interrupt in NVIC
  NVIC_EnableIRQ(USART3_IRQn);
 800058c:	2027      	movs	r0, #39	; 0x27
 800058e:	f7ff ff81 	bl	8000494 <__NVIC_EnableIRQ>

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00
 800059c:	40004800 	.word	0x40004800
 80005a0:	00f42400 	.word	0x00f42400

080005a4 <uart_enable>:
  USARTx->TDR = value;
}


static void uart_enable(USART_TypeDef *USARTx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f043 0201 	orr.w	r2, r3, #1
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <set_uart_transfer_direction>:

static void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f023 020c 	bic.w	r2, r3, #12
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b084      	sub	sp, #16
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	60f8      	str	r0, [r7, #12]
 80005f2:	60b9      	str	r1, [r7, #8]
 80005f4:	607a      	str	r2, [r7, #4]
  USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	68b8      	ldr	r0, [r7, #8]
 80005fa:	f000 f82b 	bl	8000654 <compute_uart_div>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	60da      	str	r2, [r3, #12]
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <config_uart_parameters+0x40>)
 8000624:	4013      	ands	r3, r2
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	430a      	orrs	r2, r1
 800062c:	431a      	orrs	r2, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	601a      	str	r2, [r3, #0]

	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	431a      	orrs	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	605a      	str	r2, [r3, #4]
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	efffe9ff 	.word	0xefffe9ff

08000654 <compute_uart_div>:


uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	085a      	lsrs	r2, r3, #1
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	441a      	add	r2, r3
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	fbb2 f3f3 	udiv	r3, r2, r3
 800066c:	b29b      	uxth	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000680:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000684:	480c      	ldr	r0, [pc, #48]	; (80006b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <LoopForever+0xe>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800068c:	e002      	b.n	8000694 <LoopCopyDataInit>

0800068e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000692:	3304      	adds	r3, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000698:	d3f9      	bcc.n	800068e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800069c:	4c0a      	ldr	r4, [pc, #40]	; (80006c8 <LoopForever+0x16>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a0:	e001      	b.n	80006a6 <LoopFillZerobss>

080006a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a4:	3204      	adds	r2, #4

080006a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a8:	d3fb      	bcc.n	80006a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006aa:	f000 f811 	bl	80006d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ae:	f7ff fe5d 	bl	800036c <main>

080006b2 <LoopForever>:

LoopForever:
  b LoopForever
 80006b2:	e7fe      	b.n	80006b2 <LoopForever>
  ldr   r0, =_estack
 80006b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006c0:	08000738 	.word	0x08000738
  ldr r2, =_sbss
 80006c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006c8:	20000020 	.word	0x20000020

080006cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <__libc_init_array>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	4d0d      	ldr	r5, [pc, #52]	; (8000708 <__libc_init_array+0x38>)
 80006d4:	4c0d      	ldr	r4, [pc, #52]	; (800070c <__libc_init_array+0x3c>)
 80006d6:	1b64      	subs	r4, r4, r5
 80006d8:	10a4      	asrs	r4, r4, #2
 80006da:	2600      	movs	r6, #0
 80006dc:	42a6      	cmp	r6, r4
 80006de:	d109      	bne.n	80006f4 <__libc_init_array+0x24>
 80006e0:	4d0b      	ldr	r5, [pc, #44]	; (8000710 <__libc_init_array+0x40>)
 80006e2:	4c0c      	ldr	r4, [pc, #48]	; (8000714 <__libc_init_array+0x44>)
 80006e4:	f000 f818 	bl	8000718 <_init>
 80006e8:	1b64      	subs	r4, r4, r5
 80006ea:	10a4      	asrs	r4, r4, #2
 80006ec:	2600      	movs	r6, #0
 80006ee:	42a6      	cmp	r6, r4
 80006f0:	d105      	bne.n	80006fe <__libc_init_array+0x2e>
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f8:	4798      	blx	r3
 80006fa:	3601      	adds	r6, #1
 80006fc:	e7ee      	b.n	80006dc <__libc_init_array+0xc>
 80006fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000702:	4798      	blx	r3
 8000704:	3601      	adds	r6, #1
 8000706:	e7f2      	b.n	80006ee <__libc_init_array+0x1e>
 8000708:	08000730 	.word	0x08000730
 800070c:	08000730 	.word	0x08000730
 8000710:	08000730 	.word	0x08000730
 8000714:	08000734 	.word	0x08000734

08000718 <_init>:
 8000718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800071a:	bf00      	nop
 800071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071e:	bc08      	pop	{r3}
 8000720:	469e      	mov	lr, r3
 8000722:	4770      	bx	lr

08000724 <_fini>:
 8000724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000726:	bf00      	nop
 8000728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800072a:	bc08      	pop	{r3}
 800072c:	469e      	mov	lr, r3
 800072e:	4770      	bx	lr
