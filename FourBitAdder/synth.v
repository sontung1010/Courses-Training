/* Generated by Yosys 0.27+33 (git sha1 a2655a4b7, aarch64-apple-darwin20.2-clang 10.0.0-4ubuntu1 -fPIC -Os) */

(* top =  1  *)
(* src = "AdderTop.v:20.1-54.10" *)
module AdderTop(Output, Sw0, Sw1, Sw2, Sw3, Sw4, Sw5, Sw6, Sw7, Btn0);
  (* src = "AdderTop.v:32.10-32.14" *)
  input Btn0;
  wire Btn0;
  (* src = "AdderTop.v:41.6-41.9" *)
  wire Cin;
  (* src = "AdderTop.v:40.6-40.10" *)
  wire Cout;
  (* src = "AdderTop.v:43.12-43.20" *)
  wire [4:0] DispData;
  (* src = "AdderTop.v:36.12-36.15" *)
  wire [3:0] OpX;
  (* src = "AdderTop.v:37.12-37.15" *)
  wire [3:0] OpY;
  (* src = "AdderTop.v:22.19-22.25" *)
  output [4:0] Output;
  wire [4:0] Output;
  (* src = "AdderTop.v:39.12-39.15" *)
  wire [3:0] Sum;
  (* src = "AdderTop.v:23.14-23.17" *)
  input Sw0;
  wire Sw0;
  (* src = "AdderTop.v:24.14-24.17" *)
  input Sw1;
  wire Sw1;
  (* src = "AdderTop.v:25.14-25.17" *)
  input Sw2;
  wire Sw2;
  (* src = "AdderTop.v:26.14-26.17" *)
  input Sw3;
  wire Sw3;
  (* src = "AdderTop.v:27.21-27.24" *)
  input Sw4;
  wire Sw4;
  (* src = "AdderTop.v:28.21-28.24" *)
  input Sw5;
  wire Sw5;
  (* src = "AdderTop.v:29.21-29.24" *)
  input Sw6;
  wire Sw6;
  (* src = "AdderTop.v:30.21-30.24" *)
  input Sw7;
  wire Sw7;
  (* module_not_derived = 32'd1 *)
  (* src = "AdderTop.v:50.14-50.44" *)
  FourBitAdder Add1 (
    .RCOAddX(OpX),
    .RCOAddY(OpY),
    .RCOCarryIn(Cin),
    .RCOCarryOut(Cout),
    .RCOSum(Sum)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "AdderTop.v:52.9-52.28" *)
  DispOut DO (
    .DataIn({ Cout, Sum }),
    .DataOut(Output)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "AdderTop.v:48.11-48.64" *)
  InputRead In0 (
    .Btn0(Btn0),
    .Cin(Cin),
    .InputX(OpX),
    .InputY(OpY),
    .Sw0(Sw0),
    .Sw1(Sw1),
    .Sw2(Sw2),
    .Sw3(Sw3),
    .Sw4(Sw4),
    .Sw5(Sw5),
    .Sw6(Sw6),
    .Sw7(Sw7)
  );
  assign DispData = { Cout, Sum };
endmodule

(* src = "DisplayOut.v:20.1-36.10" *)
module DispOut(DataOut, DataIn);
  (* src = "DisplayOut.v:23.16-23.22" *)
  input [4:0] DataIn;
  wire [4:0] DataIn;
  (* src = "DisplayOut.v:22.15-22.22" *)
  output [4:0] DataOut;
  wire [4:0] DataOut;
  assign DataOut[1] = ~DataIn[1];
  assign DataOut[2] = ~DataIn[2];
  assign DataOut[3] = ~DataIn[3];
  assign DataOut[4] = ~DataIn[4];
  assign DataOut[0] = ~DataIn[0];
endmodule

(* src = "FourBitAdder.v:21.1-44.10" *)
module FourBitAdder(RCOSum, RCOCarryOut, RCOAddX, RCOAddY, RCOCarryIn);
  (* src = "FourBitAdder.v:32.6-32.8" *)
  wire C1;
  (* src = "FourBitAdder.v:33.6-33.8" *)
  wire C2;
  (* src = "FourBitAdder.v:34.6-34.8" *)
  wire C3;
  (* src = "FourBitAdder.v:25.19-25.26" *)
  input [3:0] RCOAddX;
  wire [3:0] RCOAddX;
  (* src = "FourBitAdder.v:26.19-26.26" *)
  input [3:0] RCOAddY;
  wire [3:0] RCOAddY;
  (* src = "FourBitAdder.v:27.11-27.21" *)
  input RCOCarryIn;
  wire RCOCarryIn;
  (* src = "FourBitAdder.v:24.16-24.27" *)
  output RCOCarryOut;
  wire RCOCarryOut;
  (* src = "FourBitAdder.v:23.19-23.25" *)
  output [3:0] RCOSum;
  wire [3:0] RCOSum;
  (* module_not_derived = 32'd1 *)
  (* src = "FourBitAdder.v:38.11-38.65" *)
  FullAdder RCO_FA0 (
    .Cin(RCOCarryIn),
    .Cout(C1),
    .Sum(RCOSum[0]),
    .Xin(RCOAddX[0]),
    .Yin(RCOAddY[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "FourBitAdder.v:39.4-39.50" *)
  FullAdder RCO_FA1 (
    .Cin(C1),
    .Cout(C2),
    .Sum(RCOSum[1]),
    .Xin(RCOAddX[1]),
    .Yin(RCOAddY[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "FourBitAdder.v:40.4-40.50" *)
  FullAdder RCO_FA2 (
    .Cin(C2),
    .Cout(C3),
    .Sum(RCOSum[2]),
    .Xin(RCOAddX[2]),
    .Yin(RCOAddY[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "FourBitAdder.v:41.4-41.60" *)
  FullAdder RCO_FA3 (
    .Cin(C3),
    .Cout(RCOCarryOut),
    .Sum(RCOSum[3]),
    .Xin(RCOAddX[3]),
    .Yin(RCOAddY[3])
  );
endmodule

(* src = "FullAdder.v:21.1-43.10" *)
module FullAdder(Sum, Cout, Xin, Yin, Cin);
  (* src = "FullAdder.v:30.6-30.8" *)
  wire C1;
  (* src = "FullAdder.v:31.6-31.8" *)
  wire C2;
  (* src = "FullAdder.v:24.11-24.14" *)
  input Cin;
  wire Cin;
  (* src = "FullAdder.v:26.12-26.16" *)
  output Cout;
  wire Cout;
  (* src = "FullAdder.v:29.6-29.8" *)
  wire S1;
  (* src = "FullAdder.v:25.12-25.15" *)
  output Sum;
  wire Sum;
  (* src = "FullAdder.v:22.11-22.14" *)
  input Xin;
  wire Xin;
  (* src = "FullAdder.v:23.11-23.14" *)
  input Yin;
  wire Yin;
  assign Cout = C1 | C2;
  (* module_not_derived = 32'd1 *)
  (* src = "FullAdder.v:36.11-36.29" *)
  HalfAdder HA1 (
    .CarryHalf(C1),
    .SumHalf(S1),
    .Xhalf(Xin),
    .Yhalf(Yin)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "FullAdder.v:37.11-37.29" *)
  HalfAdder HA2 (
    .CarryHalf(C2),
    .SumHalf(Sum),
    .Xhalf(S1),
    .Yhalf(Cin)
  );
endmodule

(* src = "HalfAdder.v:20.1-32.10" *)
module HalfAdder(SumHalf, CarryHalf, Xhalf, Yhalf);
  (* src = "HalfAdder.v:23.12-23.21" *)
  output CarryHalf;
  wire CarryHalf;
  (* src = "HalfAdder.v:22.12-22.19" *)
  output SumHalf;
  wire SumHalf;
  (* src = "HalfAdder.v:24.8-24.13" *)
  input Xhalf;
  wire Xhalf;
  (* src = "HalfAdder.v:25.11-25.16" *)
  input Yhalf;
  wire Yhalf;
  assign SumHalf = Yhalf ^ Xhalf;
  assign CarryHalf = Yhalf & Xhalf;
endmodule

(* src = "InputRead.v:21.1-50.10" *)
module InputRead(Sw0, Sw1, Sw2, Sw3, Sw4, Sw5, Sw6, Sw7, Btn0, InputX, InputY, Cin);
  (* src = "InputRead.v:30.9-30.13" *)
  input Btn0;
  wire Btn0;
  (* src = "InputRead.v:33.15-33.18" *)
  output Cin;
  wire Cin;
  (* src = "InputRead.v:31.18-31.24" *)
  output [3:0] InputX;
  wire [3:0] InputX;
  (* src = "InputRead.v:32.18-32.24" *)
  output [3:0] InputY;
  wire [3:0] InputY;
  (* src = "InputRead.v:22.11-22.14" *)
  input Sw0;
  wire Sw0;
  (* src = "InputRead.v:23.11-23.14" *)
  input Sw1;
  wire Sw1;
  (* src = "InputRead.v:24.11-24.14" *)
  input Sw2;
  wire Sw2;
  (* src = "InputRead.v:25.11-25.14" *)
  input Sw3;
  wire Sw3;
  (* src = "InputRead.v:26.11-26.14" *)
  input Sw4;
  wire Sw4;
  (* src = "InputRead.v:27.11-27.14" *)
  input Sw5;
  wire Sw5;
  (* src = "InputRead.v:28.11-28.14" *)
  input Sw6;
  wire Sw6;
  (* src = "InputRead.v:29.11-29.14" *)
  input Sw7;
  wire Sw7;
  assign Cin = ~Btn0;
  assign InputX = { Sw3, Sw2, Sw1, Sw0 };
  assign InputY = { Sw7, Sw6, Sw5, Sw4 };
endmodule
