
6_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000354  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800054c  08000554  00010554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800054c  0800054c  00010554  2**0
                  CONTENTS
  4 .ARM          00000000  0800054c  0800054c  00010554  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800054c  08000554  00010554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800054c  0800054c  0001054c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000550  08000550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000554  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000554  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010554  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000739  00000000  00000000  00010582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e1  00000000  00000000  00010cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00010f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfde  00000000  00000000  00010fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000069a  00000000  00000000  0002dfb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3401  00000000  00000000  0002e650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1a51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000022c  00000000  00000000  000d1aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000534 	.word	0x08000534

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000534 	.word	0x08000534

08000238 <main>:
void uart_write(USART_TypeDef *USARTx, uint8_t value);
void uart3_tx_init(void);
void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection);

int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
  int x;
  uart3_tx_init();
 800023e:	f000 f82b 	bl	8000298 <uart3_tx_init>


	while(1)
	{
    uart_write(USART3, 'A');
 8000242:	2141      	movs	r1, #65	; 0x41
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <main+0x30>)
 8000246:	f000 f811 	bl	800026c <uart_write>
    for(int i=0;i<9000;i++)
 800024a:	2300      	movs	r3, #0
 800024c:	603b      	str	r3, [r7, #0]
 800024e:	e005      	b.n	800025c <main+0x24>
    {
      x++;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3301      	adds	r3, #1
 8000254:	607b      	str	r3, [r7, #4]
    for(int i=0;i<9000;i++)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	f242 3227 	movw	r2, #8999	; 0x2327
 8000262:	4293      	cmp	r3, r2
 8000264:	ddf4      	ble.n	8000250 <main+0x18>
    uart_write(USART3, 'A');
 8000266:	e7ec      	b.n	8000242 <main+0xa>
 8000268:	40004800 	.word	0x40004800

0800026c <uart_write>:
}



void uart_write(USART_TypeDef *USARTx, uint8_t value)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	70fb      	strb	r3, [r7, #3]
  // Make sure transmit data register is empty
  while (!((USARTx->ISR & USART_ISR_TXE) == USART_ISR_TXE)){}
 8000278:	bf00      	nop
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000282:	2b80      	cmp	r3, #128	; 0x80
 8000284:	d1f9      	bne.n	800027a <uart_write+0xe>
  /*while (!(USARTx->ISR & USART_ISR_TXE)){}*/

  // Write value into transmit data register
  USARTx->TDR = value;
 8000286:	78fa      	ldrb	r2, [r7, #3]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <uart3_tx_init>:

void uart3_tx_init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	// 1.Enable clock access to GPIOD
	set_ahb1_periph_clock(GPIODEN);
 800029c:	2008      	movs	r0, #8
 800029e:	f000 f895 	bl	80003cc <set_ahb1_periph_clock>

	// 2.Set PD8 to mode to alternate function
	set_pin_mode(GPIOD, UART3_TX, GPIO_ALTERNATE_MODE);
 80002a2:	2202      	movs	r2, #2
 80002a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a8:	4819      	ldr	r0, [pc, #100]	; (8000310 <uart3_tx_init+0x78>)
 80002aa:	f000 f8b3 	bl	8000414 <set_pin_mode>

	// 3. Set alternate function to USART
	GPIOD->AFR[1] |= (1U<<0);
 80002ae:	4b18      	ldr	r3, [pc, #96]	; (8000310 <uart3_tx_init+0x78>)
 80002b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b2:	4a17      	ldr	r2, [pc, #92]	; (8000310 <uart3_tx_init+0x78>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<1);
 80002ba:	4b15      	ldr	r3, [pc, #84]	; (8000310 <uart3_tx_init+0x78>)
 80002bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002be:	4a14      	ldr	r2, [pc, #80]	; (8000310 <uart3_tx_init+0x78>)
 80002c0:	f043 0302 	orr.w	r3, r3, #2
 80002c4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] |= (1U<<2);
 80002c6:	4b12      	ldr	r3, [pc, #72]	; (8000310 <uart3_tx_init+0x78>)
 80002c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ca:	4a11      	ldr	r2, [pc, #68]	; (8000310 <uart3_tx_init+0x78>)
 80002cc:	f043 0304 	orr.w	r3, r3, #4
 80002d0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOD->AFR[1] &=~ (1U<<3);
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <uart3_tx_init+0x78>)
 80002d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <uart3_tx_init+0x78>)
 80002d8:	f023 0308 	bic.w	r3, r3, #8
 80002dc:	6253      	str	r3, [r2, #36]	; 0x24

	// Enable clock to the USART3 module
	set_apb1_periph_clock(USART3EN);
 80002de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80002e2:	f000 f885 	bl	80003f0 <set_apb1_periph_clock>

	// Configure USART parameters
	config_uart_parameters(USART3, UART_DATAWIDTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
 80002e6:	2300      	movs	r3, #0
 80002e8:	2200      	movs	r2, #0
 80002ea:	2100      	movs	r1, #0
 80002ec:	4809      	ldr	r0, [pc, #36]	; (8000314 <uart3_tx_init+0x7c>)
 80002ee:	f000 f84b 	bl	8000388 <config_uart_parameters>
  set_uart_transfer_direction(USART3, USART_CR1_TE);
 80002f2:	2108      	movs	r1, #8
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <uart3_tx_init+0x7c>)
 80002f6:	f000 f821 	bl	800033c <set_uart_transfer_direction>

	// Set baudrate
  uart_set_baudrate(USART3, 16000000, 115200);
 80002fa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fe:	4906      	ldr	r1, [pc, #24]	; (8000318 <uart3_tx_init+0x80>)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <uart3_tx_init+0x7c>)
 8000302:	f000 f82e 	bl	8000362 <uart_set_baudrate>

	// Enable USART
  /*USART3->CR1 |= USART_CR1_UE;*/
  // SET_BIT(USART3->CR1, USART_CR1_UE);
  uart_enable(USART3);
 8000306:	4803      	ldr	r0, [pc, #12]	; (8000314 <uart3_tx_init+0x7c>)
 8000308:	f000 f808 	bl	800031c <uart_enable>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40020c00 	.word	0x40020c00
 8000314:	40004800 	.word	0x40004800
 8000318:	00f42400 	.word	0x00f42400

0800031c <uart_enable>:


void uart_enable(USART_TypeDef *USARTx)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f043 0201 	orr.w	r2, r3, #1
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <set_uart_transfer_direction>:

void set_uart_transfer_direction(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 020c 	bic.w	r2, r3, #12
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <uart_set_baudrate>:

void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b084      	sub	sp, #16
 8000366:	af00      	add	r7, sp, #0
 8000368:	60f8      	str	r0, [r7, #12]
 800036a:	60b9      	str	r1, [r7, #8]
 800036c:	607a      	str	r2, [r7, #4]
  USARTx->BRR = compute_uart_div(PeriphClk, BaudRate);
 800036e:	6879      	ldr	r1, [r7, #4]
 8000370:	68b8      	ldr	r0, [r7, #8]
 8000372:	f000 f87e 	bl	8000472 <compute_uart_div>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	60da      	str	r2, [r3, #12]
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <config_uart_parameters>:

void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
 8000394:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <config_uart_parameters+0x40>)
 800039c:	4013      	ands	r3, r2
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	68ba      	ldr	r2, [r7, #8]
 80003a2:	430a      	orrs	r2, r1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	601a      	str	r2, [r3, #0]

	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	605a      	str	r2, [r3, #4]
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	efffe9ff 	.word	0xefffe9ff

080003cc <set_ahb1_periph_clock>:

void set_ahb1_periph_clock(uint32_t periphs)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR, periphs);
 80003d4:	4b05      	ldr	r3, [pc, #20]	; (80003ec <set_ahb1_periph_clock+0x20>)
 80003d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003d8:	4904      	ldr	r1, [pc, #16]	; (80003ec <set_ahb1_periph_clock+0x20>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	630b      	str	r3, [r1, #48]	; 0x30
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40023800 	.word	0x40023800

080003f0 <set_apb1_periph_clock>:
{
	SET_BIT(RCC->AHB2ENR, periphs);
}

void set_apb1_periph_clock(uint32_t periphs)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, periphs);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <set_apb1_periph_clock+0x20>)
 80003fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003fc:	4904      	ldr	r1, [pc, #16]	; (8000410 <set_apb1_periph_clock+0x20>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4313      	orrs	r3, r2
 8000402:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023800 	.word	0x40023800

08000414 <set_pin_mode>:
{
	SET_BIT(RCC->APB1ENR, periphs);
}

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000414:	b480      	push	{r7}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b10 = 0x2
	 * 2 << 16 ==> bit16 = 0, bit17 = 1
	 * */

	MODIFY_REG(GPIOx->MODER, (0x3<<(POSITION_VAL(Pin)*2U)), (Mode<<(POSITION_VAL(Pin)*2U)));
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	68ba      	ldr	r2, [r7, #8]
 8000426:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000428:	697a      	ldr	r2, [r7, #20]
 800042a:	fa92 f2a2 	rbit	r2, r2
 800042e:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000430:	693a      	ldr	r2, [r7, #16]
 8000432:	fab2 f282 	clz	r2, r2
 8000436:	b2d2      	uxtb	r2, r2
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	2103      	movs	r1, #3
 800043c:	fa01 f202 	lsl.w	r2, r1, r2
 8000440:	43d2      	mvns	r2, r2
 8000442:	401a      	ands	r2, r3
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000448:	69fb      	ldr	r3, [r7, #28]
 800044a:	fa93 f3a3 	rbit	r3, r3
 800044e:	61bb      	str	r3, [r7, #24]
  return result;
 8000450:	69bb      	ldr	r3, [r7, #24]
 8000452:	fab3 f383 	clz	r3, r3
 8000456:	b2db      	uxtb	r3, r3
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	431a      	orrs	r2, r3
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	bf00      	nop
 8000468:	3724      	adds	r7, #36	; 0x24
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <compute_uart_div>:

uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	6039      	str	r1, [r7, #0]
  return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	085a      	lsrs	r2, r3, #1
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	441a      	add	r2, r3
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	fbb2 f3f3 	udiv	r3, r2, r3
 800048a:	b29b      	uxth	r3, r3
}
 800048c:	4618      	mov	r0, r3
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800049c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	; (80004d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <LoopForever+0xe>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	; (80004e4 <LoopForever+0x16>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c6:	f000 f811 	bl	80004ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff feb5 	bl	8000238 <main>

080004ce <LoopForever>:

LoopForever:
  b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004dc:	08000554 	.word	0x08000554
  ldr r2, =_sbss
 80004e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e4:	2000001c 	.word	0x2000001c

080004e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC_IRQHandler>
	...

080004ec <__libc_init_array>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4d0d      	ldr	r5, [pc, #52]	; (8000524 <__libc_init_array+0x38>)
 80004f0:	4c0d      	ldr	r4, [pc, #52]	; (8000528 <__libc_init_array+0x3c>)
 80004f2:	1b64      	subs	r4, r4, r5
 80004f4:	10a4      	asrs	r4, r4, #2
 80004f6:	2600      	movs	r6, #0
 80004f8:	42a6      	cmp	r6, r4
 80004fa:	d109      	bne.n	8000510 <__libc_init_array+0x24>
 80004fc:	4d0b      	ldr	r5, [pc, #44]	; (800052c <__libc_init_array+0x40>)
 80004fe:	4c0c      	ldr	r4, [pc, #48]	; (8000530 <__libc_init_array+0x44>)
 8000500:	f000 f818 	bl	8000534 <_init>
 8000504:	1b64      	subs	r4, r4, r5
 8000506:	10a4      	asrs	r4, r4, #2
 8000508:	2600      	movs	r6, #0
 800050a:	42a6      	cmp	r6, r4
 800050c:	d105      	bne.n	800051a <__libc_init_array+0x2e>
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	f855 3b04 	ldr.w	r3, [r5], #4
 8000514:	4798      	blx	r3
 8000516:	3601      	adds	r6, #1
 8000518:	e7ee      	b.n	80004f8 <__libc_init_array+0xc>
 800051a:	f855 3b04 	ldr.w	r3, [r5], #4
 800051e:	4798      	blx	r3
 8000520:	3601      	adds	r6, #1
 8000522:	e7f2      	b.n	800050a <__libc_init_array+0x1e>
 8000524:	0800054c 	.word	0x0800054c
 8000528:	0800054c 	.word	0x0800054c
 800052c:	0800054c 	.word	0x0800054c
 8000530:	08000550 	.word	0x08000550

08000534 <_init>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr

08000540 <_fini>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr
